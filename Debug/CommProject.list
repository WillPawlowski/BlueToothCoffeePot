
CommProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800694c  0800694c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006954  08006954  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000007c  080069dc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080069dc  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da99  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a7  00000000  00000000  0002db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008be  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174d6  00000000  00000000  00031666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e828  00000000  00000000  00048b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e4ef  00000000  00000000  00057364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003354  00000000  00000000  000d5854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d8ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006588 	.word	0x08006588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08006588 	.word	0x08006588

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	; (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <_ZN5TimerC1EPFvvE>:
#include "Timer.h"
#include <stdio.h>

void (*Timer::executeMethod)();

Timer::Timer(void (*method)()) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	741a      	strb	r2, [r3, #16]
	executeMethod = method;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <_ZN5TimerC1EPFvvE+0x38>)
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000098 	.word	0x20000098

080006dc <_ZN5Timer10setUpTimerEii>:
	printf("Set for %d seconds\r\n", endTime);
	executeMethod = method;
	enabled = true;
}

int Timer::setUpTimer(int h, int m){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	endTime = 3600*h + 60*m;
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	0013      	movs	r3, r2
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	011a      	lsls	r2, r3, #4
 80006f2:	1ad2      	subs	r2, r2, r3
 80006f4:	0113      	lsls	r3, r2, #4
 80006f6:	001a      	movs	r2, r3
 80006f8:	0011      	movs	r1, r2
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	0013      	movs	r3, r2
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	18ca      	adds	r2, r1, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	601a      	str	r2, [r3, #0]
	currTime = 0;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
	enabled = true;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2201      	movs	r2, #1
 8000714:	741a      	strb	r2, [r3, #16]
	return endTime;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b004      	add	sp, #16
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <_ZN5Timer19updateExecuteMethodEPFvvE>:

void Timer::updateExecuteMethod(void (*method)())
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	executeMethod = method;
 800072e:	4b03      	ldr	r3, [pc, #12]	; (800073c <_ZN5Timer19updateExecuteMethodEPFvvE+0x18>)
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000098 	.word	0x20000098

08000740 <_ZN5Timer14incrementTimerEi>:

void Timer::incrementTimer(int increment){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	if (enabled) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7c1b      	ldrb	r3, [r3, #16]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d015      	beq.n	800077e <_ZN5Timer14incrementTimerEi+0x3e>
		currTime = currTime + increment;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	18d2      	adds	r2, r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	605a      	str	r2, [r3, #4]
		if (currTime >= endTime) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	db09      	blt.n	800077e <_ZN5Timer14incrementTimerEi+0x3e>
			printf("Timer Finished\r\n");
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_ZN5Timer14incrementTimerEi+0x48>)
 800076c:	0018      	movs	r0, r3
 800076e:	f004 f9bd 	bl	8004aec <puts>
			enabled = false;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]
			executeMethod();
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <_ZN5Timer14incrementTimerEi+0x4c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4798      	blx	r3
		}
	}
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	080065e4 	.word	0x080065e4
 800078c:	20000098 	.word	0x20000098

08000790 <_ZN5Timer9stopTimerEv>:

void Timer::stopTimer()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	enabled = false;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	741a      	strb	r2, [r3, #16]
	endTime = 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
	currTime = 0;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_ZN5Timer11getTimeLeftEv>:

int Timer::getTimeLeft()
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	return endTime - currTime;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	1ad3      	subs	r3, r2, r3
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 fdc6 	bl	8001360 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f838 	bl	8000848 <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 f95e 	bl	8000a98 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80007dc:	f000 f928 	bl	8000a30 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80007e0:	f000 f8f2 	bl	80009c8 <_ZL19MX_USART1_UART_Initv>
  MX_LPTIM1_Init();
 80007e4:	f000 f8b2 	bl	800094c <_ZL14MX_LPTIM1_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	RetargetInit(&huart1);
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <main+0x64>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fbaa 	bl	8000f44 <RetargetInit>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &response, SINGLE_CHAR_BYTES);
 80007f0:	4910      	ldr	r1, [pc, #64]	; (8000834 <main+0x68>)
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <main+0x64>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fd74 	bl	80032e4 <HAL_UART_Receive_IT>
	printf("Device Initialized. Going to sleep\r\n");
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <main+0x6c>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f004 f974 	bl	8004aec <puts>
  HAL_UART_Transmit(&huart2, (uint8_t *)sleepMsg, strlen(sleepMsg), HAL_MAX_DELAY);
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <main+0x70>)
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff fc7e 	bl	8000108 <strlen>
 800080c:	0003      	movs	r3, r0
 800080e:	b29a      	uxth	r2, r3
 8000810:	2301      	movs	r3, #1
 8000812:	425b      	negs	r3, r3
 8000814:	4909      	ldr	r1, [pc, #36]	; (800083c <main+0x70>)
 8000816:	480a      	ldr	r0, [pc, #40]	; (8000840 <main+0x74>)
 8000818:	f002 fbde 	bl	8002fd8 <HAL_UART_Transmit>
  HAL_PWR_EnableSleepOnExit();
 800081c:	f001 fc04 	bl	8002028 <HAL_PWR_EnableSleepOnExit>
  while (1)
  {
  	HAL_UART_Transmit(&huart2, (uint8_t *)"W", 1, HAL_MAX_DELAY);
 8000820:	2301      	movs	r3, #1
 8000822:	425b      	negs	r3, r3
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <main+0x78>)
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <main+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	f002 fbd5 	bl	8002fd8 <HAL_UART_Transmit>
 800082e:	e7f7      	b.n	8000820 <main+0x54>
 8000830:	200000cc 	.word	0x200000cc
 8000834:	200001f0 	.word	0x200001f0
 8000838:	080065f4 	.word	0x080065f4
 800083c:	20000000 	.word	0x20000000
 8000840:	20000154 	.word	0x20000154
 8000844:	08006618 	.word	0x08006618

08000848 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b09d      	sub	sp, #116	; 0x74
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	2438      	movs	r4, #56	; 0x38
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2338      	movs	r3, #56	; 0x38
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f004 fb05 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085e:	2324      	movs	r3, #36	; 0x24
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	0018      	movs	r0, r3
 8000864:	2314      	movs	r3, #20
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f004 fafd 	bl	8004e68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086e:	003b      	movs	r3, r7
 8000870:	0018      	movs	r0, r3
 8000872:	2324      	movs	r3, #36	; 0x24
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f004 faf6 	bl	8004e68 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <_Z18SystemClock_Configv+0xfc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a31      	ldr	r2, [pc, #196]	; (8000948 <_Z18SystemClock_Configv+0x100>)
 8000882:	401a      	ands	r2, r3
 8000884:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <_Z18SystemClock_Configv+0xfc>)
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	0109      	lsls	r1, r1, #4
 800088a:	430a      	orrs	r2, r1
 800088c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2218      	movs	r2, #24
 8000894:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2201      	movs	r2, #1
 800089a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2201      	movs	r2, #1
 80008a0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	22a0      	movs	r2, #160	; 0xa0
 80008ac:	0212      	lsls	r2, r2, #8
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 fbc3 	bl	8002044 <HAL_RCC_OscConfig>
 80008be:	0003      	movs	r3, r0
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	4193      	sbcs	r3, r2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80008ca:	f000 fb0e 	bl	8000eea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	2124      	movs	r1, #36	; 0x24
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	220f      	movs	r2, #15
 80008d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2100      	movs	r1, #0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 ff6a 	bl	80027cc <HAL_RCC_ClockConfig>
 80008f8:	0003      	movs	r3, r0
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	4193      	sbcs	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000904:	f000 faf1 	bl	8000eea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000908:	003b      	movs	r3, r7
 800090a:	2283      	movs	r2, #131	; 0x83
 800090c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800091a:	003b      	movs	r3, r7
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	02d2      	lsls	r2, r2, #11
 8000920:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	003b      	movs	r3, r7
 8000924:	0018      	movs	r0, r3
 8000926:	f002 f975 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	0003      	movs	r3, r0
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4193      	sbcs	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8000936:	f000 fad8 	bl	8000eea <Error_Handler>
  }
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b01d      	add	sp, #116	; 0x74
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40007000 	.word	0x40007000
 8000948:	ffffe7ff 	.word	0xffffe7ff

0800094c <_ZL14MX_LPTIM1_Initv>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 8000952:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <_ZL14MX_LPTIM1_Initv+0x70>)
 8000954:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV4;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <_ZL14MX_LPTIM1_Initv+0x74>)
 8000968:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f872 	bl	8001a68 <HAL_LPTIM_Init>
 8000984:	0003      	movs	r3, r0
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	4193      	sbcs	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <_ZL14MX_LPTIM1_Initv+0x48>
  {
    Error_Handler();
 8000990:	f000 faab 	bl	8000eea <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

	HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	200d      	movs	r0, #13
 800099a:	f000 fdfd 	bl	8001598 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800099e:	200d      	movs	r0, #13
 80009a0:	f000 fe0f 	bl	80015c2 <HAL_NVIC_EnableIRQ>

	/* 46249 is the value loaded into LPTIM1's ARR register */
	/* Rate = ClkSrc/[Prescaler * ARR+1] = .2Hz*/
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 46249);
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <_ZL14MX_LPTIM1_Initv+0x78>)
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <_ZL14MX_LPTIM1_Initv+0x6c>)
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 f8e8 	bl	8001b80 <HAL_LPTIM_Counter_Start_IT>
  /* USER CODE END LPTIM1_Init 2 */

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	40007c00 	.word	0x40007c00
 80009c0:	0000ffff 	.word	0x0000ffff
 80009c4:	0000b4a9 	.word	0x0000b4a9

080009c8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <_ZL19MX_USART1_UART_Initv+0x64>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009d4:	2296      	movs	r2, #150	; 0x96
 80009d6:	0192      	lsls	r2, r2, #6
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fa8f 	bl	8002f30 <HAL_UART_Init>
 8000a12:	0003      	movs	r3, r0
 8000a14:	1e5a      	subs	r2, r3, #1
 8000a16:	4193      	sbcs	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 8000a1e:	f000 fa64 	bl	8000eea <Error_Handler>
  }

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000cc 	.word	0x200000cc
 8000a2c:	40013800 	.word	0x40013800

08000a30 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a3c:	22e1      	movs	r2, #225	; 0xe1
 8000a3e:	0252      	lsls	r2, r2, #9
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 fa5b 	bl	8002f30 <HAL_UART_Init>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	1e5a      	subs	r2, r3, #1
 8000a7e:	4193      	sbcs	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000a86:	f000 fa30 	bl	8000eea <Error_Handler>
  }

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000154 	.word	0x20000154
 8000a94:	40004400 	.word	0x40004400

08000a98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b08b      	sub	sp, #44	; 0x2c
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	2414      	movs	r4, #20
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f004 f9dd 	bl	8004e68 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aba:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	2204      	movs	r2, #4
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aca:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000afc:	2102      	movs	r1, #2
 8000afe:	430a      	orrs	r2, r1
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x140>)
 8000b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b06:	2202      	movs	r2, #2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_DC_Pin|Power_Toggle_Pin, GPIO_PIN_RESET);
 8000b0e:	2389      	movs	r3, #137	; 0x89
 8000b10:	0159      	lsls	r1, r3, #5
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2200      	movs	r2, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 ff6d 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <_ZL12MX_GPIO_Initv+0x144>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 ff67 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <_ZL12MX_GPIO_Initv+0x148>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 ff61 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0192      	lsls	r2, r2, #6
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2284      	movs	r2, #132	; 0x84
 8000b42:	0392      	lsls	r2, r2, #14
 8000b44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <_ZL12MX_GPIO_Initv+0x144>)
 8000b50:	0019      	movs	r1, r3
 8000b52:	0010      	movs	r0, r2
 8000b54:	f000 fdda 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_DC_Pin Power_Toggle_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_DC_Pin|Power_Toggle_Pin;
 8000b58:	0021      	movs	r1, r4
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2289      	movs	r2, #137	; 0x89
 8000b5e:	0152      	lsls	r2, r2, #5
 8000b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	000c      	movs	r4, r1
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	193a      	adds	r2, r7, r4
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fdc4 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <_ZL12MX_GPIO_Initv+0x144>)
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	f000 fdb2 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2240      	movs	r2, #64	; 0x40
 8000bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <_ZL12MX_GPIO_Initv+0x148>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f000 fd9f 	bl	800170c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b00b      	add	sp, #44	; 0x2c
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	50000800 	.word	0x50000800
 8000be0:	50000400 	.word	0x50000400

08000be4 <_Z14receiveBT_Datai>:

/* USER CODE BEGIN 4 */
uint8_t receiveBT_Data(int size)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	//Serial BT App always ends with \n\r
	//Add two bytes to receive data size to make sure UART is always empty
	uint8_t receivedBytes = 0;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<size; i++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	e010      	b.n	8000c1c <_Z14receiveBT_Datai+0x38>
	{
		scanf("%c", (receiveBuffer+i));
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <_Z14receiveBT_Datai+0x50>)
 8000bfe:	18d2      	adds	r2, r2, r3
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <_Z14receiveBT_Datai+0x54>)
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 ff7b 	bl	8004b00 <iscanf>
		receivedBytes++;
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	3201      	adds	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<size; i++)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbea      	blt.n	8000bfa <_Z14receiveBT_Datai+0x16>
	}
	return receivedBytes;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	200001f4 	.word	0x200001f4
 8000c38:	0800661c 	.word	0x0800661c

08000c3c <HAL_LPTIM_AutoReloadMatchCallback>:


void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    /* Blink onboard LED */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	2120      	movs	r1, #32
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fef1 	bl	8001a32 <HAL_GPIO_TogglePin>
	myTimer.incrementTimer(5);
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 8000c52:	2105      	movs	r1, #5
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fd73 	bl	8000740 <_ZN5Timer14incrementTimerEi>
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	200001dc 	.word	0x200001dc

08000c68 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    printf("ERR\r\n");
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_UART_ErrorCallback+0x18>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f003 ff3a 	bl	8004aec <puts>
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	08006620 	.word	0x08006620

08000c84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	//HAL_PWR_DisableSleepOnExit();
	printOptions();
 8000c8c:	f000 f814 	bl	8000cb8 <_Z12printOptionsv>
	printf("Going Back To Sleep\r\n");
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_UART_RxCpltCallback+0x28>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f003 ff2a 	bl	8004aec <puts>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &response, SINGLE_CHAR_BYTES);
 8000c98:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <HAL_UART_RxCpltCallback+0x2c>)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_UART_RxCpltCallback+0x30>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 fb20 	bl	80032e4 <HAL_UART_Receive_IT>
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08006628 	.word	0x08006628
 8000cb0:	200001f0 	.word	0x200001f0
 8000cb4:	200000cc 	.word	0x200000cc

08000cb8 <_Z12printOptionsv>:

void printOptions()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	printf("Select an Option:\r\n");
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <_Z12printOptionsv+0xa4>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f003 ff13 	bl	8004aec <puts>
	printf("1. Schedule Coffee\r\n");
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <_Z12printOptionsv+0xa8>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f003 ff0f 	bl	8004aec <puts>
	printf("2. Turn on Coffee Pot\r\n");
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <_Z12printOptionsv+0xac>)
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f003 ff0b 	bl	8004aec <puts>
	printf("3. Turn off Coffee Pot\r\n");
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <_Z12printOptionsv+0xb0>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f003 ff07 	bl	8004aec <puts>
	printf("4. Stop a Timer\r\n");
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <_Z12printOptionsv+0xb4>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f003 ff03 	bl	8004aec <puts>
	printf("5. Get time left\r\n");
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <_Z12printOptionsv+0xb8>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 feff 	bl	8004aec <puts>
	receiveBT_Data(3);
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f7ff ff78 	bl	8000be4 <_Z14receiveBT_Datai>
	switch(receiveBuffer[0]){
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <_Z12printOptionsv+0xbc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	3b31      	subs	r3, #49	; 0x31
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d824      	bhi.n	8000d48 <_Z12printOptionsv+0x90>
 8000cfe:	009a      	lsls	r2, r3, #2
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <_Z12printOptionsv+0xc0>)
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	469f      	mov	pc, r3
		case '1':
			startNewTimer();
 8000d08:	f000 f87a 	bl	8000e00 <_Z13startNewTimerv>
			break;
 8000d0c:	e021      	b.n	8000d52 <_Z12printOptionsv+0x9a>
		case '2':
			turnOnCoffeePot();
 8000d0e:	f000 f83b 	bl	8000d88 <_Z15turnOnCoffeePotv>
			break;
 8000d12:	e01e      	b.n	8000d52 <_Z12printOptionsv+0x9a>
		case '3':
			turnOffCoffeePot();
 8000d14:	f000 f866 	bl	8000de4 <_Z16turnOffCoffeePotv>
			break;
 8000d18:	e01b      	b.n	8000d52 <_Z12printOptionsv+0x9a>
		case '4':
			myTimer.stopTimer();
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <_Z12printOptionsv+0xc4>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fd37 	bl	8000790 <_ZN5Timer9stopTimerEv>
			break;
 8000d22:	e016      	b.n	8000d52 <_Z12printOptionsv+0x9a>
		case '5':
			int hours, minutes, seconds;
			translateTime(myTimer.getTimeLeft(), &hours, &minutes, &seconds);
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_Z12printOptionsv+0xc4>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff fd43 	bl	80007b2 <_ZN5Timer11getTimeLeftEv>
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2208      	movs	r2, #8
 8000d30:	18ba      	adds	r2, r7, r2
 8000d32:	210c      	movs	r1, #12
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f000 f8a1 	bl	8000e7c <_Z13translateTimeiPiS_S_>
			printf("Hours: %d, Minutes %d, Seconds %d\r\n", hours, minutes, seconds);
 8000d3a:	68f9      	ldr	r1, [r7, #12]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <_Z12printOptionsv+0xc8>)
 8000d42:	f003 fe6d 	bl	8004a20 <iprintf>
			break;
 8000d46:	e004      	b.n	8000d52 <_Z12printOptionsv+0x9a>
		default:
			printf("Unrecognized Char\r\n");
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <_Z12printOptionsv+0xcc>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 fece 	bl	8004aec <puts>
		}
}
 8000d50:	e7ff      	b.n	8000d52 <_Z12printOptionsv+0x9a>
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	08006640 	.word	0x08006640
 8000d60:	08006654 	.word	0x08006654
 8000d64:	08006668 	.word	0x08006668
 8000d68:	08006680 	.word	0x08006680
 8000d6c:	08006698 	.word	0x08006698
 8000d70:	080066ac 	.word	0x080066ac
 8000d74:	200001f4 	.word	0x200001f4
 8000d78:	0800677c 	.word	0x0800677c
 8000d7c:	200001dc 	.word	0x200001dc
 8000d80:	080066c0 	.word	0x080066c0
 8000d84:	080066e4 	.word	0x080066e4

08000d88 <_Z15turnOnCoffeePotv>:

void turnOnCoffeePot()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	int h, m, s;
	HAL_GPIO_WritePin(LD2_GPIO_Port, Power_Toggle_Pin, GPIO_PIN_SET);
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	0159      	lsls	r1, r3, #5
 8000d92:	23a0      	movs	r3, #160	; 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	2201      	movs	r2, #1
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 fe2d 	bl	80019f8 <HAL_GPIO_WritePin>
	translateTime(myTimer.setUpTimer(2, 1), &h, &m, &s);
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <_Z15turnOnCoffeePotv+0x50>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	2102      	movs	r1, #2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fc99 	bl	80006dc <_ZN5Timer10setUpTimerEii>
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2208      	movs	r2, #8
 8000dae:	18ba      	adds	r2, r7, r2
 8000db0:	210c      	movs	r1, #12
 8000db2:	1879      	adds	r1, r7, r1
 8000db4:	f000 f862 	bl	8000e7c <_Z13translateTimeiPiS_S_>
	printf("Timer started for: Hours: %d, Minutes %d\r\n", h, m);
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_Z15turnOnCoffeePotv+0x54>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f003 fe2e 	bl	8004a20 <iprintf>
	myTimer.updateExecuteMethod(turnOffCoffeePot);
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <_Z15turnOnCoffeePotv+0x58>)
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <_Z15turnOnCoffeePotv+0x50>)
 8000dc8:	0011      	movs	r1, r2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fcaa 	bl	8000724 <_ZN5Timer19updateExecuteMethodEPFvvE>
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200001dc 	.word	0x200001dc
 8000ddc:	080066f8 	.word	0x080066f8
 8000de0:	08000de5 	.word	0x08000de5

08000de4 <_Z16turnOffCoffeePotv>:

void turnOffCoffeePot()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, Power_Toggle_Pin, GPIO_PIN_RESET);
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	0159      	lsls	r1, r3, #5
 8000dec:	23a0      	movs	r3, #160	; 0xa0
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	2200      	movs	r2, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fe00 	bl	80019f8 <HAL_GPIO_WritePin>
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <_Z13startNewTimerv>:

void startNewTimer(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
	int hours, minutes, h, m, s;
	printf("How many hours to set timer for?\r\n");
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <_Z13startNewTimerv+0x68>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f003 fe6f 	bl	8004aec <puts>
	scanf("%d", &hours);
 8000e0e:	2314      	movs	r3, #20
 8000e10:	18fa      	adds	r2, r7, r3
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <_Z13startNewTimerv+0x6c>)
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f003 fe72 	bl	8004b00 <iscanf>
	printf("How many minutes to set timer for?\r\n");
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <_Z13startNewTimerv+0x70>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f003 fe64 	bl	8004aec <puts>
	scanf("%d", &minutes);
 8000e24:	2310      	movs	r3, #16
 8000e26:	18fa      	adds	r2, r7, r3
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_Z13startNewTimerv+0x6c>)
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f003 fe67 	bl	8004b00 <iscanf>
	receiveBT_Data(2);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fed6 	bl	8000be4 <_Z14receiveBT_Datai>
	translateTime(myTimer.setUpTimer(hours, minutes), &h, &m, &s);
 8000e38:	6979      	ldr	r1, [r7, #20]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <_Z13startNewTimerv+0x74>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fc4c 	bl	80006dc <_ZN5Timer10setUpTimerEii>
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2208      	movs	r2, #8
 8000e48:	18ba      	adds	r2, r7, r2
 8000e4a:	210c      	movs	r1, #12
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f000 f815 	bl	8000e7c <_Z13translateTimeiPiS_S_>
	printf("Timer started for: Hours: %d, Minutes %d\r\n", h, m);
 8000e52:	68f9      	ldr	r1, [r7, #12]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_Z13startNewTimerv+0x78>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f003 fde1 	bl	8004a20 <iprintf>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b006      	add	sp, #24
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	08006724 	.word	0x08006724
 8000e6c:	08006748 	.word	0x08006748
 8000e70:	0800674c 	.word	0x0800674c
 8000e74:	200001dc 	.word	0x200001dc
 8000e78:	080066f8 	.word	0x080066f8

08000e7c <_Z13translateTimeiPiS_S_>:

void translateTime(int timeInSeconds, int *hours, int *minutes, int *seconds)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
	*hours = timeInSeconds/3600;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	22e1      	movs	r2, #225	; 0xe1
 8000e8e:	0111      	lsls	r1, r2, #4
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff f9d5 	bl	8000240 <__divsi3>
 8000e96:	0003      	movs	r3, r0
 8000e98:	001a      	movs	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	601a      	str	r2, [r3, #0]
	int timeRemaining = timeInSeconds -((*hours) * 3600);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	051b      	lsls	r3, r3, #20
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	189b      	adds	r3, r3, r2
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	189b      	adds	r3, r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
	*minutes = timeRemaining/60;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	213c      	movs	r1, #60	; 0x3c
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff f9be 	bl	8000240 <__divsi3>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
	*seconds = timeRemaining - *minutes * 60;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	1a9b      	subs	r3, r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	001a      	movs	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	18d2      	adds	r2, r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	601a      	str	r2, [r3, #0]
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b006      	add	sp, #24
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eee:	b672      	cpsid	i
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <Error_Handler+0x8>

08000ef4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d109      	bne.n	8000f18 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d105      	bne.n	8000f18 <_Z41__static_initialization_and_destruction_0ii+0x24>
Timer myTimer(turnOnCoffeePot);
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fbc4 	bl	80006a0 <_ZN5TimerC1EPFvvE>
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	0000ffff 	.word	0x0000ffff
 8000f24:	08000d89 	.word	0x08000d89
 8000f28:	200001dc 	.word	0x200001dc

08000f2c <_GLOBAL__sub_I_hlptim1>:
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <_GLOBAL__sub_I_hlptim1+0x14>)
 8000f32:	0019      	movs	r1, r3
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff ffdd 	bl	8000ef4 <_Z41__static_initialization_and_destruction_0ii>
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	0000ffff 	.word	0x0000ffff

08000f44 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <RetargetInit+0x28>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <RetargetInit+0x2c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6898      	ldr	r0, [r3, #8]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f003 fddf 	bl	8004b20 <setvbuf>
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000258 	.word	0x20000258
 8000f70:	20000078 	.word	0x20000078

08000f74 <_isatty>:

int _isatty(int fd) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db04      	blt.n	8000f8c <_isatty+0x18>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	dc01      	bgt.n	8000f8c <_isatty+0x18>
    return 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e005      	b.n	8000f98 <_isatty+0x24>

  errno = EBADF;
 8000f8c:	f003 ffc2 	bl	8004f14 <__errno>
 8000f90:	0003      	movs	r3, r0
 8000f92:	2209      	movs	r2, #9
 8000f94:	601a      	str	r2, [r3, #0]
  return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_write>:

int _write(int fd, char* ptr, int len) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d002      	beq.n	8000fb8 <_write+0x18>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d114      	bne.n	8000fe2 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <_write+0x58>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	2517      	movs	r5, #23
 8000fc2:	197c      	adds	r4, r7, r5
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	f002 f805 	bl	8002fd8 <HAL_UART_Transmit>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000fd2:	197b      	adds	r3, r7, r5
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <_write+0x3e>
      return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e008      	b.n	8000ff0 <_write+0x50>
    else
      return EIO;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e006      	b.n	8000ff0 <_write+0x50>
  }
  errno = EBADF;
 8000fe2:	f003 ff97 	bl	8004f14 <__errno>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	2209      	movs	r2, #9
 8000fea:	601a      	str	r2, [r3, #0]
  return -1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	20000258 	.word	0x20000258

08000ffc <_close>:

int _close(int fd) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db04      	blt.n	8001014 <_close+0x18>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	dc01      	bgt.n	8001014 <_close+0x18>
    return 0;
 8001010:	2300      	movs	r3, #0
 8001012:	e006      	b.n	8001022 <_close+0x26>

  errno = EBADF;
 8001014:	f003 ff7e 	bl	8004f14 <__errno>
 8001018:	0003      	movs	r3, r0
 800101a:	2209      	movs	r2, #9
 800101c:	601a      	str	r2, [r3, #0]
  return -1;
 800101e:	2301      	movs	r3, #1
 8001020:	425b      	negs	r3, r3
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <_read>:

int _read(int fd, char* ptr, int len) {
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d113      	bne.n	8001066 <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <_read+0x50>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	2517      	movs	r5, #23
 8001044:	197c      	adds	r4, r7, r5
 8001046:	2301      	movs	r3, #1
 8001048:	425b      	negs	r3, r3
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	2201      	movs	r2, #1
 800104e:	f002 f863 	bl	8003118 <HAL_UART_Receive>
 8001052:	0003      	movs	r3, r0
 8001054:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001056:	197b      	adds	r3, r7, r5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <_read+0x36>
      return 1;
 800105e:	2301      	movs	r3, #1
 8001060:	e008      	b.n	8001074 <_read+0x48>
    else
      return EIO;
 8001062:	2305      	movs	r3, #5
 8001064:	e006      	b.n	8001074 <_read+0x48>
  }
  errno = EBADF;
 8001066:	f003 ff55 	bl	8004f14 <__errno>
 800106a:	0003      	movs	r3, r0
 800106c:	2209      	movs	r2, #9
 800106e:	601a      	str	r2, [r3, #0]
  return -1;
 8001070:	2301      	movs	r3, #1
 8001072:	425b      	negs	r3, r3
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	20000258 	.word	0x20000258

08001080 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db08      	blt.n	80010a2 <_fstat+0x22>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b02      	cmp	r3, #2
 8001094:	dc05      	bgt.n	80010a2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0192      	lsls	r2, r2, #6
 800109c:	605a      	str	r2, [r3, #4]
    return 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	e005      	b.n	80010ae <_fstat+0x2e>
  }

  errno = EBADF;
 80010a2:	f003 ff37 	bl	8004f14 <__errno>
 80010a6:	0003      	movs	r3, r0
 80010a8:	2209      	movs	r2, #9
 80010aa:	601a      	str	r2, [r3, #0]
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_MspInit+0x24>)
 80010be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x24>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_MspInit+0x24>)
 80010ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_MspInit+0x24>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0549      	lsls	r1, r1, #21
 80010d2:	430a      	orrs	r2, r1
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_LPTIM_MspInit+0x38>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10e      	bne.n	8001110 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_LPTIM_MspInit+0x3c>)
 80010f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_LPTIM_MspInit+0x3c>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0609      	lsls	r1, r1, #24
 80010fc:	430a      	orrs	r2, r1
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	200d      	movs	r0, #13
 8001106:	f000 fa47 	bl	8001598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800110a:	200d      	movs	r0, #13
 800110c:	f000 fa59 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40007c00 	.word	0x40007c00
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08b      	sub	sp, #44	; 0x2c
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	2414      	movs	r4, #20
 800112a:	193b      	adds	r3, r7, r4
 800112c:	0018      	movs	r0, r3
 800112e:	2314      	movs	r3, #20
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f003 fe98 	bl	8004e68 <memset>
  if(huart->Instance==USART1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <HAL_UART_MspInit+0xf0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d133      	bne.n	80011aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_UART_MspInit+0xf4>)
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_UART_MspInit+0xf4>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	01c9      	lsls	r1, r1, #7
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_UART_MspInit+0xf4>)
 8001152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001154:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_UART_MspInit+0xf4>)
 8001156:	2101      	movs	r1, #1
 8001158:	430a      	orrs	r2, r1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_UART_MspInit+0xf4>)
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2201      	movs	r2, #1
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	22c0      	movs	r2, #192	; 0xc0
 800116c:	00d2      	lsls	r2, r2, #3
 800116e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	0021      	movs	r1, r4
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2202      	movs	r2, #2
 8001176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2203      	movs	r2, #3
 8001182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2204      	movs	r2, #4
 8001188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	187a      	adds	r2, r7, r1
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	0011      	movs	r1, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f000 faba 	bl	800170c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	201b      	movs	r0, #27
 800119e:	f000 f9fb 	bl	8001598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011a2:	201b      	movs	r0, #27
 80011a4:	f000 fa0d 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a8:	e02e      	b.n	8001208 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_UART_MspInit+0xf8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d129      	bne.n	8001208 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_UART_MspInit+0xf4>)
 80011b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_UART_MspInit+0xf4>)
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	0289      	lsls	r1, r1, #10
 80011be:	430a      	orrs	r2, r1
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_UART_MspInit+0xf4>)
 80011c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_UART_MspInit+0xf4>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_UART_MspInit+0xf4>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011da:	2114      	movs	r1, #20
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2202      	movs	r2, #2
 80011e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2203      	movs	r2, #3
 80011f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2204      	movs	r2, #4
 80011f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	187a      	adds	r2, r7, r1
 80011fc:	23a0      	movs	r3, #160	; 0xa0
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	0011      	movs	r1, r2
 8001202:	0018      	movs	r0, r3
 8001204:	f000 fa82 	bl	800170c <HAL_GPIO_Init>
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b00b      	add	sp, #44	; 0x2c
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	40013800 	.word	0x40013800
 8001214:	40021000 	.word	0x40021000
 8001218:	40004400 	.word	0x40004400

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f8e2 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <LPTIM1_IRQHandler+0x14>)
 8001252:	0018      	movs	r0, r3
 8001254:	f000 fd0a 	bl	8001c6c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	2000009c 	.word	0x2000009c

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <USART1_IRQHandler+0x14>)
 800126a:	0018      	movs	r0, r3
 800126c:	f002 f898 	bl	80033a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	200000cc 	.word	0x200000cc

0800127c <_lseek>:
//{
//	return 1;
//}
//
int _lseek(int file, int ptr, int dir)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	18d3      	adds	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f003 fe26 	bl	8004f14 <__errno>
 80012c8:	0003      	movs	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	425b      	negs	r3, r3
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	18d2      	adds	r2, r2, r3
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b006      	add	sp, #24
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20002000 	.word	0x20002000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	2000025c 	.word	0x2000025c
 80012fc:	200003b0 	.word	0x200003b0

08001300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800130e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/  bl  SystemInit
 8001310:	f7ff fff6 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <LoopForever+0x6>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	; (800134c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <LoopForever+0xe>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	; (8001358 <LoopForever+0x16>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 fdf1 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff fa45 	bl	80007cc <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   r0, =_estack
 8001344:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001350:	08006960 	.word	0x08006960
  ldr r2, =_sbss
 8001354:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001358:	200003b0 	.word	0x200003b0

0800135c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_COMP_IRQHandler>
	...

08001360 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_Init+0x3c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_Init+0x3c>)
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f811 	bl	80013a0 <HAL_InitTick>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d003      	beq.n	800138a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e001      	b.n	800138e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800138a:	f7ff fe95 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40022000 	.word	0x40022000

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_InitTick+0x5c>)
 80013aa:	681c      	ldr	r4, [r3, #0]
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_InitTick+0x60>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	0019      	movs	r1, r3
 80013b2:	23fa      	movs	r3, #250	; 0xfa
 80013b4:	0098      	lsls	r0, r3, #2
 80013b6:	f7fe feb9 	bl	800012c <__udivsi3>
 80013ba:	0003      	movs	r3, r0
 80013bc:	0019      	movs	r1, r3
 80013be:	0020      	movs	r0, r4
 80013c0:	f7fe feb4 	bl	800012c <__udivsi3>
 80013c4:	0003      	movs	r3, r0
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 f90b 	bl	80015e2 <HAL_SYSTICK_Config>
 80013cc:	1e03      	subs	r3, r0, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e00f      	b.n	80013f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d80b      	bhi.n	80013f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	2301      	movs	r3, #1
 80013de:	425b      	negs	r3, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 f8d8 	bl	8001598 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_InitTick+0x64>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b003      	add	sp, #12
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	20000014 	.word	0x20000014
 8001400:	2000001c 	.word	0x2000001c
 8001404:	20000018 	.word	0x20000018

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	18d2      	adds	r2, r2, r3
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	2000001c 	.word	0x2000001c
 8001428:	20000260 	.word	0x20000260

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	20000260 	.word	0x20000260

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b7f      	cmp	r3, #127	; 0x7f
 8001452:	d809      	bhi.n	8001468 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	001a      	movs	r2, r3
 800145a:	231f      	movs	r3, #31
 800145c:	401a      	ands	r2, r3
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_EnableIRQ+0x30>)
 8001460:	2101      	movs	r1, #1
 8001462:	4091      	lsls	r1, r2
 8001464:	000a      	movs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
  }
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b7f      	cmp	r3, #127	; 0x7f
 8001488:	d828      	bhi.n	80014dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <__NVIC_SetPriority+0xd4>)
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	33c0      	adds	r3, #192	; 0xc0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	589b      	ldr	r3, [r3, r2]
 800149a:	1dfa      	adds	r2, r7, #7
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	0011      	movs	r1, r2
 80014a0:	2203      	movs	r2, #3
 80014a2:	400a      	ands	r2, r1
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	21ff      	movs	r1, #255	; 0xff
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	401a      	ands	r2, r3
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	0018      	movs	r0, r3
 80014c0:	2303      	movs	r3, #3
 80014c2:	4003      	ands	r3, r0
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <__NVIC_SetPriority+0xd4>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	430a      	orrs	r2, r1
 80014d4:	33c0      	adds	r3, #192	; 0xc0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014da:	e031      	b.n	8001540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <__NVIC_SetPriority+0xd8>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0019      	movs	r1, r3
 80014e4:	230f      	movs	r3, #15
 80014e6:	400b      	ands	r3, r1
 80014e8:	3b08      	subs	r3, #8
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3306      	adds	r3, #6
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1dfa      	adds	r2, r7, #7
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	0011      	movs	r1, r2
 80014fc:	2203      	movs	r2, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	21ff      	movs	r1, #255	; 0xff
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	22ff      	movs	r2, #255	; 0xff
 8001514:	401a      	ands	r2, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0018      	movs	r0, r3
 800151c:	2303      	movs	r3, #3
 800151e:	4003      	ands	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001c      	movs	r4, r3
 800152c:	230f      	movs	r3, #15
 800152e:	4023      	ands	r3, r4
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	430a      	orrs	r2, r1
 8001536:	3306      	adds	r3, #6
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	18c3      	adds	r3, r0, r3
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b003      	add	sp, #12
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	045b      	lsls	r3, r3, #17
 8001560:	429a      	cmp	r2, r3
 8001562:	d301      	bcc.n	8001568 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001564:	2301      	movs	r3, #1
 8001566:	e010      	b.n	800158a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SysTick_Config+0x44>)
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	3a01      	subs	r2, #1
 800156e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	2103      	movs	r1, #3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff7c 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x44>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	0002      	movs	r2, r0
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff33 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff ffaf 	bl	8001550 <SysTick_Config>
 80015f2:	0003      	movs	r3, r0
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	230f      	movs	r3, #15
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2225      	movs	r2, #37	; 0x25
 8001610:	5c9b      	ldrb	r3, [r3, r2]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d008      	beq.n	800162a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2204      	movs	r2, #4
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2224      	movs	r2, #36	; 0x24
 8001622:	2100      	movs	r1, #0
 8001624:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e024      	b.n	8001674 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	210e      	movs	r1, #14
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	438a      	bics	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	221c      	movs	r2, #28
 8001650:	401a      	ands	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2101      	movs	r1, #1
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2225      	movs	r2, #37	; 0x25
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2224      	movs	r2, #36	; 0x24
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]

    return status;
 800166e:	230f      	movs	r3, #15
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001684:	210f      	movs	r1, #15
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2225      	movs	r2, #37	; 0x25
 8001690:	5c9b      	ldrb	r3, [r3, r2]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d006      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2204      	movs	r2, #4
 800169c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e02a      	b.n	80016fc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	210e      	movs	r1, #14
 80016b2:	438a      	bics	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	221c      	movs	r2, #28
 80016cc:	401a      	ands	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2101      	movs	r1, #1
 80016d4:	4091      	lsls	r1, r2
 80016d6:	000a      	movs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2225      	movs	r2, #37	; 0x25
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2224      	movs	r2, #36	; 0x24
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	0010      	movs	r0, r2
 80016fa:	4798      	blx	r3
    }
  }
  return status;
 80016fc:	230f      	movs	r3, #15
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781b      	ldrb	r3, [r3, #0]
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001722:	e14f      	b.n	80019c4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4091      	lsls	r1, r2
 800172e:	000a      	movs	r2, r1
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d100      	bne.n	800173c <HAL_GPIO_Init+0x30>
 800173a:	e140      	b.n	80019be <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
 8001744:	2b01      	cmp	r3, #1
 8001746:	d005      	beq.n	8001754 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001750:	2b02      	cmp	r3, #2
 8001752:	d130      	bne.n	80017b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	409a      	lsls	r2, r3
 8001762:	0013      	movs	r3, r2
 8001764:	43da      	mvns	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	409a      	lsls	r2, r3
 8001776:	0013      	movs	r3, r2
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178a:	2201      	movs	r2, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	2201      	movs	r2, #1
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	4013      	ands	r3, r2
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d017      	beq.n	80017f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	43da      	mvns	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d123      	bne.n	8001846 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	58d3      	ldr	r3, [r2, r3]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2207      	movs	r2, #7
 8001810:	4013      	ands	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2107      	movs	r1, #7
 800182a:	400b      	ands	r3, r1
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	6939      	ldr	r1, [r7, #16]
 8001844:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	401a      	ands	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	029b      	lsls	r3, r3, #10
 8001882:	4013      	ands	r3, r2
 8001884:	d100      	bne.n	8001888 <HAL_GPIO_Init+0x17c>
 8001886:	e09a      	b.n	80019be <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001888:	4b54      	ldr	r3, [pc, #336]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800188a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800188e:	2101      	movs	r1, #1
 8001890:	430a      	orrs	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	589b      	ldr	r3, [r3, r2]
 80018a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	23a0      	movs	r3, #160	; 0xa0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	429a      	cmp	r2, r3
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x1ea>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x1e6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a45      	ldr	r2, [pc, #276]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x1de>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x2e4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x1da>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018f6:	2300      	movs	r3, #0
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	2103      	movs	r1, #3
 80018fc:	400a      	ands	r2, r1
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001908:	4935      	ldr	r1, [pc, #212]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	035b      	lsls	r3, r3, #13
 800192e:	4013      	ands	r3, r2
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43da      	mvns	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	4013      	ands	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	025b      	lsls	r3, r3, #9
 80019ac:	4013      	ands	r3, r2
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	1e13      	subs	r3, r2, #0
 80019ce:	d000      	beq.n	80019d2 <HAL_GPIO_Init+0x2c6>
 80019d0:	e6a8      	b.n	8001724 <HAL_GPIO_Init+0x18>
  }
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b006      	add	sp, #24
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	50000400 	.word	0x50000400
 80019e8:	50000800 	.word	0x50000800
 80019ec:	50000c00 	.word	0x50000c00
 80019f0:	50001c00 	.word	0x50001c00
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	0008      	movs	r0, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	1c02      	adds	r2, r0, #0
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	1c7b      	adds	r3, r7, #1
 8001a0c:	1c0a      	adds	r2, r1, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	1c7b      	adds	r3, r7, #1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a22:	1cbb      	adds	r3, r7, #2
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	000a      	movs	r2, r1
 8001a3c:	1cbb      	adds	r3, r7, #2
 8001a3e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a46:	1cbb      	adds	r3, r7, #2
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	041a      	lsls	r2, r3, #16
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	1cb9      	adds	r1, r7, #2
 8001a56:	8809      	ldrh	r1, [r1, #0]
 8001a58:	400b      	ands	r3, r1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e078      	b.n	8001b6c <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	222e      	movs	r2, #46	; 0x2e
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d107      	bne.n	8001a96 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	222d      	movs	r2, #45	; 0x2d
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fb25 	bl	80010e0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	222e      	movs	r2, #46	; 0x2e
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d103      	bne.n	8001ac2 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	221e      	movs	r2, #30
 8001abe:	4393      	bics	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <HAL_LPTIM_Init+0x10c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <HAL_LPTIM_Init+0x110>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HAL_LPTIM_Init+0x114>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ae4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001aea:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001af0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001af6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d107      	bne.n	8001b3a <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001b32:	4313      	orrs	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_LPTIM_Init+0x10c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00a      	beq.n	8001b5a <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b4c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001b52:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	222e      	movs	r2, #46	; 0x2e
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	0000ffff 	.word	0x0000ffff
 8001b78:	ffff1f3f 	.word	0xffff1f3f
 8001b7c:	ff19f1fe 	.word	0xff19f1fe

08001b80 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	222e      	movs	r2, #46	; 0x2e
 8001b8e:	2102      	movs	r1, #2
 8001b90:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0589      	lsls	r1, r1, #22
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_LPTIM_Counter_Start_IT+0x44>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	492a      	ldr	r1, [pc, #168]	; (8001c68 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2110      	movs	r1, #16
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f91d 	bl	8001e28 <LPTIM_WaitForFlag>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d101      	bne.n	8001bf8 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e031      	b.n	8001c5c <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f94c 	bl	8001e98 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f904 	bl	8001e10 <HAL_LPTIM_GetState>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d101      	bne.n	8001c12 <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e024      	b.n	8001c5c <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	222e      	movs	r2, #46	; 0x2e
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010400 	.word	0x40010400
 8001c68:	fffff1ff 	.word	0xfffff1ff

08001c6c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10e      	bne.n	8001ca0 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 f888 	bl	8001db0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d10e      	bne.n	8001ccc <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d107      	bne.n	8001ccc <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7fe ffb8 	bl	8000c3c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d107      	bne.n	8001cf8 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f864 	bl	8001dc0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2208      	movs	r2, #8
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d10e      	bne.n	8001d24 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d107      	bne.n	8001d24 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f856 	bl	8001dd0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d10e      	bne.n	8001d50 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d107      	bne.n	8001d50 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 f848 	bl	8001de0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2220      	movs	r2, #32
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d10e      	bne.n	8001d7c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2220      	movs	r2, #32
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d107      	bne.n	8001d7c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2220      	movs	r2, #32
 8001d72:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 f83a 	bl	8001df0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b40      	cmp	r3, #64	; 0x40
 8001d88:	d10e      	bne.n	8001da8 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2240      	movs	r2, #64	; 0x40
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d107      	bne.n	8001da8 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2240      	movs	r2, #64	; 0x40
 8001d9e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f82c 	bl	8001e00 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	222e      	movs	r2, #46	; 0x2e
 8001e1c:	5c9b      	ldrb	r3, [r3, r2]
 8001e1e:	b2db      	uxtb	r3, r3
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <LPTIM_WaitForFlag+0x68>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4915      	ldr	r1, [pc, #84]	; (8001e94 <LPTIM_WaitForFlag+0x6c>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7fe f973 	bl	800012c <__udivsi3>
 8001e46:	0003      	movs	r3, r0
 8001e48:	001a      	movs	r2, r3
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	189b      	adds	r3, r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2203      	movs	r2, #3
 8001e6a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4013      	ands	r3, r2
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d002      	beq.n	8001e82 <LPTIM_WaitForFlag+0x5a>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ea      	bne.n	8001e58 <LPTIM_WaitForFlag+0x30>

  return result;
 8001e82:	230f      	movs	r3, #15
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	781b      	ldrb	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000014 	.word	0x20000014
 8001e94:	00004e20 	.word	0x00004e20

08001e98 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8001eaa:	693b      	ldr	r3, [r7, #16]
  uint32_t tmpCMP;
  uint32_t tmpARR;
  uint32_t primask_bit;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f383 8810 	msr	PRIMASK, r3
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	4b56      	ldr	r3, [pc, #344]	; (800201c <LPTIM_Disable+0x184>)
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d106      	bne.n	8001ed4 <LPTIM_Disable+0x3c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <LPTIM_Disable+0x188>)
 8001ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eca:	23c0      	movs	r3, #192	; 0xc0
 8001ecc:	031b      	lsls	r3, r3, #12
 8001ece:	4013      	ands	r3, r2
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001ed2:	e000      	b.n	8001ed6 <LPTIM_Disable+0x3e>
    default:
      break;
 8001ed4:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	001a      	movs	r2, r3
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <LPTIM_Disable+0x184>)
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10d      	bne.n	8001f1e <LPTIM_Disable+0x86>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <LPTIM_Disable+0x188>)
 8001f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <LPTIM_Disable+0x188>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0609      	lsls	r1, r1, #24
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <LPTIM_Disable+0x188>)
 8001f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <LPTIM_Disable+0x188>)
 8001f16:	0052      	lsls	r2, r2, #1
 8001f18:	0852      	lsrs	r2, r2, #1
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001f1c:	e000      	b.n	8001f20 <LPTIM_Disable+0x88>
    default:
      break;
 8001f1e:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <LPTIM_Disable+0x94>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05c      	beq.n	8001fe6 <LPTIM_Disable+0x14e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	001a      	movs	r2, r3
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <LPTIM_Disable+0x184>)
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d106      	bne.n	8001f46 <LPTIM_Disable+0xae>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <LPTIM_Disable+0x188>)
 8001f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f3c:	4b38      	ldr	r3, [pc, #224]	; (8002020 <LPTIM_Disable+0x188>)
 8001f3e:	4939      	ldr	r1, [pc, #228]	; (8002024 <LPTIM_Disable+0x18c>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8001f44:	e000      	b.n	8001f48 <LPTIM_Disable+0xb0>
      default:
        break;
 8001f46:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01b      	beq.n	8001f86 <LPTIM_Disable+0xee>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2108      	movs	r1, #8
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff ff5c 	bl	8001e28 <LPTIM_WaitForFlag>
 8001f70:	0003      	movs	r3, r0
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d103      	bne.n	8001f7e <LPTIM_Disable+0xe6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	222e      	movs	r2, #46	; 0x2e
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2208      	movs	r2, #8
 8001f84:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <LPTIM_Disable+0x12c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff ff3d 	bl	8001e28 <LPTIM_WaitForFlag>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d103      	bne.n	8001fbc <LPTIM_Disable+0x124>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	222e      	movs	r2, #46	; 0x2e
 8001fb8:	2103      	movs	r1, #3
 8001fba:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	001a      	movs	r2, r3
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <LPTIM_Disable+0x184>)
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d109      	bne.n	8001fe4 <LPTIM_Disable+0x14c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <LPTIM_Disable+0x188>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <LPTIM_Disable+0x18c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <LPTIM_Disable+0x188>)
 8001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8001fe2:	e000      	b.n	8001fe6 <LPTIM_Disable+0x14e>
      default:
        break;
 8001fe4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f383 8810 	msr	PRIMASK, r3
}
 8002010:	46c0      	nop			; (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b00c      	add	sp, #48	; 0x30
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	40007c00 	.word	0x40007c00
 8002020:	40021000 	.word	0x40021000
 8002024:	fff3ffff 	.word	0xfff3ffff

08002028 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWR_EnableSleepOnExit+0x18>)
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_PWR_EnableSleepOnExit+0x18>)
 8002032:	2102      	movs	r1, #2
 8002034:	430a      	orrs	r2, r1
 8002036:	611a      	str	r2, [r3, #16]
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b5b0      	push	{r4, r5, r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f000 fbaf 	bl	80027b6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002058:	4bcf      	ldr	r3, [pc, #828]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	220c      	movs	r2, #12
 800205e:	4013      	ands	r3, r2
 8002060:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002062:	4bcd      	ldr	r3, [pc, #820]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4013      	ands	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x36>
 8002078:	e07e      	b.n	8002178 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d007      	beq.n	8002090 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d112      	bne.n	80020ac <HAL_RCC_OscConfig+0x68>
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	429a      	cmp	r2, r3
 800208e:	d10d      	bne.n	80020ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4bc1      	ldr	r3, [pc, #772]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	029b      	lsls	r3, r3, #10
 8002098:	4013      	ands	r3, r2
 800209a:	d100      	bne.n	800209e <HAL_RCC_OscConfig+0x5a>
 800209c:	e06b      	b.n	8002176 <HAL_RCC_OscConfig+0x132>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d167      	bne.n	8002176 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f000 fb85 	bl	80027b6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x84>
 80020b8:	4bb7      	ldr	r3, [pc, #732]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4bb6      	ldr	r3, [pc, #728]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0249      	lsls	r1, r1, #9
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e027      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	23a0      	movs	r3, #160	; 0xa0
 80020ce:	02db      	lsls	r3, r3, #11
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10e      	bne.n	80020f2 <HAL_RCC_OscConfig+0xae>
 80020d4:	4bb0      	ldr	r3, [pc, #704]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4baf      	ldr	r3, [pc, #700]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	02c9      	lsls	r1, r1, #11
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	4bad      	ldr	r3, [pc, #692]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4bac      	ldr	r3, [pc, #688]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0249      	lsls	r1, r1, #9
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e012      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020f2:	4ba9      	ldr	r3, [pc, #676]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4ba8      	ldr	r3, [pc, #672]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80020f8:	49a8      	ldr	r1, [pc, #672]	; (800239c <HAL_RCC_OscConfig+0x358>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	4ba6      	ldr	r3, [pc, #664]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	4013      	ands	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4ba2      	ldr	r3, [pc, #648]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4ba1      	ldr	r3, [pc, #644]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002112:	49a3      	ldr	r1, [pc, #652]	; (80023a0 <HAL_RCC_OscConfig+0x35c>)
 8002114:	400a      	ands	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff f984 	bl	800142c <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002128:	e009      	b.n	800213e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212a:	f7ff f97f 	bl	800142c <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d902      	bls.n	800213e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	f000 fb3c 	bl	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800213e:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d0ef      	beq.n	800212a <HAL_RCC_OscConfig+0xe6>
 800214a:	e015      	b.n	8002178 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f96e 	bl	800142c <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002156:	f7ff f969 	bl	800142c <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e326      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002168:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	029b      	lsls	r3, r3, #10
 8002170:	4013      	ands	r3, r2
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x112>
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d100      	bne.n	8002184 <HAL_RCC_OscConfig+0x140>
 8002182:	e08b      	b.n	800229c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d13e      	bne.n	8002214 <HAL_RCC_OscConfig+0x1d0>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d13b      	bne.n	8002214 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800219c:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2204      	movs	r2, #4
 80021a2:	4013      	ands	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_RCC_OscConfig+0x16c>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e302      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b79      	ldr	r3, [pc, #484]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a7b      	ldr	r2, [pc, #492]	; (80023a4 <HAL_RCC_OscConfig+0x360>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	021a      	lsls	r2, r3, #8
 80021c0:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021c6:	4b74      	ldr	r3, [pc, #464]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2209      	movs	r2, #9
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b71      	ldr	r3, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d8:	f000 fc40 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80021dc:	0001      	movs	r1, r0
 80021de:	4b6e      	ldr	r3, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	220f      	movs	r2, #15
 80021e6:	4013      	ands	r3, r2
 80021e8:	4a6f      	ldr	r2, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x364>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	000a      	movs	r2, r1
 80021ee:	40da      	lsrs	r2, r3
 80021f0:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x368>)
 80021f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80021f4:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x36c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2513      	movs	r5, #19
 80021fa:	197c      	adds	r4, r7, r5
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff f8cf 	bl	80013a0 <HAL_InitTick>
 8002202:	0003      	movs	r3, r0
 8002204:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002206:	197b      	adds	r3, r7, r5
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d046      	beq.n	800229c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800220e:	197b      	adds	r3, r7, r5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	e2d0      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d027      	beq.n	800226a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800221a:	4b5f      	ldr	r3, [pc, #380]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2209      	movs	r2, #9
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff f8fe 	bl	800142c <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff f8f9 	bl	800142c <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e2b6      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2204      	movs	r2, #4
 800224e:	4013      	ands	r3, r2
 8002250:	d0f1      	beq.n	8002236 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <HAL_RCC_OscConfig+0x360>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	e018      	b.n	800229c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002270:	2101      	movs	r1, #1
 8002272:	438a      	bics	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff f8d9 	bl	800142c <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff f8d4 	bl	800142c <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e291      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2204      	movs	r2, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d1f1      	bne.n	8002280 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_RCC_OscConfig+0x264>
 80022a6:	e0a1      	b.n	80023ec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d140      	bne.n	8002330 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ae:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x282>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e277      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c6:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0x370>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	0a19      	lsrs	r1, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	061a      	lsls	r2, r3, #24
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	0b5b      	lsrs	r3, r3, #13
 80022f4:	3301      	adds	r3, #1
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	0212      	lsls	r2, r2, #8
 80022fa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	210f      	movs	r1, #15
 8002304:	400b      	ands	r3, r1
 8002306:	4928      	ldr	r1, [pc, #160]	; (80023a8 <HAL_RCC_OscConfig+0x364>)
 8002308:	5ccb      	ldrb	r3, [r1, r3]
 800230a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x368>)
 800230e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x36c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2513      	movs	r5, #19
 8002316:	197c      	adds	r4, r7, r5
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff f841 	bl	80013a0 <HAL_InitTick>
 800231e:	0003      	movs	r3, r0
 8002320:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002322:	197b      	adds	r3, r7, r5
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d060      	beq.n	80023ec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800232a:	197b      	adds	r3, r7, r5
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	e242      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03f      	beq.n	80023b8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	0049      	lsls	r1, r1, #1
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff f871 	bl	800142c <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7ff f86c 	bl	800142c <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e229      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_RCC_OscConfig+0x370>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	0a19      	lsrs	r1, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	061a      	lsls	r2, r3, #24
 8002390:	4b01      	ldr	r3, [pc, #4]	; (8002398 <HAL_RCC_OscConfig+0x354>)
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e029      	b.n	80023ec <HAL_RCC_OscConfig+0x3a8>
 8002398:	40021000 	.word	0x40021000
 800239c:	fffeffff 	.word	0xfffeffff
 80023a0:	fffbffff 	.word	0xfffbffff
 80023a4:	ffffe0ff 	.word	0xffffe0ff
 80023a8:	08006790 	.word	0x08006790
 80023ac:	20000014 	.word	0x20000014
 80023b0:	20000018 	.word	0x20000018
 80023b4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023b8:	4bbd      	ldr	r3, [pc, #756]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4bbc      	ldr	r3, [pc, #752]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80023be:	49bd      	ldr	r1, [pc, #756]	; (80026b4 <HAL_RCC_OscConfig+0x670>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff f832 	bl	800142c <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ce:	f7ff f82d 	bl	800142c <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1ea      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023e0:	4bb3      	ldr	r3, [pc, #716]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2208      	movs	r2, #8
 80023f2:	4013      	ands	r3, r2
 80023f4:	d036      	beq.n	8002464 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d019      	beq.n	8002432 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	4bac      	ldr	r3, [pc, #688]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002402:	4bab      	ldr	r3, [pc, #684]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff f80f 	bl	800142c <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff f80a 	bl	800142c <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1c7      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002426:	4ba2      	ldr	r3, [pc, #648]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d0f1      	beq.n	8002414 <HAL_RCC_OscConfig+0x3d0>
 8002430:	e018      	b.n	8002464 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002432:	4b9f      	ldr	r3, [pc, #636]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002436:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002438:	2101      	movs	r1, #1
 800243a:	438a      	bics	r2, r1
 800243c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe fff5 	bl	800142c <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fff0 	bl	800142c <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1ad      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800245a:	4b95      	ldr	r3, [pc, #596]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 800245c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d1f1      	bne.n	8002448 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2204      	movs	r2, #4
 800246a:	4013      	ands	r3, r2
 800246c:	d100      	bne.n	8002470 <HAL_RCC_OscConfig+0x42c>
 800246e:	e0ae      	b.n	80025ce <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002470:	2027      	movs	r0, #39	; 0x27
 8002472:	183b      	adds	r3, r7, r0
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002478:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 800247a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	4013      	ands	r3, r2
 8002482:	d109      	bne.n	8002498 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b8a      	ldr	r3, [pc, #552]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002488:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	0549      	lsls	r1, r1, #21
 800248e:	430a      	orrs	r2, r1
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002492:	183b      	adds	r3, r7, r0
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <HAL_RCC_OscConfig+0x674>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	d11a      	bne.n	80024da <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a4:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <HAL_RCC_OscConfig+0x674>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b83      	ldr	r3, [pc, #524]	; (80026b8 <HAL_RCC_OscConfig+0x674>)
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0049      	lsls	r1, r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7fe ffbb 	bl	800142c <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7fe ffb6 	bl	800142c <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e173      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b7a      	ldr	r3, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x674>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
 80024e6:	4b72      	ldr	r3, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80024e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ea:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0049      	lsls	r1, r1, #1
 80024f0:	430a      	orrs	r2, r1
 80024f2:	651a      	str	r2, [r3, #80]	; 0x50
 80024f4:	e031      	b.n	800255a <HAL_RCC_OscConfig+0x516>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d4>
 80024fe:	4b6c      	ldr	r3, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002502:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002504:	496b      	ldr	r1, [pc, #428]	; (80026b4 <HAL_RCC_OscConfig+0x670>)
 8002506:	400a      	ands	r2, r1
 8002508:	651a      	str	r2, [r3, #80]	; 0x50
 800250a:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 800250c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800250e:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002510:	496a      	ldr	r1, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x678>)
 8002512:	400a      	ands	r2, r1
 8002514:	651a      	str	r2, [r3, #80]	; 0x50
 8002516:	e020      	b.n	800255a <HAL_RCC_OscConfig+0x516>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	23a0      	movs	r3, #160	; 0xa0
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	429a      	cmp	r2, r3
 8002522:	d10e      	bne.n	8002542 <HAL_RCC_OscConfig+0x4fe>
 8002524:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	00c9      	lsls	r1, r1, #3
 800252e:	430a      	orrs	r2, r1
 8002530:	651a      	str	r2, [r3, #80]	; 0x50
 8002532:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0049      	lsls	r1, r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	651a      	str	r2, [r3, #80]	; 0x50
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x516>
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002546:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002548:	495a      	ldr	r1, [pc, #360]	; (80026b4 <HAL_RCC_OscConfig+0x670>)
 800254a:	400a      	ands	r2, r1
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002552:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002554:	4959      	ldr	r1, [pc, #356]	; (80026bc <HAL_RCC_OscConfig+0x678>)
 8002556:	400a      	ands	r2, r1
 8002558:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe ff63 	bl	800142c <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800256a:	e009      	b.n	8002580 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe ff5e 	bl	800142c <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x67c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e11a      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4013      	ands	r3, r2
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x528>
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe ff4d 	bl	800142c <HAL_GetTick>
 8002592:	0003      	movs	r3, r0
 8002594:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002596:	e009      	b.n	80025ac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe ff48 	bl	800142c <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e104      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1ef      	bne.n	8002598 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b8:	2327      	movs	r3, #39	; 0x27
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c6:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025c8:	493e      	ldr	r1, [pc, #248]	; (80026c4 <HAL_RCC_OscConfig+0x680>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2220      	movs	r2, #32
 80025d4:	4013      	ands	r3, r2
 80025d6:	d049      	beq.n	800266c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d026      	beq.n	800262e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80025e0:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025e6:	2101      	movs	r1, #1
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 80025f2:	2101      	movs	r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_RCC_OscConfig+0x684>)
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <HAL_RCC_OscConfig+0x684>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0189      	lsls	r1, r1, #6
 8002602:	430a      	orrs	r2, r1
 8002604:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe ff11 	bl	800142c <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002610:	f7fe ff0c 	bl	800142c <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0c9      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d0f1      	beq.n	8002610 <HAL_RCC_OscConfig+0x5cc>
 800262c:	e01e      	b.n	800266c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002634:	2101      	movs	r1, #1
 8002636:	438a      	bics	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x684>)
 800263c:	6a1a      	ldr	r2, [r3, #32]
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_OscConfig+0x684>)
 8002640:	4922      	ldr	r1, [pc, #136]	; (80026cc <HAL_RCC_OscConfig+0x688>)
 8002642:	400a      	ands	r2, r1
 8002644:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fef1 	bl	800142c <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002650:	f7fe feec 	bl	800142c <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0a9      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	d1f1      	bne.n	8002650 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d100      	bne.n	8002676 <HAL_RCC_OscConfig+0x632>
 8002674:	e09e      	b.n	80027b4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d100      	bne.n	800267e <HAL_RCC_OscConfig+0x63a>
 800267c:	e077      	b.n	800276e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	2b02      	cmp	r3, #2
 8002684:	d158      	bne.n	8002738 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_OscConfig+0x66c>)
 800268c:	4910      	ldr	r1, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x68c>)
 800268e:	400a      	ands	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fecb 	bl	800142c <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800269a:	e01b      	b.n	80026d4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fec6 	bl	800142c <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d914      	bls.n	80026d4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e083      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40021000 	.word	0x40021000
 80026b4:	fffffeff 	.word	0xfffffeff
 80026b8:	40007000 	.word	0x40007000
 80026bc:	fffffbff 	.word	0xfffffbff
 80026c0:	00001388 	.word	0x00001388
 80026c4:	efffffff 	.word	0xefffffff
 80026c8:	40010000 	.word	0x40010000
 80026cc:	ffffdfff 	.word	0xffffdfff
 80026d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	049b      	lsls	r3, r3, #18
 80026dc:	4013      	ands	r3, r2
 80026de:	d1dd      	bne.n	800269c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e0:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a37      	ldr	r2, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x780>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	431a      	orrs	r2, r3
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	0449      	lsls	r1, r1, #17
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fe8d 	bl	800142c <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fe88 	bl	800142c <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e045      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800272a:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	049b      	lsls	r3, r3, #18
 8002732:	4013      	ands	r3, r2
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x6d4>
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_RCC_OscConfig+0x784>)
 8002740:	400a      	ands	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fe72 	bl	800142c <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274e:	f7fe fe6d 	bl	800142c <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e02a      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	049b      	lsls	r3, r3, #18
 8002768:	4013      	ands	r3, r2
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x70a>
 800276c:	e022      	b.n	80027b4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e01d      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_OscConfig+0x77c>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	025b      	lsls	r3, r3, #9
 8002786:	401a      	ands	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	429a      	cmp	r2, r3
 800278e:	d10f      	bne.n	80027b0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	23f0      	movs	r3, #240	; 0xf0
 8002794:	039b      	lsls	r3, r3, #14
 8002796:	401a      	ands	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	401a      	ands	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b00a      	add	sp, #40	; 0x28
 80027bc:	bdb0      	pop	{r4, r5, r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40021000 	.word	0x40021000
 80027c4:	ff02ffff 	.word	0xff02ffff
 80027c8:	feffffff 	.word	0xfeffffff

080027cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e128      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d91e      	bls.n	800282c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b93      	ldr	r3, [pc, #588]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4393      	bics	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002800:	f7fe fe14 	bl	800142c <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002808:	e009      	b.n	800281e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280a:	f7fe fe0f 	bl	800142c <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4a8a      	ldr	r2, [pc, #552]	; (8002a40 <HAL_RCC_ClockConfig+0x274>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e109      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b87      	ldr	r3, [pc, #540]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2201      	movs	r2, #1
 8002824:	4013      	ands	r3, r2
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d1ee      	bne.n	800280a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002836:	4b83      	ldr	r3, [pc, #524]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	22f0      	movs	r2, #240	; 0xf0
 800283c:	4393      	bics	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	4b7f      	ldr	r3, [pc, #508]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002846:	430a      	orrs	r2, r1
 8002848:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2201      	movs	r2, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d100      	bne.n	8002856 <HAL_RCC_ClockConfig+0x8a>
 8002854:	e089      	b.n	800296a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800285e:	4b79      	ldr	r3, [pc, #484]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	029b      	lsls	r3, r3, #10
 8002866:	4013      	ands	r3, r2
 8002868:	d120      	bne.n	80028ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0e1      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002876:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	049b      	lsls	r3, r3, #18
 800287e:	4013      	ands	r3, r2
 8002880:	d114      	bne.n	80028ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0d5      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d106      	bne.n	800289c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2204      	movs	r2, #4
 8002894:	4013      	ands	r3, r2
 8002896:	d109      	bne.n	80028ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0ca      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800289c:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0c2      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ac:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2203      	movs	r2, #3
 80028b2:	4393      	bics	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fdb4 	bl	800142c <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d111      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d0:	e009      	b.n	80028e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	f7fe fdab 	bl	800142c <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4a58      	ldr	r2, [pc, #352]	; (8002a40 <HAL_RCC_ClockConfig+0x274>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0a5      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	220c      	movs	r2, #12
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d1ef      	bne.n	80028d2 <HAL_RCC_ClockConfig+0x106>
 80028f2:	e03a      	b.n	800296a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d111      	bne.n	8002920 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028fc:	e009      	b.n	8002912 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fe:	f7fe fd95 	bl	800142c <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <HAL_RCC_ClockConfig+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e08f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	220c      	movs	r2, #12
 8002918:	4013      	ands	r3, r2
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d1ef      	bne.n	80028fe <HAL_RCC_ClockConfig+0x132>
 800291e:	e024      	b.n	800296a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d11b      	bne.n	8002960 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002928:	e009      	b.n	800293e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292a:	f7fe fd7f 	bl	800142c <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a42      	ldr	r2, [pc, #264]	; (8002a40 <HAL_RCC_ClockConfig+0x274>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e079      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	220c      	movs	r2, #12
 8002944:	4013      	ands	r3, r2
 8002946:	2b04      	cmp	r3, #4
 8002948:	d1ef      	bne.n	800292a <HAL_RCC_ClockConfig+0x15e>
 800294a:	e00e      	b.n	800296a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fd6e 	bl	800142c <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_RCC_ClockConfig+0x274>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e068      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002960:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	220c      	movs	r2, #12
 8002966:	4013      	ands	r3, r2
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	4013      	ands	r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d21e      	bcs.n	80029b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	4393      	bics	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800298a:	f7fe fd4f 	bl	800142c <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	e009      	b.n	80029a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7fe fd4a 	bl	800142c <HAL_GetTick>
 8002998:	0002      	movs	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <HAL_RCC_ClockConfig+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e044      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCC_ClockConfig+0x270>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	4013      	ands	r3, r2
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d1ee      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2204      	movs	r2, #4
 80029bc:	4013      	ands	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_RCC_ClockConfig+0x27c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2208      	movs	r2, #8
 80029da:	4013      	ands	r3, r2
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_RCC_ClockConfig+0x280>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	00da      	lsls	r2, r3, #3
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f4:	f000 f832 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80029f8:	0001      	movs	r1, r0
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	220f      	movs	r2, #15
 8002a02:	4013      	ands	r3, r2
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x284>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	000a      	movs	r2, r1
 8002a0a:	40da      	lsrs	r2, r3
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_ClockConfig+0x288>)
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_ClockConfig+0x28c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	250b      	movs	r5, #11
 8002a16:	197c      	adds	r4, r7, r5
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7fe fcc1 	bl	80013a0 <HAL_InitTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a22:	197b      	adds	r3, r7, r5
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002a2a:	197b      	adds	r3, r7, r5
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	00001388 	.word	0x00001388
 8002a44:	40021000 	.word	0x40021000
 8002a48:	fffff8ff 	.word	0xfffff8ff
 8002a4c:	ffffc7ff 	.word	0xffffc7ff
 8002a50:	08006790 	.word	0x08006790
 8002a54:	20000014 	.word	0x20000014
 8002a58:	20000018 	.word	0x20000018

08002a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a62:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d014      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x40>
 8002a72:	d900      	bls.n	8002a76 <HAL_RCC_GetSysClockFreq+0x1a>
 8002a74:	e07b      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x112>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d002      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x24>
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7e:	e076      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2210      	movs	r2, #16
 8002a86:	4013      	ands	r3, r2
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002a8e:	e07c      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002a90:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x140>)
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a94:	e079      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a9a:	e076      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	0c9a      	lsrs	r2, r3, #18
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x148>)
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	0d9a      	lsrs	r2, r3, #22
 8002aae:	2303      	movs	r3, #3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab6:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	025b      	lsls	r3, r3, #9
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d01a      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	4a35      	ldr	r2, [pc, #212]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002acc:	2300      	movs	r3, #0
 8002ace:	69b8      	ldr	r0, [r7, #24]
 8002ad0:	69f9      	ldr	r1, [r7, #28]
 8002ad2:	f7fd fcc1 	bl	8000458 <__aeabi_lmul>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	000b      	movs	r3, r1
 8002ada:	0010      	movs	r0, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f7fd fc95 	bl	8000418 <__aeabi_uldivmod>
 8002aee:	0002      	movs	r2, r0
 8002af0:	000b      	movs	r3, r1
 8002af2:	0013      	movs	r3, r2
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
 8002af6:	e037      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2210      	movs	r2, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d01a      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	f7fd fca1 	bl	8000458 <__aeabi_lmul>
 8002b16:	0002      	movs	r2, r0
 8002b18:	000b      	movs	r3, r1
 8002b1a:	0010      	movs	r0, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f7fd fc75 	bl	8000418 <__aeabi_uldivmod>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	000b      	movs	r3, r1
 8002b32:	0013      	movs	r3, r2
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	e017      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	0019      	movs	r1, r3
 8002b40:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x140>)
 8002b42:	2300      	movs	r3, #0
 8002b44:	f7fd fc88 	bl	8000458 <__aeabi_lmul>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	000b      	movs	r3, r1
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	001c      	movs	r4, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	001d      	movs	r5, r3
 8002b58:	0022      	movs	r2, r4
 8002b5a:	002b      	movs	r3, r5
 8002b5c:	f7fd fc5c 	bl	8000418 <__aeabi_uldivmod>
 8002b60:	0002      	movs	r2, r0
 8002b62:	000b      	movs	r3, r1
 8002b64:	0013      	movs	r3, r2
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b6c:	e00d      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	2207      	movs	r2, #7
 8002b76:	4013      	ands	r3, r2
 8002b78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	0212      	lsls	r2, r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b00e      	add	sp, #56	; 0x38
 8002b92:	bdb0      	pop	{r4, r5, r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	003d0900 	.word	0x003d0900
 8002b9c:	00f42400 	.word	0x00f42400
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	080067a8 	.word	0x080067a8

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	20000014 	.word	0x20000014

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc0:	f7ff fff2 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc4:	0001      	movs	r1, r0
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	2207      	movs	r2, #7
 8002bce:	4013      	ands	r3, r2
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	40d9      	lsrs	r1, r3
 8002bd6:	000b      	movs	r3, r1
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	080067a0 	.word	0x080067a0

08002be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bec:	f7ff ffdc 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bf0:	0001      	movs	r1, r0
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	0adb      	lsrs	r3, r3, #11
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	40d9      	lsrs	r1, r3
 8002c02:	000b      	movs	r3, r1
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	080067a0 	.word	0x080067a0

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	4013      	ands	r3, r2
 8002c38:	d100      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002c3a:	e104      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4bb1      	ldr	r3, [pc, #708]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	055b      	lsls	r3, r3, #21
 8002c44:	4013      	ands	r3, r2
 8002c46:	d10a      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4bae      	ldr	r3, [pc, #696]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4c:	4bad      	ldr	r3, [pc, #692]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0549      	lsls	r1, r1, #21
 8002c52:	430a      	orrs	r2, r1
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c56:	2317      	movs	r3, #23
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4baa      	ldr	r3, [pc, #680]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	d11a      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4ba7      	ldr	r3, [pc, #668]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4ba6      	ldr	r3, [pc, #664]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	0049      	lsls	r1, r1, #1
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fbd8 	bl	800142c <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe fbd3 	bl	800142c <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e133      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b9c      	ldr	r3, [pc, #624]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002ca0:	4b98      	ldr	r3, [pc, #608]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	23c0      	movs	r3, #192	; 0xc0
 8002ca6:	039b      	lsls	r3, r3, #14
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	23c0      	movs	r3, #192	; 0xc0
 8002cb2:	039b      	lsls	r3, r3, #14
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	23c0      	movs	r3, #192	; 0xc0
 8002cc2:	039b      	lsls	r3, r3, #14
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	23c0      	movs	r3, #192	; 0xc0
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	029b      	lsls	r3, r3, #10
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cde:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e103      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002cf4:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf8:	23c0      	movs	r3, #192	; 0xc0
 8002cfa:	029b      	lsls	r3, r3, #10
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d049      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	23c0      	movs	r3, #192	; 0xc0
 8002d0c:	029b      	lsls	r3, r3, #10
 8002d0e:	4013      	ands	r3, r2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d004      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	4013      	ands	r3, r2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d034      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d02e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002d3c:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d40:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0309      	lsls	r1, r1, #12
 8002d50:	430a      	orrs	r2, r1
 8002d52:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d54:	4b6b      	ldr	r3, [pc, #428]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d58:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d5a:	496d      	ldr	r1, [pc, #436]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d014      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fb5c 	bl	800142c <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d78:	e009      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe fb57 	bl	800142c <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a63      	ldr	r2, [pc, #396]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0b6      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d0ef      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4013      	ands	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	401a      	ands	r2, r3
 8002db0:	23c0      	movs	r3, #192	; 0xc0
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002db8:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	23c0      	movs	r3, #192	; 0xc0
 8002dc8:	039b      	lsls	r3, r3, #14
 8002dca:	401a      	ands	r2, r3
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	23c0      	movs	r3, #192	; 0xc0
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	401a      	ands	r2, r3
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002de2:	430a      	orrs	r2, r1
 8002de4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	4013      	ands	r3, r2
 8002dee:	d01f      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	23c0      	movs	r3, #192	; 0xc0
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	401a      	ands	r2, r3
 8002dfa:	23c0      	movs	r3, #192	; 0xc0
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a44      	ldr	r2, [pc, #272]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	23c0      	movs	r3, #192	; 0xc0
 8002e12:	039b      	lsls	r3, r3, #14
 8002e14:	401a      	ands	r2, r3
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e1e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	23c0      	movs	r3, #192	; 0xc0
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	401a      	ands	r2, r3
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e30:	2317      	movs	r3, #23
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3a:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e40:	4936      	ldr	r1, [pc, #216]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e50:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	2203      	movs	r2, #3
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e6e:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	220c      	movs	r2, #12
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e90:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b006      	add	sp, #24
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	fffcffff 	.word	0xfffcffff
 8002f10:	fff7ffff 	.word	0xfff7ffff
 8002f14:	00001388 	.word	0x00001388
 8002f18:	ffcfffff 	.word	0xffcfffff
 8002f1c:	efffffff 	.word	0xefffffff
 8002f20:	fffff3ff 	.word	0xfffff3ff
 8002f24:	ffffcfff 	.word	0xffffcfff
 8002f28:	fbffffff 	.word	0xfbffffff
 8002f2c:	fff3ffff 	.word	0xfff3ffff

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e044      	b.n	8002fcc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2278      	movs	r2, #120	; 0x78
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fe f8e3 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2224      	movs	r2, #36	; 0x24
 8002f5e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 fd0a 	bl	800398c <UART_SetConfig>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e024      	b.n	8002fcc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 ff81 	bl	8003e94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	490d      	ldr	r1, [pc, #52]	; (8002fd4 <HAL_UART_Init+0xa4>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	212a      	movs	r1, #42	; 0x2a
 8002fae:	438a      	bics	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f001 f819 	bl	8003ffc <UART_CheckIdleState>
 8002fca:	0003      	movs	r3, r0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	ffffb7ff 	.word	0xffffb7ff

08002fd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	1dbb      	adds	r3, r7, #6
 8002fe6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d000      	beq.n	8002ff2 <HAL_UART_Transmit+0x1a>
 8002ff0:	e08c      	b.n	800310c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_UART_Transmit+0x28>
 8002ff8:	1dbb      	adds	r3, r7, #6
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e084      	b.n	800310e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	429a      	cmp	r2, r3
 800300e:	d109      	bne.n	8003024 <HAL_UART_Transmit+0x4c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2201      	movs	r2, #1
 800301c:	4013      	ands	r3, r2
 800301e:	d001      	beq.n	8003024 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e074      	b.n	800310e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2284      	movs	r2, #132	; 0x84
 8003028:	2100      	movs	r1, #0
 800302a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2221      	movs	r2, #33	; 0x21
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003032:	f7fe f9fb 	bl	800142c <HAL_GetTick>
 8003036:	0003      	movs	r3, r0
 8003038:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1dba      	adds	r2, r7, #6
 800303e:	2150      	movs	r1, #80	; 0x50
 8003040:	8812      	ldrh	r2, [r2, #0]
 8003042:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1dba      	adds	r2, r7, #6
 8003048:	2152      	movs	r1, #82	; 0x52
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	429a      	cmp	r2, r3
 8003058:	d108      	bne.n	800306c <HAL_UART_Transmit+0x94>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003074:	e02f      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	0013      	movs	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	f001 f862 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d004      	beq.n	8003096 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e03b      	b.n	800310e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	001a      	movs	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	05d2      	lsls	r2, r2, #23
 80030a8:	0dd2      	lsrs	r2, r2, #23
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	3302      	adds	r3, #2
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e007      	b.n	80030c4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2252      	movs	r2, #82	; 0x52
 80030c8:	5a9b      	ldrh	r3, [r3, r2]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b299      	uxth	r1, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2252      	movs	r2, #82	; 0x52
 80030d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2252      	movs	r2, #82	; 0x52
 80030da:	5a9b      	ldrh	r3, [r3, r2]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1c9      	bne.n	8003076 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	0013      	movs	r3, r2
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	f001 f82c 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d004      	beq.n	8003102 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e005      	b.n	800310e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b008      	add	sp, #32
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	1dbb      	adds	r3, r7, #6
 8003126:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	589b      	ldr	r3, [r3, r2]
 800312e:	2b20      	cmp	r3, #32
 8003130:	d000      	beq.n	8003134 <HAL_UART_Receive+0x1c>
 8003132:	e0d0      	b.n	80032d6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_Receive+0x2a>
 800313a:	1dbb      	adds	r3, r7, #6
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0c8      	b.n	80032d8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	015b      	lsls	r3, r3, #5
 800314e:	429a      	cmp	r2, r3
 8003150:	d109      	bne.n	8003166 <HAL_UART_Receive+0x4e>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	d001      	beq.n	8003166 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0b8      	b.n	80032d8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2284      	movs	r2, #132	; 0x84
 800316a:	2100      	movs	r1, #0
 800316c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	2122      	movs	r1, #34	; 0x22
 8003174:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317c:	f7fe f956 	bl	800142c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1dba      	adds	r2, r7, #6
 8003188:	2158      	movs	r1, #88	; 0x58
 800318a:	8812      	ldrh	r2, [r2, #0]
 800318c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1dba      	adds	r2, r7, #6
 8003192:	215a      	movs	r1, #90	; 0x5a
 8003194:	8812      	ldrh	r2, [r2, #0]
 8003196:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	015b      	lsls	r3, r3, #5
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d10d      	bne.n	80031c0 <HAL_UART_Receive+0xa8>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_UART_Receive+0x9e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	225c      	movs	r2, #92	; 0x5c
 80031b0:	494b      	ldr	r1, [pc, #300]	; (80032e0 <HAL_UART_Receive+0x1c8>)
 80031b2:	5299      	strh	r1, [r3, r2]
 80031b4:	e02e      	b.n	8003214 <HAL_UART_Receive+0xfc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	225c      	movs	r2, #92	; 0x5c
 80031ba:	21ff      	movs	r1, #255	; 0xff
 80031bc:	5299      	strh	r1, [r3, r2]
 80031be:	e029      	b.n	8003214 <HAL_UART_Receive+0xfc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_UART_Receive+0xcc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <HAL_UART_Receive+0xc2>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	225c      	movs	r2, #92	; 0x5c
 80031d4:	21ff      	movs	r1, #255	; 0xff
 80031d6:	5299      	strh	r1, [r3, r2]
 80031d8:	e01c      	b.n	8003214 <HAL_UART_Receive+0xfc>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	225c      	movs	r2, #92	; 0x5c
 80031de:	217f      	movs	r1, #127	; 0x7f
 80031e0:	5299      	strh	r1, [r3, r2]
 80031e2:	e017      	b.n	8003214 <HAL_UART_Receive+0xfc>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	055b      	lsls	r3, r3, #21
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d10d      	bne.n	800320c <HAL_UART_Receive+0xf4>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_UART_Receive+0xea>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	225c      	movs	r2, #92	; 0x5c
 80031fc:	217f      	movs	r1, #127	; 0x7f
 80031fe:	5299      	strh	r1, [r3, r2]
 8003200:	e008      	b.n	8003214 <HAL_UART_Receive+0xfc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	225c      	movs	r2, #92	; 0x5c
 8003206:	213f      	movs	r1, #63	; 0x3f
 8003208:	5299      	strh	r1, [r3, r2]
 800320a:	e003      	b.n	8003214 <HAL_UART_Receive+0xfc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	225c      	movs	r2, #92	; 0x5c
 8003210:	2100      	movs	r1, #0
 8003212:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003214:	2312      	movs	r3, #18
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	215c      	movs	r1, #92	; 0x5c
 800321c:	5a52      	ldrh	r2, [r2, r1]
 800321e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	015b      	lsls	r3, r3, #5
 8003228:	429a      	cmp	r2, r3
 800322a:	d108      	bne.n	800323e <HAL_UART_Receive+0x126>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	e003      	b.n	8003246 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003246:	e03a      	b.n	80032be <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	0013      	movs	r3, r2
 8003252:	2200      	movs	r2, #0
 8003254:	2120      	movs	r1, #32
 8003256:	f000 ff79 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	2120      	movs	r1, #32
 8003264:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e036      	b.n	80032d8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10e      	bne.n	800328e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b29b      	uxth	r3, r3
 8003278:	2212      	movs	r2, #18
 800327a:	18ba      	adds	r2, r7, r2
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	4013      	ands	r3, r2
 8003280:	b29a      	uxth	r2, r3
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3302      	adds	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	e00e      	b.n	80032ac <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2212      	movs	r2, #18
 8003298:	18ba      	adds	r2, r7, r2
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4013      	ands	r3, r2
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	225a      	movs	r2, #90	; 0x5a
 80032b0:	5a9b      	ldrh	r3, [r3, r2]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b299      	uxth	r1, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	225a      	movs	r2, #90	; 0x5a
 80032bc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	225a      	movs	r2, #90	; 0x5a
 80032c2:	5a9b      	ldrh	r3, [r3, r2]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1be      	bne.n	8003248 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	2120      	movs	r1, #32
 80032d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b008      	add	sp, #32
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	000001ff 	.word	0x000001ff

080032e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	1dbb      	adds	r3, r7, #6
 80032f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d14a      	bne.n	8003392 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_UART_Receive_IT+0x26>
 8003302:	1dbb      	adds	r3, r7, #6
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e042      	b.n	8003394 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	015b      	lsls	r3, r3, #5
 8003316:	429a      	cmp	r2, r3
 8003318:	d109      	bne.n	800332e <HAL_UART_Receive_IT+0x4a>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d001      	beq.n	800332e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e032      	b.n	8003394 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_UART_Receive_IT+0xb8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d020      	beq.n	8003380 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	4013      	ands	r3, r2
 800334a:	d019      	beq.n	8003380 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334c:	f3ef 8310 	mrs	r3, PRIMASK
 8003350:	613b      	str	r3, [r7, #16]
  return(result);
 8003352:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	2301      	movs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f383 8810 	msr	PRIMASK, r3
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	04c9      	lsls	r1, r1, #19
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003380:	1dbb      	adds	r3, r7, #6
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 ff49 	bl	8004220 <UART_Start_Receive_IT>
 800338e:	0003      	movs	r3, r0
 8003390:	e000      	b.n	8003394 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b008      	add	sp, #32
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40004800 	.word	0x40004800

080033a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b0ab      	sub	sp, #172	; 0xac
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	22a4      	movs	r2, #164	; 0xa4
 80033b0:	18b9      	adds	r1, r7, r2
 80033b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	20a0      	movs	r0, #160	; 0xa0
 80033bc:	1839      	adds	r1, r7, r0
 80033be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	219c      	movs	r1, #156	; 0x9c
 80033c8:	1879      	adds	r1, r7, r1
 80033ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033cc:	0011      	movs	r1, r2
 80033ce:	18bb      	adds	r3, r7, r2
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a99      	ldr	r2, [pc, #612]	; (8003638 <HAL_UART_IRQHandler+0x298>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	2298      	movs	r2, #152	; 0x98
 80033d8:	18bc      	adds	r4, r7, r2
 80033da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80033dc:	18bb      	adds	r3, r7, r2
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d114      	bne.n	800340e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2220      	movs	r2, #32
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00f      	beq.n	800340e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2220      	movs	r2, #32
 80033f4:	4013      	ands	r3, r2
 80033f6:	d00a      	beq.n	800340e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <HAL_UART_IRQHandler+0x62>
 8003400:	e2a0      	b.n	8003944 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	0010      	movs	r0, r2
 800340a:	4798      	blx	r3
      }
      return;
 800340c:	e29a      	b.n	8003944 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800340e:	2398      	movs	r3, #152	; 0x98
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d100      	bne.n	800341a <HAL_UART_IRQHandler+0x7a>
 8003418:	e114      	b.n	8003644 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800341a:	239c      	movs	r3, #156	; 0x9c
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	4013      	ands	r3, r2
 8003424:	d106      	bne.n	8003434 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003426:	23a0      	movs	r3, #160	; 0xa0
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <HAL_UART_IRQHandler+0x29c>)
 800342e:	4013      	ands	r3, r2
 8003430:	d100      	bne.n	8003434 <HAL_UART_IRQHandler+0x94>
 8003432:	e107      	b.n	8003644 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003434:	23a4      	movs	r3, #164	; 0xa4
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d012      	beq.n	8003466 <HAL_UART_IRQHandler+0xc6>
 8003440:	23a0      	movs	r3, #160	; 0xa0
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4013      	ands	r3, r2
 800344c:	d00b      	beq.n	8003466 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2284      	movs	r2, #132	; 0x84
 800345a:	589b      	ldr	r3, [r3, r2]
 800345c:	2201      	movs	r2, #1
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2184      	movs	r1, #132	; 0x84
 8003464:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003466:	23a4      	movs	r3, #164	; 0xa4
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2202      	movs	r2, #2
 800346e:	4013      	ands	r3, r2
 8003470:	d011      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
 8003472:	239c      	movs	r3, #156	; 0x9c
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	d00b      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2202      	movs	r2, #2
 8003484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2284      	movs	r2, #132	; 0x84
 800348a:	589b      	ldr	r3, [r3, r2]
 800348c:	2204      	movs	r2, #4
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2184      	movs	r1, #132	; 0x84
 8003494:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003496:	23a4      	movs	r3, #164	; 0xa4
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2204      	movs	r2, #4
 800349e:	4013      	ands	r3, r2
 80034a0:	d011      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
 80034a2:	239c      	movs	r3, #156	; 0x9c
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2204      	movs	r2, #4
 80034b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2284      	movs	r2, #132	; 0x84
 80034ba:	589b      	ldr	r3, [r3, r2]
 80034bc:	2202      	movs	r2, #2
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2184      	movs	r1, #132	; 0x84
 80034c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034c6:	23a4      	movs	r3, #164	; 0xa4
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2208      	movs	r2, #8
 80034ce:	4013      	ands	r3, r2
 80034d0:	d017      	beq.n	8003502 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034d2:	23a0      	movs	r3, #160	; 0xa0
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2220      	movs	r2, #32
 80034da:	4013      	ands	r3, r2
 80034dc:	d105      	bne.n	80034ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034de:	239c      	movs	r3, #156	; 0x9c
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2201      	movs	r2, #1
 80034e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034e8:	d00b      	beq.n	8003502 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2284      	movs	r2, #132	; 0x84
 80034f6:	589b      	ldr	r3, [r3, r2]
 80034f8:	2208      	movs	r2, #8
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2184      	movs	r1, #132	; 0x84
 8003500:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003502:	23a4      	movs	r3, #164	; 0xa4
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4013      	ands	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_UART_IRQHandler+0x198>
 8003510:	23a0      	movs	r3, #160	; 0xa0
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	04db      	lsls	r3, r3, #19
 800351a:	4013      	ands	r3, r2
 800351c:	d00c      	beq.n	8003538 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	589b      	ldr	r3, [r3, r2]
 800352e:	2220      	movs	r2, #32
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2184      	movs	r1, #132	; 0x84
 8003536:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2284      	movs	r2, #132	; 0x84
 800353c:	589b      	ldr	r3, [r3, r2]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d100      	bne.n	8003544 <HAL_UART_IRQHandler+0x1a4>
 8003542:	e201      	b.n	8003948 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003544:	23a4      	movs	r3, #164	; 0xa4
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	4013      	ands	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003550:	23a0      	movs	r3, #160	; 0xa0
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	4013      	ands	r3, r2
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	0010      	movs	r0, r2
 800356c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2284      	movs	r2, #132	; 0x84
 8003572:	589b      	ldr	r3, [r3, r2]
 8003574:	2194      	movs	r1, #148	; 0x94
 8003576:	187a      	adds	r2, r7, r1
 8003578:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4013      	ands	r3, r2
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d004      	beq.n	8003592 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003588:	187b      	adds	r3, r7, r1
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2228      	movs	r2, #40	; 0x28
 800358e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003590:	d047      	beq.n	8003622 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 ff0d 	bl	80043b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d137      	bne.n	8003618 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80035ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b0:	2090      	movs	r0, #144	; 0x90
 80035b2:	183a      	adds	r2, r7, r0
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	2301      	movs	r3, #1
 80035b8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2140      	movs	r1, #64	; 0x40
 80035ce:	438a      	bics	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_UART_IRQHandler+0x2a0>)
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7fe f841 	bl	800167c <HAL_DMA_Abort_IT>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d01a      	beq.n	8003634 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	0018      	movs	r0, r3
 800360a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e012      	b.n	8003634 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f7fd fb29 	bl	8000c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	e00d      	b.n	8003634 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0018      	movs	r0, r3
 800361c:	f7fd fb24 	bl	8000c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	e008      	b.n	8003634 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f7fd fb1f 	bl	8000c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2284      	movs	r2, #132	; 0x84
 800362e:	2100      	movs	r1, #0
 8003630:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003632:	e189      	b.n	8003948 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	46c0      	nop			; (mov r8, r8)
    return;
 8003636:	e187      	b.n	8003948 <HAL_UART_IRQHandler+0x5a8>
 8003638:	0000080f 	.word	0x0000080f
 800363c:	04000120 	.word	0x04000120
 8003640:	0800447d 	.word	0x0800447d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003648:	2b01      	cmp	r3, #1
 800364a:	d000      	beq.n	800364e <HAL_UART_IRQHandler+0x2ae>
 800364c:	e13b      	b.n	80038c6 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800364e:	23a4      	movs	r3, #164	; 0xa4
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	4013      	ands	r3, r2
 8003658:	d100      	bne.n	800365c <HAL_UART_IRQHandler+0x2bc>
 800365a:	e134      	b.n	80038c6 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800365c:	23a0      	movs	r3, #160	; 0xa0
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2210      	movs	r2, #16
 8003664:	4013      	ands	r3, r2
 8003666:	d100      	bne.n	800366a <HAL_UART_IRQHandler+0x2ca>
 8003668:	e12d      	b.n	80038c6 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2240      	movs	r2, #64	; 0x40
 800367a:	4013      	ands	r3, r2
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d000      	beq.n	8003682 <HAL_UART_IRQHandler+0x2e2>
 8003680:	e0a1      	b.n	80037c6 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	217e      	movs	r1, #126	; 0x7e
 800368c:	187b      	adds	r3, r7, r1
 800368e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003690:	187b      	adds	r3, r7, r1
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <HAL_UART_IRQHandler+0x2fa>
 8003698:	e158      	b.n	800394c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2258      	movs	r2, #88	; 0x58
 800369e:	5a9b      	ldrh	r3, [r3, r2]
 80036a0:	187a      	adds	r2, r7, r1
 80036a2:	8812      	ldrh	r2, [r2, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d300      	bcc.n	80036aa <HAL_UART_IRQHandler+0x30a>
 80036a8:	e150      	b.n	800394c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	187a      	adds	r2, r7, r1
 80036ae:	215a      	movs	r1, #90	; 0x5a
 80036b0:	8812      	ldrh	r2, [r2, #0]
 80036b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2220      	movs	r2, #32
 80036be:	4013      	ands	r3, r2
 80036c0:	d16f      	bne.n	80037a2 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80036cc:	2301      	movs	r3, #1
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	499e      	ldr	r1, [pc, #632]	; (800395c <HAL_UART_IRQHandler+0x5bc>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f4:	f3ef 8310 	mrs	r3, PRIMASK
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fc:	677b      	str	r3, [r7, #116]	; 0x74
 80036fe:	2301      	movs	r3, #1
 8003700:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	438a      	bics	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003726:	f3ef 8310 	mrs	r3, PRIMASK
 800372a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800372c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	673b      	str	r3, [r7, #112]	; 0x70
 8003730:	2301      	movs	r3, #1
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	438a      	bics	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800374e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003766:	f3ef 8310 	mrs	r3, PRIMASK
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800376c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003770:	2301      	movs	r3, #1
 8003772:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003776:	f383 8810 	msr	PRIMASK, r3
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2110      	movs	r1, #16
 8003788:	438a      	bics	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003792:	f383 8810 	msr	PRIMASK, r3
}
 8003796:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	0018      	movs	r0, r3
 800379e:	f7fd ff2d 	bl	80015fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2258      	movs	r2, #88	; 0x58
 80037ac:	5a9a      	ldrh	r2, [r3, r2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	215a      	movs	r1, #90	; 0x5a
 80037b2:	5a5b      	ldrh	r3, [r3, r1]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0011      	movs	r1, r2
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f8d8 	bl	8003974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037c4:	e0c2      	b.n	800394c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2258      	movs	r2, #88	; 0x58
 80037ca:	5a99      	ldrh	r1, [r3, r2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	225a      	movs	r2, #90	; 0x5a
 80037d0:	5a9b      	ldrh	r3, [r3, r2]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	208e      	movs	r0, #142	; 0x8e
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	1a8a      	subs	r2, r1, r2
 80037da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	225a      	movs	r2, #90	; 0x5a
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d100      	bne.n	80037ea <HAL_UART_IRQHandler+0x44a>
 80037e8:	e0b2      	b.n	8003950 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d100      	bne.n	80037f4 <HAL_UART_IRQHandler+0x454>
 80037f2:	e0ad      	b.n	8003950 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f4:	f3ef 8310 	mrs	r3, PRIMASK
 80037f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80037fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fc:	2488      	movs	r4, #136	; 0x88
 80037fe:	193a      	adds	r2, r7, r4
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	2301      	movs	r3, #1
 8003804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4951      	ldr	r1, [pc, #324]	; (8003960 <HAL_UART_IRQHandler+0x5c0>)
 800381a:	400a      	ands	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	193b      	adds	r3, r7, r4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	61bb      	str	r3, [r7, #24]
  return(result);
 8003832:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	2484      	movs	r4, #132	; 0x84
 8003836:	193a      	adds	r2, r7, r4
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	2301      	movs	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	438a      	bics	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	193b      	adds	r3, r7, r4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	2120      	movs	r1, #32
 800386a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003880:	2480      	movs	r4, #128	; 0x80
 8003882:	193a      	adds	r2, r7, r4
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	2301      	movs	r3, #1
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2110      	movs	r1, #16
 800389e:	438a      	bics	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	f383 8810 	msr	PRIMASK, r3
}
 80038ae:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0011      	movs	r1, r2
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f858 	bl	8003974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038c4:	e044      	b.n	8003950 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038c6:	23a4      	movs	r3, #164	; 0xa4
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	035b      	lsls	r3, r3, #13
 80038d0:	4013      	ands	r3, r2
 80038d2:	d010      	beq.n	80038f6 <HAL_UART_IRQHandler+0x556>
 80038d4:	239c      	movs	r3, #156	; 0x9c
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	03db      	lsls	r3, r3, #15
 80038de:	4013      	ands	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0352      	lsls	r2, r2, #13
 80038ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 ffca 	bl	8004888 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038f4:	e02f      	b.n	8003956 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038f6:	23a4      	movs	r3, #164	; 0xa4
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	4013      	ands	r3, r2
 8003900:	d00f      	beq.n	8003922 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003902:	23a0      	movs	r3, #160	; 0xa0
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	4013      	ands	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01e      	beq.n	8003954 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	0010      	movs	r0, r2
 800391e:	4798      	blx	r3
    }
    return;
 8003920:	e018      	b.n	8003954 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003922:	23a4      	movs	r3, #164	; 0xa4
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	4013      	ands	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_UART_IRQHandler+0x5b6>
 800392e:	23a0      	movs	r3, #160	; 0xa0
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	4013      	ands	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 fdb4 	bl	80044aa <UART_EndTransmit_IT>
    return;
 8003942:	e008      	b.n	8003956 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	e006      	b.n	8003956 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	e004      	b.n	8003956 <HAL_UART_IRQHandler+0x5b6>
      return;
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	e002      	b.n	8003956 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	e000      	b.n	8003956 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003954:	46c0      	nop			; (mov r8, r8)
  }

}
 8003956:	46bd      	mov	sp, r7
 8003958:	b02b      	add	sp, #172	; 0xac
 800395a:	bd90      	pop	{r4, r7, pc}
 800395c:	fffffeff 	.word	0xfffffeff
 8003960:	fffffedf 	.word	0xfffffedf

08003964 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	000a      	movs	r2, r1
 800397e:	1cbb      	adds	r3, r7, #2
 8003980:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b002      	add	sp, #8
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b08e      	sub	sp, #56	; 0x38
 8003990:	af00      	add	r7, sp, #0
 8003992:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003994:	231a      	movs	r3, #26
 8003996:	2218      	movs	r2, #24
 8003998:	189b      	adds	r3, r3, r2
 800399a:	19db      	adds	r3, r3, r7
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4ac6      	ldr	r2, [pc, #792]	; (8003cd8 <UART_SetConfig+0x34c>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4ac1      	ldr	r2, [pc, #772]	; (8003cdc <UART_SetConfig+0x350>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4abb      	ldr	r2, [pc, #748]	; (8003ce0 <UART_SetConfig+0x354>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fc:	4313      	orrs	r3, r2
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4ab7      	ldr	r2, [pc, #732]	; (8003ce4 <UART_SetConfig+0x358>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a12:	430a      	orrs	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4ab3      	ldr	r2, [pc, #716]	; (8003ce8 <UART_SetConfig+0x35c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d131      	bne.n	8003a84 <UART_SetConfig+0xf8>
 8003a20:	4bb2      	ldr	r3, [pc, #712]	; (8003cec <UART_SetConfig+0x360>)
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	2203      	movs	r2, #3
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d01d      	beq.n	8003a68 <UART_SetConfig+0xdc>
 8003a2c:	d823      	bhi.n	8003a76 <UART_SetConfig+0xea>
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d00c      	beq.n	8003a4c <UART_SetConfig+0xc0>
 8003a32:	d820      	bhi.n	8003a76 <UART_SetConfig+0xea>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <UART_SetConfig+0xb2>
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d00e      	beq.n	8003a5a <UART_SetConfig+0xce>
 8003a3c:	e01b      	b.n	8003a76 <UART_SetConfig+0xea>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2218      	movs	r2, #24
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e09c      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2218      	movs	r2, #24
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e095      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	2218      	movs	r2, #24
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	2204      	movs	r2, #4
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e08e      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2218      	movs	r2, #24
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	2208      	movs	r2, #8
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e087      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003a76:	231b      	movs	r3, #27
 8003a78:	2218      	movs	r2, #24
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	19db      	adds	r3, r3, r7
 8003a7e:	2210      	movs	r2, #16
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e080      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a99      	ldr	r2, [pc, #612]	; (8003cf0 <UART_SetConfig+0x364>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d131      	bne.n	8003af2 <UART_SetConfig+0x166>
 8003a8e:	4b97      	ldr	r3, [pc, #604]	; (8003cec <UART_SetConfig+0x360>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	220c      	movs	r2, #12
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d01d      	beq.n	8003ad6 <UART_SetConfig+0x14a>
 8003a9a:	d823      	bhi.n	8003ae4 <UART_SetConfig+0x158>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d00c      	beq.n	8003aba <UART_SetConfig+0x12e>
 8003aa0:	d820      	bhi.n	8003ae4 <UART_SetConfig+0x158>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <UART_SetConfig+0x120>
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d00e      	beq.n	8003ac8 <UART_SetConfig+0x13c>
 8003aaa:	e01b      	b.n	8003ae4 <UART_SetConfig+0x158>
 8003aac:	231b      	movs	r3, #27
 8003aae:	2218      	movs	r2, #24
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e065      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003aba:	231b      	movs	r3, #27
 8003abc:	2218      	movs	r2, #24
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e05e      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003ac8:	231b      	movs	r3, #27
 8003aca:	2218      	movs	r2, #24
 8003acc:	189b      	adds	r3, r3, r2
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e057      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003ad6:	231b      	movs	r3, #27
 8003ad8:	2218      	movs	r2, #24
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	19db      	adds	r3, r3, r7
 8003ade:	2208      	movs	r2, #8
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e050      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003ae4:	231b      	movs	r3, #27
 8003ae6:	2218      	movs	r2, #24
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	2210      	movs	r2, #16
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	e049      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7a      	ldr	r2, [pc, #488]	; (8003ce0 <UART_SetConfig+0x354>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d13e      	bne.n	8003b7a <UART_SetConfig+0x1ee>
 8003afc:	4b7b      	ldr	r3, [pc, #492]	; (8003cec <UART_SetConfig+0x360>)
 8003afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b00:	23c0      	movs	r3, #192	; 0xc0
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	22c0      	movs	r2, #192	; 0xc0
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <UART_SetConfig+0x1d2>
 8003b0e:	22c0      	movs	r2, #192	; 0xc0
 8003b10:	0112      	lsls	r2, r2, #4
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d82a      	bhi.n	8003b6c <UART_SetConfig+0x1e0>
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d011      	beq.n	8003b42 <UART_SetConfig+0x1b6>
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	0112      	lsls	r2, r2, #4
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d822      	bhi.n	8003b6c <UART_SetConfig+0x1e0>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <UART_SetConfig+0x1a8>
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	00d2      	lsls	r2, r2, #3
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <UART_SetConfig+0x1c4>
 8003b32:	e01b      	b.n	8003b6c <UART_SetConfig+0x1e0>
 8003b34:	231b      	movs	r3, #27
 8003b36:	2218      	movs	r2, #24
 8003b38:	189b      	adds	r3, r3, r2
 8003b3a:	19db      	adds	r3, r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	e021      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003b42:	231b      	movs	r3, #27
 8003b44:	2218      	movs	r2, #24
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	19db      	adds	r3, r3, r7
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e01a      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003b50:	231b      	movs	r3, #27
 8003b52:	2218      	movs	r2, #24
 8003b54:	189b      	adds	r3, r3, r2
 8003b56:	19db      	adds	r3, r3, r7
 8003b58:	2204      	movs	r2, #4
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e013      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003b5e:	231b      	movs	r3, #27
 8003b60:	2218      	movs	r2, #24
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	19db      	adds	r3, r3, r7
 8003b66:	2208      	movs	r2, #8
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e00c      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003b6c:	231b      	movs	r3, #27
 8003b6e:	2218      	movs	r2, #24
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	2210      	movs	r2, #16
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e005      	b.n	8003b86 <UART_SetConfig+0x1fa>
 8003b7a:	231b      	movs	r3, #27
 8003b7c:	2218      	movs	r2, #24
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	19db      	adds	r3, r3, r7
 8003b82:	2210      	movs	r2, #16
 8003b84:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a55      	ldr	r2, [pc, #340]	; (8003ce0 <UART_SetConfig+0x354>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d000      	beq.n	8003b92 <UART_SetConfig+0x206>
 8003b90:	e084      	b.n	8003c9c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d01d      	beq.n	8003bdc <UART_SetConfig+0x250>
 8003ba0:	dc20      	bgt.n	8003be4 <UART_SetConfig+0x258>
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d015      	beq.n	8003bd2 <UART_SetConfig+0x246>
 8003ba6:	dc1d      	bgt.n	8003be4 <UART_SetConfig+0x258>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <UART_SetConfig+0x226>
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d005      	beq.n	8003bbc <UART_SetConfig+0x230>
 8003bb0:	e018      	b.n	8003be4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f7ff f803 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bba:	e01c      	b.n	8003bf6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <UART_SetConfig+0x360>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d002      	beq.n	8003bcc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <UART_SetConfig+0x368>)
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bca:	e014      	b.n	8003bf6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003bcc:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <UART_SetConfig+0x36c>)
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bd0:	e011      	b.n	8003bf6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	f7fe ff43 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bda:	e00c      	b.n	8003bf6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003be2:	e008      	b.n	8003bf6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003be8:	231a      	movs	r3, #26
 8003bea:	2218      	movs	r2, #24
 8003bec:	189b      	adds	r3, r3, r2
 8003bee:	19db      	adds	r3, r3, r7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
        break;
 8003bf4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d100      	bne.n	8003bfe <UART_SetConfig+0x272>
 8003bfc:	e132      	b.n	8003e64 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	0013      	movs	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d305      	bcc.n	8003c1a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d906      	bls.n	8003c28 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003c1a:	231a      	movs	r3, #26
 8003c1c:	2218      	movs	r2, #24
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e11d      	b.n	8003e64 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	6939      	ldr	r1, [r7, #16]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	000b      	movs	r3, r1
 8003c36:	0e1b      	lsrs	r3, r3, #24
 8003c38:	0010      	movs	r0, r2
 8003c3a:	0205      	lsls	r5, r0, #8
 8003c3c:	431d      	orrs	r5, r3
 8003c3e:	000b      	movs	r3, r1
 8003c40:	021c      	lsls	r4, r3, #8
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	1900      	adds	r0, r0, r4
 8003c54:	4169      	adcs	r1, r5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f7fc fbd8 	bl	8000418 <__aeabi_uldivmod>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	0013      	movs	r3, r2
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c72:	23c0      	movs	r3, #192	; 0xc0
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d309      	bcc.n	8003c8e <UART_SetConfig+0x302>
 8003c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	035b      	lsls	r3, r3, #13
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d204      	bcs.n	8003c8e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e0ea      	b.n	8003e64 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c8e:	231a      	movs	r3, #26
 8003c90:	2218      	movs	r2, #24
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	19db      	adds	r3, r3, r7
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e0e3      	b.n	8003e64 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d000      	beq.n	8003caa <UART_SetConfig+0x31e>
 8003ca8:	e085      	b.n	8003db6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003caa:	231b      	movs	r3, #27
 8003cac:	2218      	movs	r2, #24
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	19db      	adds	r3, r3, r7
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d837      	bhi.n	8003d28 <UART_SetConfig+0x39c>
 8003cb8:	009a      	lsls	r2, r3, #2
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <UART_SetConfig+0x370>)
 8003cbc:	18d3      	adds	r3, r2, r3
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc2:	f7fe ff7b 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cca:	e036      	b.n	8003d3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7fe ff8c 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cd4:	e031      	b.n	8003d3a <UART_SetConfig+0x3ae>
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	efff69f3 	.word	0xefff69f3
 8003cdc:	ffffcfff 	.word	0xffffcfff
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	fffff4ff 	.word	0xfffff4ff
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	003d0900 	.word	0x003d0900
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	080067b4 	.word	0x080067b4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d00:	4b60      	ldr	r3, [pc, #384]	; (8003e84 <UART_SetConfig+0x4f8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	4013      	ands	r3, r2
 8003d08:	d002      	beq.n	8003d10 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <UART_SetConfig+0x4fc>)
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d0e:	e014      	b.n	8003d3a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003d10:	4b5e      	ldr	r3, [pc, #376]	; (8003e8c <UART_SetConfig+0x500>)
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d14:	e011      	b.n	8003d3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d16:	f7fe fea1 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d1e:	e00c      	b.n	8003d3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d26:	e008      	b.n	8003d3a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d2c:	231a      	movs	r3, #26
 8003d2e:	2218      	movs	r2, #24
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	19db      	adds	r3, r3, r7
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
        break;
 8003d38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d100      	bne.n	8003d42 <UART_SetConfig+0x3b6>
 8003d40:	e090      	b.n	8003e64 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	005a      	lsls	r2, r3, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	18d2      	adds	r2, r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0019      	movs	r1, r3
 8003d54:	0010      	movs	r0, r2
 8003d56:	f7fc f9e9 	bl	800012c <__udivsi3>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d921      	bls.n	8003da8 <UART_SetConfig+0x41c>
 8003d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	025b      	lsls	r3, r3, #9
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d21c      	bcs.n	8003da8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	200e      	movs	r0, #14
 8003d74:	2418      	movs	r4, #24
 8003d76:	1903      	adds	r3, r0, r4
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2207      	movs	r2, #7
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b299      	uxth	r1, r3
 8003d8c:	1903      	adds	r3, r0, r4
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	1902      	adds	r2, r0, r4
 8003d92:	19d2      	adds	r2, r2, r7
 8003d94:	8812      	ldrh	r2, [r2, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1902      	adds	r2, r0, r4
 8003da0:	19d2      	adds	r2, r2, r7
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	e05d      	b.n	8003e64 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003da8:	231a      	movs	r3, #26
 8003daa:	2218      	movs	r2, #24
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e056      	b.n	8003e64 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db6:	231b      	movs	r3, #27
 8003db8:	2218      	movs	r2, #24
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	19db      	adds	r3, r3, r7
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d822      	bhi.n	8003e0a <UART_SetConfig+0x47e>
 8003dc4:	009a      	lsls	r2, r3, #2
 8003dc6:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <UART_SetConfig+0x504>)
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dce:	f7fe fef5 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd6:	e021      	b.n	8003e1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7fe ff06 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003de0:	e01c      	b.n	8003e1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003de2:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <UART_SetConfig+0x4f8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2210      	movs	r2, #16
 8003de8:	4013      	ands	r3, r2
 8003dea:	d002      	beq.n	8003df2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <UART_SetConfig+0x4fc>)
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003df0:	e014      	b.n	8003e1c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <UART_SetConfig+0x500>)
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df6:	e011      	b.n	8003e1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df8:	f7fe fe30 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e00:	e00c      	b.n	8003e1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e08:	e008      	b.n	8003e1c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e0e:	231a      	movs	r3, #26
 8003e10:	2218      	movs	r2, #24
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	19db      	adds	r3, r3, r7
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
        break;
 8003e1a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d020      	beq.n	8003e64 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	085a      	lsrs	r2, r3, #1
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	18d2      	adds	r2, r2, r3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0019      	movs	r1, r3
 8003e32:	0010      	movs	r0, r2
 8003e34:	f7fc f97a 	bl	800012c <__udivsi3>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	d90a      	bls.n	8003e58 <UART_SetConfig+0x4cc>
 8003e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d205      	bcs.n	8003e58 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	e005      	b.n	8003e64 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e58:	231a      	movs	r3, #26
 8003e5a:	2218      	movs	r2, #24
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2200      	movs	r2, #0
 8003e68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e70:	231a      	movs	r3, #26
 8003e72:	2218      	movs	r2, #24
 8003e74:	189b      	adds	r3, r3, r2
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	781b      	ldrb	r3, [r3, #0]
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b00e      	add	sp, #56	; 0x38
 8003e80:	bdb0      	pop	{r4, r5, r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	40021000 	.word	0x40021000
 8003e88:	003d0900 	.word	0x003d0900
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	080067d8 	.word	0x080067d8

08003e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a4a      	ldr	r2, [pc, #296]	; (8003fd8 <UART_AdvFeatureConfig+0x144>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4a43      	ldr	r2, [pc, #268]	; (8003fdc <UART_AdvFeatureConfig+0x148>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a3b      	ldr	r2, [pc, #236]	; (8003fe0 <UART_AdvFeatureConfig+0x14c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2208      	movs	r2, #8
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <UART_AdvFeatureConfig+0x150>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2210      	movs	r2, #16
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <UART_AdvFeatureConfig+0x154>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4a25      	ldr	r2, [pc, #148]	; (8003fec <UART_AdvFeatureConfig+0x158>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2240      	movs	r2, #64	; 0x40
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d01d      	beq.n	8003fae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <UART_AdvFeatureConfig+0x15c>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	035b      	lsls	r3, r3, #13
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10b      	bne.n	8003fae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <UART_AdvFeatureConfig+0x160>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a0e      	ldr	r2, [pc, #56]	; (8003ff8 <UART_AdvFeatureConfig+0x164>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	fffdffff 	.word	0xfffdffff
 8003fdc:	fffeffff 	.word	0xfffeffff
 8003fe0:	fffbffff 	.word	0xfffbffff
 8003fe4:	ffff7fff 	.word	0xffff7fff
 8003fe8:	ffffefff 	.word	0xffffefff
 8003fec:	ffffdfff 	.word	0xffffdfff
 8003ff0:	ffefffff 	.word	0xffefffff
 8003ff4:	ff9fffff 	.word	0xff9fffff
 8003ff8:	fff7ffff 	.word	0xfff7ffff

08003ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b092      	sub	sp, #72	; 0x48
 8004000:	af02      	add	r7, sp, #8
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2284      	movs	r2, #132	; 0x84
 8004008:	2100      	movs	r1, #0
 800400a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800400c:	f7fd fa0e 	bl	800142c <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2208      	movs	r2, #8
 800401c:	4013      	ands	r3, r2
 800401e:	2b08      	cmp	r3, #8
 8004020:	d12c      	bne.n	800407c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0391      	lsls	r1, r2, #14
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4a46      	ldr	r2, [pc, #280]	; (8004144 <UART_CheckIdleState+0x148>)
 800402c:	9200      	str	r2, [sp, #0]
 800402e:	2200      	movs	r2, #0
 8004030:	f000 f88c 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d021      	beq.n	800407c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
 8004042:	2301      	movs	r3, #1
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	438a      	bics	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2278      	movs	r2, #120	; 0x78
 8004074:	2100      	movs	r1, #0
 8004076:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e05f      	b.n	800413c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2204      	movs	r2, #4
 8004084:	4013      	ands	r3, r2
 8004086:	2b04      	cmp	r3, #4
 8004088:	d146      	bne.n	8004118 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	03d1      	lsls	r1, r2, #15
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <UART_CheckIdleState+0x148>)
 8004094:	9200      	str	r2, [sp, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	f000 f858 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d03b      	beq.n	8004118 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a0:	f3ef 8310 	mrs	r3, PRIMASK
 80040a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040a6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
 80040aa:	2301      	movs	r3, #1
 80040ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f383 8810 	msr	PRIMASK, r3
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4921      	ldr	r1, [pc, #132]	; (8004148 <UART_CheckIdleState+0x14c>)
 80040c2:	400a      	ands	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f383 8810 	msr	PRIMASK, r3
}
 80040d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80040d8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
 80040dc:	2301      	movs	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	2120      	movs	r1, #32
 800410a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2278      	movs	r2, #120	; 0x78
 8004110:	2100      	movs	r1, #0
 8004112:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e011      	b.n	800413c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	2120      	movs	r1, #32
 8004124:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2278      	movs	r2, #120	; 0x78
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b010      	add	sp, #64	; 0x40
 8004142:	bd80      	pop	{r7, pc}
 8004144:	01ffffff 	.word	0x01ffffff
 8004148:	fffffedf 	.word	0xfffffedf

0800414c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	1dfb      	adds	r3, r7, #7
 800415a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415c:	e04b      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	3301      	adds	r3, #1
 8004162:	d048      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004164:	f7fd f962 	bl	800142c <HAL_GetTick>
 8004168:	0002      	movs	r2, r0
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e04b      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2204      	movs	r2, #4
 8004186:	4013      	ands	r3, r2
 8004188:	d035      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2208      	movs	r2, #8
 8004192:	4013      	ands	r3, r2
 8004194:	2b08      	cmp	r3, #8
 8004196:	d111      	bne.n	80041bc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2208      	movs	r2, #8
 800419e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 f906 	bl	80043b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2284      	movs	r2, #132	; 0x84
 80041ac:	2108      	movs	r1, #8
 80041ae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2278      	movs	r2, #120	; 0x78
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e02c      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	401a      	ands	r2, r3
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d112      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 f8e9 	bl	80043b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2284      	movs	r2, #132	; 0x84
 80041e6:	2120      	movs	r1, #32
 80041e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2278      	movs	r2, #120	; 0x78
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e00f      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	425a      	negs	r2, r3
 8004206:	4153      	adcs	r3, r2
 8004208:	b2db      	uxtb	r3, r3
 800420a:	001a      	movs	r2, r3
 800420c:	1dfb      	adds	r3, r7, #7
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d0a4      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b004      	add	sp, #16
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b090      	sub	sp, #64	; 0x40
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	1dbb      	adds	r3, r7, #6
 800422c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1dba      	adds	r2, r7, #6
 8004238:	2158      	movs	r1, #88	; 0x58
 800423a:	8812      	ldrh	r2, [r2, #0]
 800423c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1dba      	adds	r2, r7, #6
 8004242:	215a      	movs	r1, #90	; 0x5a
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	015b      	lsls	r3, r3, #5
 8004256:	429a      	cmp	r2, r3
 8004258:	d10d      	bne.n	8004276 <UART_Start_Receive_IT+0x56>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <UART_Start_Receive_IT+0x4c>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	225c      	movs	r2, #92	; 0x5c
 8004266:	4950      	ldr	r1, [pc, #320]	; (80043a8 <UART_Start_Receive_IT+0x188>)
 8004268:	5299      	strh	r1, [r3, r2]
 800426a:	e02e      	b.n	80042ca <UART_Start_Receive_IT+0xaa>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	225c      	movs	r2, #92	; 0x5c
 8004270:	21ff      	movs	r1, #255	; 0xff
 8004272:	5299      	strh	r1, [r3, r2]
 8004274:	e029      	b.n	80042ca <UART_Start_Receive_IT+0xaa>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <UART_Start_Receive_IT+0x7a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <UART_Start_Receive_IT+0x70>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	225c      	movs	r2, #92	; 0x5c
 800428a:	21ff      	movs	r1, #255	; 0xff
 800428c:	5299      	strh	r1, [r3, r2]
 800428e:	e01c      	b.n	80042ca <UART_Start_Receive_IT+0xaa>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	225c      	movs	r2, #92	; 0x5c
 8004294:	217f      	movs	r1, #127	; 0x7f
 8004296:	5299      	strh	r1, [r3, r2]
 8004298:	e017      	b.n	80042ca <UART_Start_Receive_IT+0xaa>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	055b      	lsls	r3, r3, #21
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d10d      	bne.n	80042c2 <UART_Start_Receive_IT+0xa2>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <UART_Start_Receive_IT+0x98>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	225c      	movs	r2, #92	; 0x5c
 80042b2:	217f      	movs	r1, #127	; 0x7f
 80042b4:	5299      	strh	r1, [r3, r2]
 80042b6:	e008      	b.n	80042ca <UART_Start_Receive_IT+0xaa>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	225c      	movs	r2, #92	; 0x5c
 80042bc:	213f      	movs	r1, #63	; 0x3f
 80042be:	5299      	strh	r1, [r3, r2]
 80042c0:	e003      	b.n	80042ca <UART_Start_Receive_IT+0xaa>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	225c      	movs	r2, #92	; 0x5c
 80042c6:	2100      	movs	r1, #0
 80042c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2284      	movs	r2, #132	; 0x84
 80042ce:	2100      	movs	r1, #0
 80042d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	2122      	movs	r1, #34	; 0x22
 80042d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e4:	2301      	movs	r3, #1
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2101      	movs	r1, #1
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	f383 8810 	msr	PRIMASK, r3
}
 800430a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	015b      	lsls	r3, r3, #5
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <UART_Start_Receive_IT+0x108>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a22      	ldr	r2, [pc, #136]	; (80043ac <UART_Start_Receive_IT+0x18c>)
 8004324:	669a      	str	r2, [r3, #104]	; 0x68
 8004326:	e002      	b.n	800432e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <UART_Start_Receive_IT+0x190>)
 800432c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d019      	beq.n	800436a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004336:	f3ef 8310 	mrs	r3, PRIMASK
 800433a:	61fb      	str	r3, [r7, #28]
  return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
 8004340:	2301      	movs	r3, #1
 8004342:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2190      	movs	r1, #144	; 0x90
 8004358:	0049      	lsls	r1, r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	e018      	b.n	800439c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436a:	f3ef 8310 	mrs	r3, PRIMASK
 800436e:	613b      	str	r3, [r7, #16]
  return(result);
 8004370:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004372:	63bb      	str	r3, [r7, #56]	; 0x38
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2120      	movs	r1, #32
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f383 8810 	msr	PRIMASK, r3
}
 800439a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b010      	add	sp, #64	; 0x40
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	000001ff 	.word	0x000001ff
 80043ac:	080046c5 	.word	0x080046c5
 80043b0:	08004501 	.word	0x08004501

080043b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08e      	sub	sp, #56	; 0x38
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043bc:	f3ef 8310 	mrs	r3, PRIMASK
 80043c0:	617b      	str	r3, [r7, #20]
  return(result);
 80043c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4926      	ldr	r1, [pc, #152]	; (8004478 <UART_EndRxTransfer+0xc4>)
 80043de:	400a      	ands	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ee:	f3ef 8310 	mrs	r3, PRIMASK
 80043f2:	623b      	str	r3, [r7, #32]
  return(result);
 80043f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	633b      	str	r3, [r7, #48]	; 0x30
 80043f8:	2301      	movs	r3, #1
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	f383 8810 	msr	PRIMASK, r3
}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2101      	movs	r1, #1
 8004410:	438a      	bics	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	f383 8810 	msr	PRIMASK, r3
}
 800441e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	2b01      	cmp	r3, #1
 8004426:	d118      	bne.n	800445a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004428:	f3ef 8310 	mrs	r3, PRIMASK
 800442c:	60bb      	str	r3, [r7, #8]
  return(result);
 800442e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004432:	2301      	movs	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f383 8810 	msr	PRIMASK, r3
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2110      	movs	r1, #16
 800444a:	438a      	bics	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f383 8810 	msr	PRIMASK, r3
}
 8004458:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2280      	movs	r2, #128	; 0x80
 800445e:	2120      	movs	r1, #32
 8004460:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b00e      	add	sp, #56	; 0x38
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	fffffedf 	.word	0xfffffedf

0800447c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	225a      	movs	r2, #90	; 0x5a
 800448e:	2100      	movs	r1, #0
 8004490:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2252      	movs	r2, #82	; 0x52
 8004496:	2100      	movs	r1, #0
 8004498:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	0018      	movs	r0, r3
 800449e:	f7fc fbe3 	bl	8000c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b2:	f3ef 8310 	mrs	r3, PRIMASK
 80044b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	2301      	movs	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2140      	movs	r1, #64	; 0x40
 80044d4:	438a      	bics	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f383 8810 	msr	PRIMASK, r3
}
 80044e2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7ff fa36 	bl	8003964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b006      	add	sp, #24
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b094      	sub	sp, #80	; 0x50
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004508:	204e      	movs	r0, #78	; 0x4e
 800450a:	183b      	adds	r3, r7, r0
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	215c      	movs	r1, #92	; 0x5c
 8004510:	5a52      	ldrh	r2, [r2, r1]
 8004512:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	589b      	ldr	r3, [r3, r2]
 800451a:	2b22      	cmp	r3, #34	; 0x22
 800451c:	d000      	beq.n	8004520 <UART_RxISR_8BIT+0x20>
 800451e:	e0bf      	b.n	80046a0 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004526:	214c      	movs	r1, #76	; 0x4c
 8004528:	187b      	adds	r3, r7, r1
 800452a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800452c:	187b      	adds	r3, r7, r1
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	183b      	adds	r3, r7, r0
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b2d9      	uxtb	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	400a      	ands	r2, r1
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	225a      	movs	r2, #90	; 0x5a
 8004550:	5a9b      	ldrh	r3, [r3, r2]
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b299      	uxth	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	225a      	movs	r2, #90	; 0x5a
 800455c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	225a      	movs	r2, #90	; 0x5a
 8004562:	5a9b      	ldrh	r3, [r3, r2]
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d000      	beq.n	800456c <UART_RxISR_8BIT+0x6c>
 800456a:	e0a1      	b.n	80046b0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456c:	f3ef 8310 	mrs	r3, PRIMASK
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004574:	64bb      	str	r3, [r7, #72]	; 0x48
 8004576:	2301      	movs	r3, #1
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	494a      	ldr	r1, [pc, #296]	; (80046b8 <UART_RxISR_8BIT+0x1b8>)
 800458e:	400a      	ands	r2, r1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459e:	f3ef 8310 	mrs	r3, PRIMASK
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
 80045a8:	2301      	movs	r3, #1
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	f383 8810 	msr	PRIMASK, r3
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	438a      	bics	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	2120      	movs	r1, #32
 80045d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a34      	ldr	r2, [pc, #208]	; (80046bc <UART_RxISR_8BIT+0x1bc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01f      	beq.n	800462e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	4013      	ands	r3, r2
 80045fa:	d018      	beq.n	800462e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004600:	61bb      	str	r3, [r7, #24]
  return(result);
 8004602:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004604:	643b      	str	r3, [r7, #64]	; 0x40
 8004606:	2301      	movs	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f383 8810 	msr	PRIMASK, r3
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4928      	ldr	r1, [pc, #160]	; (80046c0 <UART_RxISR_8BIT+0x1c0>)
 800461e:	400a      	ands	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004632:	2b01      	cmp	r3, #1
 8004634:	d12f      	bne.n	8004696 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463c:	f3ef 8310 	mrs	r3, PRIMASK
 8004640:	60fb      	str	r3, [r7, #12]
  return(result);
 8004642:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004646:	2301      	movs	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2110      	movs	r1, #16
 800465e:	438a      	bics	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004664:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	2210      	movs	r2, #16
 8004676:	4013      	ands	r3, r2
 8004678:	2b10      	cmp	r3, #16
 800467a:	d103      	bne.n	8004684 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2210      	movs	r2, #16
 8004682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2258      	movs	r2, #88	; 0x58
 8004688:	5a9a      	ldrh	r2, [r3, r2]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0011      	movs	r1, r2
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff f970 	bl	8003974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004694:	e00c      	b.n	80046b0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f7fc faf3 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 800469e:	e007      	b.n	80046b0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2108      	movs	r1, #8
 80046ac:	430a      	orrs	r2, r1
 80046ae:	619a      	str	r2, [r3, #24]
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b014      	add	sp, #80	; 0x50
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	fffffedf 	.word	0xfffffedf
 80046bc:	40004800 	.word	0x40004800
 80046c0:	fbffffff 	.word	0xfbffffff

080046c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b094      	sub	sp, #80	; 0x50
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046cc:	204e      	movs	r0, #78	; 0x4e
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	215c      	movs	r1, #92	; 0x5c
 80046d4:	5a52      	ldrh	r2, [r2, r1]
 80046d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	589b      	ldr	r3, [r3, r2]
 80046de:	2b22      	cmp	r3, #34	; 0x22
 80046e0:	d000      	beq.n	80046e4 <UART_RxISR_16BIT+0x20>
 80046e2:	e0bf      	b.n	8004864 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ea:	214c      	movs	r1, #76	; 0x4c
 80046ec:	187b      	adds	r3, r7, r1
 80046ee:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	183a      	adds	r2, r7, r0
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	4013      	ands	r3, r2
 8004700:	b29a      	uxth	r2, r3
 8004702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004704:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	225a      	movs	r2, #90	; 0x5a
 8004714:	5a9b      	ldrh	r3, [r3, r2]
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b299      	uxth	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	225a      	movs	r2, #90	; 0x5a
 8004720:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	225a      	movs	r2, #90	; 0x5a
 8004726:	5a9b      	ldrh	r3, [r3, r2]
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d000      	beq.n	8004730 <UART_RxISR_16BIT+0x6c>
 800472e:	e0a1      	b.n	8004874 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004730:	f3ef 8310 	mrs	r3, PRIMASK
 8004734:	623b      	str	r3, [r7, #32]
  return(result);
 8004736:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004738:	647b      	str	r3, [r7, #68]	; 0x44
 800473a:	2301      	movs	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f383 8810 	msr	PRIMASK, r3
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	494a      	ldr	r1, [pc, #296]	; (800487c <UART_RxISR_16BIT+0x1b8>)
 8004752:	400a      	ands	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	f383 8810 	msr	PRIMASK, r3
}
 8004760:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004762:	f3ef 8310 	mrs	r3, PRIMASK
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
 800476c:	2301      	movs	r3, #1
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	f383 8810 	msr	PRIMASK, r3
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2101      	movs	r1, #1
 8004784:	438a      	bics	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	f383 8810 	msr	PRIMASK, r3
}
 8004792:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	2120      	movs	r1, #32
 800479a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a34      	ldr	r2, [pc, #208]	; (8004880 <UART_RxISR_16BIT+0x1bc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01f      	beq.n	80047f2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	4013      	ands	r3, r2
 80047be:	d018      	beq.n	80047f2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8310 	mrs	r3, PRIMASK
 80047c4:	617b      	str	r3, [r7, #20]
  return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ca:	2301      	movs	r3, #1
 80047cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4928      	ldr	r1, [pc, #160]	; (8004884 <UART_RxISR_16BIT+0x1c0>)
 80047e2:	400a      	ands	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d12f      	bne.n	800485a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004800:	f3ef 8310 	mrs	r3, PRIMASK
 8004804:	60bb      	str	r3, [r7, #8]
  return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38
 800480a:	2301      	movs	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2110      	movs	r1, #16
 8004822:	438a      	bics	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f383 8810 	msr	PRIMASK, r3
}
 8004830:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2210      	movs	r2, #16
 800483a:	4013      	ands	r3, r2
 800483c:	2b10      	cmp	r3, #16
 800483e:	d103      	bne.n	8004848 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2258      	movs	r2, #88	; 0x58
 800484c:	5a9a      	ldrh	r2, [r3, r2]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff f88e 	bl	8003974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004858:	e00c      	b.n	8004874 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fc fa11 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 8004862:	e007      	b.n	8004874 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2108      	movs	r1, #8
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b014      	add	sp, #80	; 0x50
 800487a:	bd80      	pop	{r7, pc}
 800487c:	fffffedf 	.word	0xfffffedf
 8004880:	40004800 	.word	0x40004800
 8004884:	fbffffff 	.word	0xfbffffff

08004888 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b002      	add	sp, #8
 8004896:	bd80      	pop	{r7, pc}

08004898 <std>:
 8004898:	2300      	movs	r3, #0
 800489a:	b510      	push	{r4, lr}
 800489c:	0004      	movs	r4, r0
 800489e:	6003      	str	r3, [r0, #0]
 80048a0:	6043      	str	r3, [r0, #4]
 80048a2:	6083      	str	r3, [r0, #8]
 80048a4:	8181      	strh	r1, [r0, #12]
 80048a6:	6643      	str	r3, [r0, #100]	; 0x64
 80048a8:	81c2      	strh	r2, [r0, #14]
 80048aa:	6103      	str	r3, [r0, #16]
 80048ac:	6143      	str	r3, [r0, #20]
 80048ae:	6183      	str	r3, [r0, #24]
 80048b0:	0019      	movs	r1, r3
 80048b2:	2208      	movs	r2, #8
 80048b4:	305c      	adds	r0, #92	; 0x5c
 80048b6:	f000 fad7 	bl	8004e68 <memset>
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <std+0x50>)
 80048bc:	6224      	str	r4, [r4, #32]
 80048be:	6263      	str	r3, [r4, #36]	; 0x24
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <std+0x54>)
 80048c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <std+0x58>)
 80048c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <std+0x5c>)
 80048ca:	6323      	str	r3, [r4, #48]	; 0x30
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <std+0x60>)
 80048ce:	429c      	cmp	r4, r3
 80048d0:	d005      	beq.n	80048de <std+0x46>
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <std+0x64>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d002      	beq.n	80048de <std+0x46>
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <std+0x68>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d103      	bne.n	80048e6 <std+0x4e>
 80048de:	0020      	movs	r0, r4
 80048e0:	3058      	adds	r0, #88	; 0x58
 80048e2:	f000 fb41 	bl	8004f68 <__retarget_lock_init_recursive>
 80048e6:	bd10      	pop	{r4, pc}
 80048e8:	08004c85 	.word	0x08004c85
 80048ec:	08004cad 	.word	0x08004cad
 80048f0:	08004ce5 	.word	0x08004ce5
 80048f4:	08004d11 	.word	0x08004d11
 80048f8:	20000264 	.word	0x20000264
 80048fc:	200002cc 	.word	0x200002cc
 8004900:	20000334 	.word	0x20000334

08004904 <stdio_exit_handler>:
 8004904:	b510      	push	{r4, lr}
 8004906:	4a03      	ldr	r2, [pc, #12]	; (8004914 <stdio_exit_handler+0x10>)
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <stdio_exit_handler+0x14>)
 800490a:	4804      	ldr	r0, [pc, #16]	; (800491c <stdio_exit_handler+0x18>)
 800490c:	f000 f86c 	bl	80049e8 <_fwalk_sglue>
 8004910:	bd10      	pop	{r4, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	20000020 	.word	0x20000020
 8004918:	08005e29 	.word	0x08005e29
 800491c:	2000002c 	.word	0x2000002c

08004920 <cleanup_stdio>:
 8004920:	6841      	ldr	r1, [r0, #4]
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <cleanup_stdio+0x30>)
 8004924:	b510      	push	{r4, lr}
 8004926:	0004      	movs	r4, r0
 8004928:	4299      	cmp	r1, r3
 800492a:	d001      	beq.n	8004930 <cleanup_stdio+0x10>
 800492c:	f001 fa7c 	bl	8005e28 <_fflush_r>
 8004930:	68a1      	ldr	r1, [r4, #8]
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <cleanup_stdio+0x34>)
 8004934:	4299      	cmp	r1, r3
 8004936:	d002      	beq.n	800493e <cleanup_stdio+0x1e>
 8004938:	0020      	movs	r0, r4
 800493a:	f001 fa75 	bl	8005e28 <_fflush_r>
 800493e:	68e1      	ldr	r1, [r4, #12]
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <cleanup_stdio+0x38>)
 8004942:	4299      	cmp	r1, r3
 8004944:	d002      	beq.n	800494c <cleanup_stdio+0x2c>
 8004946:	0020      	movs	r0, r4
 8004948:	f001 fa6e 	bl	8005e28 <_fflush_r>
 800494c:	bd10      	pop	{r4, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	20000264 	.word	0x20000264
 8004954:	200002cc 	.word	0x200002cc
 8004958:	20000334 	.word	0x20000334

0800495c <global_stdio_init.part.0>:
 800495c:	b510      	push	{r4, lr}
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <global_stdio_init.part.0+0x28>)
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <global_stdio_init.part.0+0x2c>)
 8004962:	2104      	movs	r1, #4
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	4809      	ldr	r0, [pc, #36]	; (800498c <global_stdio_init.part.0+0x30>)
 8004968:	2200      	movs	r2, #0
 800496a:	f7ff ff95 	bl	8004898 <std>
 800496e:	2201      	movs	r2, #1
 8004970:	2109      	movs	r1, #9
 8004972:	4807      	ldr	r0, [pc, #28]	; (8004990 <global_stdio_init.part.0+0x34>)
 8004974:	f7ff ff90 	bl	8004898 <std>
 8004978:	2202      	movs	r2, #2
 800497a:	2112      	movs	r1, #18
 800497c:	4805      	ldr	r0, [pc, #20]	; (8004994 <global_stdio_init.part.0+0x38>)
 800497e:	f7ff ff8b 	bl	8004898 <std>
 8004982:	bd10      	pop	{r4, pc}
 8004984:	2000039c 	.word	0x2000039c
 8004988:	08004905 	.word	0x08004905
 800498c:	20000264 	.word	0x20000264
 8004990:	200002cc 	.word	0x200002cc
 8004994:	20000334 	.word	0x20000334

08004998 <__sfp_lock_acquire>:
 8004998:	b510      	push	{r4, lr}
 800499a:	4802      	ldr	r0, [pc, #8]	; (80049a4 <__sfp_lock_acquire+0xc>)
 800499c:	f000 fae5 	bl	8004f6a <__retarget_lock_acquire_recursive>
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	200003a5 	.word	0x200003a5

080049a8 <__sfp_lock_release>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4802      	ldr	r0, [pc, #8]	; (80049b4 <__sfp_lock_release+0xc>)
 80049ac:	f000 fade 	bl	8004f6c <__retarget_lock_release_recursive>
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	200003a5 	.word	0x200003a5

080049b8 <__sinit>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	0004      	movs	r4, r0
 80049bc:	f7ff ffec 	bl	8004998 <__sfp_lock_acquire>
 80049c0:	6a23      	ldr	r3, [r4, #32]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <__sinit+0x14>
 80049c6:	f7ff ffef 	bl	80049a8 <__sfp_lock_release>
 80049ca:	bd10      	pop	{r4, pc}
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__sinit+0x28>)
 80049ce:	6223      	str	r3, [r4, #32]
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <__sinit+0x2c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f6      	bne.n	80049c6 <__sinit+0xe>
 80049d8:	f7ff ffc0 	bl	800495c <global_stdio_init.part.0>
 80049dc:	e7f3      	b.n	80049c6 <__sinit+0xe>
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	08004921 	.word	0x08004921
 80049e4:	2000039c 	.word	0x2000039c

080049e8 <_fwalk_sglue>:
 80049e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ea:	0014      	movs	r4, r2
 80049ec:	2600      	movs	r6, #0
 80049ee:	9000      	str	r0, [sp, #0]
 80049f0:	9101      	str	r1, [sp, #4]
 80049f2:	68a5      	ldr	r5, [r4, #8]
 80049f4:	6867      	ldr	r7, [r4, #4]
 80049f6:	3f01      	subs	r7, #1
 80049f8:	d504      	bpl.n	8004a04 <_fwalk_sglue+0x1c>
 80049fa:	6824      	ldr	r4, [r4, #0]
 80049fc:	2c00      	cmp	r4, #0
 80049fe:	d1f8      	bne.n	80049f2 <_fwalk_sglue+0xa>
 8004a00:	0030      	movs	r0, r6
 8004a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a04:	89ab      	ldrh	r3, [r5, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d908      	bls.n	8004a1c <_fwalk_sglue+0x34>
 8004a0a:	220e      	movs	r2, #14
 8004a0c:	5eab      	ldrsh	r3, [r5, r2]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	d004      	beq.n	8004a1c <_fwalk_sglue+0x34>
 8004a12:	0029      	movs	r1, r5
 8004a14:	9800      	ldr	r0, [sp, #0]
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	4798      	blx	r3
 8004a1a:	4306      	orrs	r6, r0
 8004a1c:	3568      	adds	r5, #104	; 0x68
 8004a1e:	e7ea      	b.n	80049f6 <_fwalk_sglue+0xe>

08004a20 <iprintf>:
 8004a20:	b40f      	push	{r0, r1, r2, r3}
 8004a22:	b507      	push	{r0, r1, r2, lr}
 8004a24:	4905      	ldr	r1, [pc, #20]	; (8004a3c <iprintf+0x1c>)
 8004a26:	ab04      	add	r3, sp, #16
 8004a28:	6808      	ldr	r0, [r1, #0]
 8004a2a:	cb04      	ldmia	r3!, {r2}
 8004a2c:	6881      	ldr	r1, [r0, #8]
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	f000 fbce 	bl	80051d0 <_vfiprintf_r>
 8004a34:	b003      	add	sp, #12
 8004a36:	bc08      	pop	{r3}
 8004a38:	b004      	add	sp, #16
 8004a3a:	4718      	bx	r3
 8004a3c:	20000078 	.word	0x20000078

08004a40 <_puts_r>:
 8004a40:	6a03      	ldr	r3, [r0, #32]
 8004a42:	b570      	push	{r4, r5, r6, lr}
 8004a44:	0005      	movs	r5, r0
 8004a46:	000e      	movs	r6, r1
 8004a48:	6884      	ldr	r4, [r0, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <_puts_r+0x12>
 8004a4e:	f7ff ffb3 	bl	80049b8 <__sinit>
 8004a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a54:	07db      	lsls	r3, r3, #31
 8004a56:	d405      	bmi.n	8004a64 <_puts_r+0x24>
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	059b      	lsls	r3, r3, #22
 8004a5c:	d402      	bmi.n	8004a64 <_puts_r+0x24>
 8004a5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a60:	f000 fa83 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	071b      	lsls	r3, r3, #28
 8004a68:	d502      	bpl.n	8004a70 <_puts_r+0x30>
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d11f      	bne.n	8004ab0 <_puts_r+0x70>
 8004a70:	0021      	movs	r1, r4
 8004a72:	0028      	movs	r0, r5
 8004a74:	f000 f994 	bl	8004da0 <__swsetup_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d019      	beq.n	8004ab0 <_puts_r+0x70>
 8004a7c:	2501      	movs	r5, #1
 8004a7e:	426d      	negs	r5, r5
 8004a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_puts_r+0x52>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	059b      	lsls	r3, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_puts_r+0x52>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8e:	f000 fa6d 	bl	8004f6c <__retarget_lock_release_recursive>
 8004a92:	0028      	movs	r0, r5
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
 8004a96:	3601      	adds	r6, #1
 8004a98:	60a3      	str	r3, [r4, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da04      	bge.n	8004aa8 <_puts_r+0x68>
 8004a9e:	69a2      	ldr	r2, [r4, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dc16      	bgt.n	8004ad2 <_puts_r+0x92>
 8004aa4:	290a      	cmp	r1, #10
 8004aa6:	d014      	beq.n	8004ad2 <_puts_r+0x92>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	6022      	str	r2, [r4, #0]
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	68a3      	ldr	r3, [r4, #8]
 8004ab2:	7831      	ldrb	r1, [r6, #0]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	d1ed      	bne.n	8004a96 <_puts_r+0x56>
 8004aba:	60a3      	str	r3, [r4, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	da0f      	bge.n	8004ae0 <_puts_r+0xa0>
 8004ac0:	0028      	movs	r0, r5
 8004ac2:	0022      	movs	r2, r4
 8004ac4:	310a      	adds	r1, #10
 8004ac6:	f000 f929 	bl	8004d1c <__swbuf_r>
 8004aca:	250a      	movs	r5, #10
 8004acc:	3001      	adds	r0, #1
 8004ace:	d1d7      	bne.n	8004a80 <_puts_r+0x40>
 8004ad0:	e7d4      	b.n	8004a7c <_puts_r+0x3c>
 8004ad2:	0022      	movs	r2, r4
 8004ad4:	0028      	movs	r0, r5
 8004ad6:	f000 f921 	bl	8004d1c <__swbuf_r>
 8004ada:	3001      	adds	r0, #1
 8004adc:	d1e8      	bne.n	8004ab0 <_puts_r+0x70>
 8004ade:	e7cd      	b.n	8004a7c <_puts_r+0x3c>
 8004ae0:	250a      	movs	r5, #10
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	701d      	strb	r5, [r3, #0]
 8004aea:	e7c9      	b.n	8004a80 <_puts_r+0x40>

08004aec <puts>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	4b03      	ldr	r3, [pc, #12]	; (8004afc <puts+0x10>)
 8004af0:	0001      	movs	r1, r0
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	f7ff ffa4 	bl	8004a40 <_puts_r>
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	20000078 	.word	0x20000078

08004b00 <iscanf>:
 8004b00:	b40f      	push	{r0, r1, r2, r3}
 8004b02:	b507      	push	{r0, r1, r2, lr}
 8004b04:	4905      	ldr	r1, [pc, #20]	; (8004b1c <iscanf+0x1c>)
 8004b06:	ab04      	add	r3, sp, #16
 8004b08:	6808      	ldr	r0, [r1, #0]
 8004b0a:	cb04      	ldmia	r3!, {r2}
 8004b0c:	6841      	ldr	r1, [r0, #4]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	f000 ff8a 	bl	8005a28 <_vfiscanf_r>
 8004b14:	b003      	add	sp, #12
 8004b16:	bc08      	pop	{r3}
 8004b18:	b004      	add	sp, #16
 8004b1a:	4718      	bx	r3
 8004b1c:	20000078 	.word	0x20000078

08004b20 <setvbuf>:
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	001d      	movs	r5, r3
 8004b24:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <setvbuf+0x15c>)
 8004b26:	b085      	sub	sp, #20
 8004b28:	681e      	ldr	r6, [r3, #0]
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	000f      	movs	r7, r1
 8004b2e:	9200      	str	r2, [sp, #0]
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	d005      	beq.n	8004b40 <setvbuf+0x20>
 8004b34:	6a33      	ldr	r3, [r6, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <setvbuf+0x20>
 8004b3a:	0030      	movs	r0, r6
 8004b3c:	f7ff ff3c 	bl	80049b8 <__sinit>
 8004b40:	9b00      	ldr	r3, [sp, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d005      	beq.n	8004b52 <setvbuf+0x32>
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d900      	bls.n	8004b4c <setvbuf+0x2c>
 8004b4a:	e093      	b.n	8004c74 <setvbuf+0x154>
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	da00      	bge.n	8004b52 <setvbuf+0x32>
 8004b50:	e090      	b.n	8004c74 <setvbuf+0x154>
 8004b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d405      	bmi.n	8004b64 <setvbuf+0x44>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	059b      	lsls	r3, r3, #22
 8004b5c:	d402      	bmi.n	8004b64 <setvbuf+0x44>
 8004b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b60:	f000 fa03 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8004b64:	0021      	movs	r1, r4
 8004b66:	0030      	movs	r0, r6
 8004b68:	f001 f95e 	bl	8005e28 <_fflush_r>
 8004b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	d008      	beq.n	8004b84 <setvbuf+0x64>
 8004b72:	0023      	movs	r3, r4
 8004b74:	3344      	adds	r3, #68	; 0x44
 8004b76:	4299      	cmp	r1, r3
 8004b78:	d002      	beq.n	8004b80 <setvbuf+0x60>
 8004b7a:	0030      	movs	r0, r6
 8004b7c:	f000 f9f8 	bl	8004f70 <_free_r>
 8004b80:	2300      	movs	r3, #0
 8004b82:	6363      	str	r3, [r4, #52]	; 0x34
 8004b84:	2300      	movs	r3, #0
 8004b86:	61a3      	str	r3, [r4, #24]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	d503      	bpl.n	8004b98 <setvbuf+0x78>
 8004b90:	0030      	movs	r0, r6
 8004b92:	6921      	ldr	r1, [r4, #16]
 8004b94:	f000 f9ec 	bl	8004f70 <_free_r>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	4a39      	ldr	r2, [pc, #228]	; (8004c80 <setvbuf+0x160>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	9b00      	ldr	r3, [sp, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d060      	beq.n	8004c68 <setvbuf+0x148>
 8004ba6:	ab03      	add	r3, sp, #12
 8004ba8:	0021      	movs	r1, r4
 8004baa:	0030      	movs	r0, r6
 8004bac:	aa02      	add	r2, sp, #8
 8004bae:	f001 f967 	bl	8005e80 <__swhatbuf_r>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	4303      	orrs	r3, r0
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	d124      	bne.n	8004c06 <setvbuf+0xe6>
 8004bbc:	9d02      	ldr	r5, [sp, #8]
 8004bbe:	0028      	movs	r0, r5
 8004bc0:	f000 fa20 	bl	8005004 <malloc>
 8004bc4:	9501      	str	r5, [sp, #4]
 8004bc6:	1e07      	subs	r7, r0, #0
 8004bc8:	d148      	bne.n	8004c5c <setvbuf+0x13c>
 8004bca:	9b02      	ldr	r3, [sp, #8]
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	42ab      	cmp	r3, r5
 8004bd0:	d13f      	bne.n	8004c52 <setvbuf+0x132>
 8004bd2:	2501      	movs	r5, #1
 8004bd4:	426d      	negs	r5, r5
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	89a2      	ldrh	r2, [r4, #12]
 8004bda:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	60a2      	str	r2, [r4, #8]
 8004be2:	0022      	movs	r2, r4
 8004be4:	3247      	adds	r2, #71	; 0x47
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	6122      	str	r2, [r4, #16]
 8004bea:	2201      	movs	r2, #1
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	6162      	str	r2, [r4, #20]
 8004bf2:	4211      	tst	r1, r2
 8004bf4:	d104      	bne.n	8004c00 <setvbuf+0xe0>
 8004bf6:	059b      	lsls	r3, r3, #22
 8004bf8:	d402      	bmi.n	8004c00 <setvbuf+0xe0>
 8004bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bfc:	f000 f9b6 	bl	8004f6c <__retarget_lock_release_recursive>
 8004c00:	0028      	movs	r0, r5
 8004c02:	b005      	add	sp, #20
 8004c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c06:	2f00      	cmp	r7, #0
 8004c08:	d0d9      	beq.n	8004bbe <setvbuf+0x9e>
 8004c0a:	6a33      	ldr	r3, [r6, #32]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <setvbuf+0xf6>
 8004c10:	0030      	movs	r0, r6
 8004c12:	f7ff fed1 	bl	80049b8 <__sinit>
 8004c16:	9b00      	ldr	r3, [sp, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d103      	bne.n	8004c24 <setvbuf+0x104>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	9a00      	ldr	r2, [sp, #0]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	81a2      	strh	r2, [r4, #12]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	2208      	movs	r2, #8
 8004c28:	0019      	movs	r1, r3
 8004c2a:	6027      	str	r7, [r4, #0]
 8004c2c:	6127      	str	r7, [r4, #16]
 8004c2e:	6165      	str	r5, [r4, #20]
 8004c30:	4011      	ands	r1, r2
 8004c32:	4213      	tst	r3, r2
 8004c34:	d01c      	beq.n	8004c70 <setvbuf+0x150>
 8004c36:	07da      	lsls	r2, r3, #31
 8004c38:	d518      	bpl.n	8004c6c <setvbuf+0x14c>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	426d      	negs	r5, r5
 8004c3e:	60a2      	str	r2, [r4, #8]
 8004c40:	61a5      	str	r5, [r4, #24]
 8004c42:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004c44:	2201      	movs	r2, #1
 8004c46:	000d      	movs	r5, r1
 8004c48:	4015      	ands	r5, r2
 8004c4a:	4211      	tst	r1, r2
 8004c4c:	d0d3      	beq.n	8004bf6 <setvbuf+0xd6>
 8004c4e:	2500      	movs	r5, #0
 8004c50:	e7d6      	b.n	8004c00 <setvbuf+0xe0>
 8004c52:	9801      	ldr	r0, [sp, #4]
 8004c54:	f000 f9d6 	bl	8005004 <malloc>
 8004c58:	1e07      	subs	r7, r0, #0
 8004c5a:	d0ba      	beq.n	8004bd2 <setvbuf+0xb2>
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	89a2      	ldrh	r2, [r4, #12]
 8004c60:	9d01      	ldr	r5, [sp, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	e7d0      	b.n	8004c0a <setvbuf+0xea>
 8004c68:	2500      	movs	r5, #0
 8004c6a:	e7b4      	b.n	8004bd6 <setvbuf+0xb6>
 8004c6c:	60a5      	str	r5, [r4, #8]
 8004c6e:	e7e8      	b.n	8004c42 <setvbuf+0x122>
 8004c70:	60a1      	str	r1, [r4, #8]
 8004c72:	e7e6      	b.n	8004c42 <setvbuf+0x122>
 8004c74:	2501      	movs	r5, #1
 8004c76:	426d      	negs	r5, r5
 8004c78:	e7c2      	b.n	8004c00 <setvbuf+0xe0>
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	20000078 	.word	0x20000078
 8004c80:	fffff35c 	.word	0xfffff35c

08004c84 <__sread>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	000c      	movs	r4, r1
 8004c88:	250e      	movs	r5, #14
 8004c8a:	5f49      	ldrsh	r1, [r1, r5]
 8004c8c:	f000 f91a 	bl	8004ec4 <_read_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	db03      	blt.n	8004c9c <__sread+0x18>
 8004c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c96:	181b      	adds	r3, r3, r0
 8004c98:	6563      	str	r3, [r4, #84]	; 0x54
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	4a02      	ldr	r2, [pc, #8]	; (8004ca8 <__sread+0x24>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	e7f9      	b.n	8004c9a <__sread+0x16>
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	ffffefff 	.word	0xffffefff

08004cac <__swrite>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	001f      	movs	r7, r3
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	0005      	movs	r5, r0
 8004cb4:	000c      	movs	r4, r1
 8004cb6:	0016      	movs	r6, r2
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	d505      	bpl.n	8004cc8 <__swrite+0x1c>
 8004cbc:	230e      	movs	r3, #14
 8004cbe:	5ec9      	ldrsh	r1, [r1, r3]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f000 f8ea 	bl	8004e9c <_lseek_r>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	4a05      	ldr	r2, [pc, #20]	; (8004ce0 <__swrite+0x34>)
 8004ccc:	0028      	movs	r0, r5
 8004cce:	4013      	ands	r3, r2
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	0032      	movs	r2, r6
 8004cd4:	230e      	movs	r3, #14
 8004cd6:	5ee1      	ldrsh	r1, [r4, r3]
 8004cd8:	003b      	movs	r3, r7
 8004cda:	f000 f907 	bl	8004eec <_write_r>
 8004cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce0:	ffffefff 	.word	0xffffefff

08004ce4 <__sseek>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	000c      	movs	r4, r1
 8004ce8:	250e      	movs	r5, #14
 8004cea:	5f49      	ldrsh	r1, [r1, r5]
 8004cec:	f000 f8d6 	bl	8004e9c <_lseek_r>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	1c42      	adds	r2, r0, #1
 8004cf4:	d103      	bne.n	8004cfe <__sseek+0x1a>
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <__sseek+0x28>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	0152      	lsls	r2, r2, #5
 8004d02:	4313      	orrs	r3, r2
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	6560      	str	r0, [r4, #84]	; 0x54
 8004d08:	e7f8      	b.n	8004cfc <__sseek+0x18>
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	ffffefff 	.word	0xffffefff

08004d10 <__sclose>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	230e      	movs	r3, #14
 8004d14:	5ec9      	ldrsh	r1, [r1, r3]
 8004d16:	f000 f8af 	bl	8004e78 <_close_r>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <__swbuf_r>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	0006      	movs	r6, r0
 8004d20:	000d      	movs	r5, r1
 8004d22:	0014      	movs	r4, r2
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d004      	beq.n	8004d32 <__swbuf_r+0x16>
 8004d28:	6a03      	ldr	r3, [r0, #32]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <__swbuf_r+0x16>
 8004d2e:	f7ff fe43 	bl	80049b8 <__sinit>
 8004d32:	69a3      	ldr	r3, [r4, #24]
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	d528      	bpl.n	8004d8e <__swbuf_r+0x72>
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d025      	beq.n	8004d8e <__swbuf_r+0x72>
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	b2ef      	uxtb	r7, r5
 8004d48:	1ac0      	subs	r0, r0, r3
 8004d4a:	6963      	ldr	r3, [r4, #20]
 8004d4c:	b2ed      	uxtb	r5, r5
 8004d4e:	4283      	cmp	r3, r0
 8004d50:	dc05      	bgt.n	8004d5e <__swbuf_r+0x42>
 8004d52:	0021      	movs	r1, r4
 8004d54:	0030      	movs	r0, r6
 8004d56:	f001 f867 	bl	8005e28 <_fflush_r>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d11d      	bne.n	8004d9a <__swbuf_r+0x7e>
 8004d5e:	68a3      	ldr	r3, [r4, #8]
 8004d60:	3001      	adds	r0, #1
 8004d62:	3b01      	subs	r3, #1
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	701f      	strb	r7, [r3, #0]
 8004d6e:	6963      	ldr	r3, [r4, #20]
 8004d70:	4283      	cmp	r3, r0
 8004d72:	d004      	beq.n	8004d7e <__swbuf_r+0x62>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	07db      	lsls	r3, r3, #31
 8004d78:	d507      	bpl.n	8004d8a <__swbuf_r+0x6e>
 8004d7a:	2d0a      	cmp	r5, #10
 8004d7c:	d105      	bne.n	8004d8a <__swbuf_r+0x6e>
 8004d7e:	0021      	movs	r1, r4
 8004d80:	0030      	movs	r0, r6
 8004d82:	f001 f851 	bl	8005e28 <_fflush_r>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d107      	bne.n	8004d9a <__swbuf_r+0x7e>
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8e:	0021      	movs	r1, r4
 8004d90:	0030      	movs	r0, r6
 8004d92:	f000 f805 	bl	8004da0 <__swsetup_r>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d0d3      	beq.n	8004d42 <__swbuf_r+0x26>
 8004d9a:	2501      	movs	r5, #1
 8004d9c:	426d      	negs	r5, r5
 8004d9e:	e7f4      	b.n	8004d8a <__swbuf_r+0x6e>

08004da0 <__swsetup_r>:
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <__swsetup_r+0xc4>)
 8004da2:	b570      	push	{r4, r5, r6, lr}
 8004da4:	0005      	movs	r5, r0
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	000c      	movs	r4, r1
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d004      	beq.n	8004db8 <__swsetup_r+0x18>
 8004dae:	6a03      	ldr	r3, [r0, #32]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <__swsetup_r+0x18>
 8004db4:	f7ff fe00 	bl	80049b8 <__sinit>
 8004db8:	230c      	movs	r3, #12
 8004dba:	5ee2      	ldrsh	r2, [r4, r3]
 8004dbc:	b293      	uxth	r3, r2
 8004dbe:	0711      	lsls	r1, r2, #28
 8004dc0:	d423      	bmi.n	8004e0a <__swsetup_r+0x6a>
 8004dc2:	06d9      	lsls	r1, r3, #27
 8004dc4:	d407      	bmi.n	8004dd6 <__swsetup_r+0x36>
 8004dc6:	2309      	movs	r3, #9
 8004dc8:	2001      	movs	r0, #1
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	3337      	adds	r3, #55	; 0x37
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	4240      	negs	r0, r0
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
 8004dd6:	075b      	lsls	r3, r3, #29
 8004dd8:	d513      	bpl.n	8004e02 <__swsetup_r+0x62>
 8004dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d008      	beq.n	8004df2 <__swsetup_r+0x52>
 8004de0:	0023      	movs	r3, r4
 8004de2:	3344      	adds	r3, #68	; 0x44
 8004de4:	4299      	cmp	r1, r3
 8004de6:	d002      	beq.n	8004dee <__swsetup_r+0x4e>
 8004de8:	0028      	movs	r0, r5
 8004dea:	f000 f8c1 	bl	8004f70 <_free_r>
 8004dee:	2300      	movs	r3, #0
 8004df0:	6363      	str	r3, [r4, #52]	; 0x34
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	4393      	bics	r3, r2
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	2308      	movs	r3, #8
 8004e04:	89a2      	ldrh	r2, [r4, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <__swsetup_r+0x88>
 8004e10:	21a0      	movs	r1, #160	; 0xa0
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	0089      	lsls	r1, r1, #2
 8004e18:	0092      	lsls	r2, r2, #2
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <__swsetup_r+0x88>
 8004e20:	0021      	movs	r1, r4
 8004e22:	0028      	movs	r0, r5
 8004e24:	f001 f854 	bl	8005ed0 <__smakebuf_r>
 8004e28:	220c      	movs	r2, #12
 8004e2a:	5ea3      	ldrsh	r3, [r4, r2]
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	001a      	movs	r2, r3
 8004e30:	b299      	uxth	r1, r3
 8004e32:	4002      	ands	r2, r0
 8004e34:	4203      	tst	r3, r0
 8004e36:	d00f      	beq.n	8004e58 <__swsetup_r+0xb8>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	60a2      	str	r2, [r4, #8]
 8004e3c:	6962      	ldr	r2, [r4, #20]
 8004e3e:	4252      	negs	r2, r2
 8004e40:	61a2      	str	r2, [r4, #24]
 8004e42:	2000      	movs	r0, #0
 8004e44:	6922      	ldr	r2, [r4, #16]
 8004e46:	4282      	cmp	r2, r0
 8004e48:	d1c4      	bne.n	8004dd4 <__swsetup_r+0x34>
 8004e4a:	0609      	lsls	r1, r1, #24
 8004e4c:	d5c2      	bpl.n	8004dd4 <__swsetup_r+0x34>
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	4313      	orrs	r3, r2
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	3801      	subs	r0, #1
 8004e56:	e7bd      	b.n	8004dd4 <__swsetup_r+0x34>
 8004e58:	0788      	lsls	r0, r1, #30
 8004e5a:	d400      	bmi.n	8004e5e <__swsetup_r+0xbe>
 8004e5c:	6962      	ldr	r2, [r4, #20]
 8004e5e:	60a2      	str	r2, [r4, #8]
 8004e60:	e7ef      	b.n	8004e42 <__swsetup_r+0xa2>
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	20000078 	.word	0x20000078

08004e68 <memset>:
 8004e68:	0003      	movs	r3, r0
 8004e6a:	1882      	adds	r2, r0, r2
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	7019      	strb	r1, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <_close_r>:
 8004e78:	2300      	movs	r3, #0
 8004e7a:	b570      	push	{r4, r5, r6, lr}
 8004e7c:	4d06      	ldr	r5, [pc, #24]	; (8004e98 <_close_r+0x20>)
 8004e7e:	0004      	movs	r4, r0
 8004e80:	0008      	movs	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc f8ba 	bl	8000ffc <_close>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d103      	bne.n	8004e94 <_close_r+0x1c>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d000      	beq.n	8004e94 <_close_r+0x1c>
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	200003a0 	.word	0x200003a0

08004e9c <_lseek_r>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	0004      	movs	r4, r0
 8004ea0:	0008      	movs	r0, r1
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	001a      	movs	r2, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4d05      	ldr	r5, [pc, #20]	; (8004ec0 <_lseek_r+0x24>)
 8004eaa:	602b      	str	r3, [r5, #0]
 8004eac:	f7fc f9e6 	bl	800127c <_lseek>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d103      	bne.n	8004ebc <_lseek_r+0x20>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d000      	beq.n	8004ebc <_lseek_r+0x20>
 8004eba:	6023      	str	r3, [r4, #0]
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	200003a0 	.word	0x200003a0

08004ec4 <_read_r>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	0004      	movs	r4, r0
 8004ec8:	0008      	movs	r0, r1
 8004eca:	0011      	movs	r1, r2
 8004ecc:	001a      	movs	r2, r3
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4d05      	ldr	r5, [pc, #20]	; (8004ee8 <_read_r+0x24>)
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	f7fc f8aa 	bl	800102c <_read>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d103      	bne.n	8004ee4 <_read_r+0x20>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d000      	beq.n	8004ee4 <_read_r+0x20>
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	200003a0 	.word	0x200003a0

08004eec <_write_r>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	0004      	movs	r4, r0
 8004ef0:	0008      	movs	r0, r1
 8004ef2:	0011      	movs	r1, r2
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	4d05      	ldr	r5, [pc, #20]	; (8004f10 <_write_r+0x24>)
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	f7fc f850 	bl	8000fa0 <_write>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d103      	bne.n	8004f0c <_write_r+0x20>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d000      	beq.n	8004f0c <_write_r+0x20>
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	200003a0 	.word	0x200003a0

08004f14 <__errno>:
 8004f14:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <__errno+0x8>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4770      	bx	lr
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	20000078 	.word	0x20000078

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	2600      	movs	r6, #0
 8004f24:	4c0c      	ldr	r4, [pc, #48]	; (8004f58 <__libc_init_array+0x38>)
 8004f26:	4d0d      	ldr	r5, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f28:	1b64      	subs	r4, r4, r5
 8004f2a:	10a4      	asrs	r4, r4, #2
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	2600      	movs	r6, #0
 8004f32:	f001 fb29 	bl	8006588 <_init>
 8004f36:	4c0a      	ldr	r4, [pc, #40]	; (8004f60 <__libc_init_array+0x40>)
 8004f38:	4d0a      	ldr	r5, [pc, #40]	; (8004f64 <__libc_init_array+0x44>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	00b3      	lsls	r3, r6, #2
 8004f46:	58eb      	ldr	r3, [r5, r3]
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	00b3      	lsls	r3, r6, #2
 8004f50:	58eb      	ldr	r3, [r5, r3]
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08006954 	.word	0x08006954
 8004f5c:	08006954 	.word	0x08006954
 8004f60:	0800695c 	.word	0x0800695c
 8004f64:	08006954 	.word	0x08006954

08004f68 <__retarget_lock_init_recursive>:
 8004f68:	4770      	bx	lr

08004f6a <__retarget_lock_acquire_recursive>:
 8004f6a:	4770      	bx	lr

08004f6c <__retarget_lock_release_recursive>:
 8004f6c:	4770      	bx	lr
	...

08004f70 <_free_r>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	0005      	movs	r5, r0
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d010      	beq.n	8004f9a <_free_r+0x2a>
 8004f78:	1f0c      	subs	r4, r1, #4
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da00      	bge.n	8004f82 <_free_r+0x12>
 8004f80:	18e4      	adds	r4, r4, r3
 8004f82:	0028      	movs	r0, r5
 8004f84:	f000 f8ec 	bl	8005160 <__malloc_lock>
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <_free_r+0x90>)
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <_free_r+0x2c>
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	6014      	str	r4, [r2, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f000 f8eb 	bl	8005170 <__malloc_unlock>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d908      	bls.n	8004fb2 <_free_r+0x42>
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	1821      	adds	r1, r4, r0
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	d1f3      	bne.n	8004f90 <_free_r+0x20>
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	1809      	adds	r1, r1, r0
 8004fae:	6021      	str	r1, [r4, #0]
 8004fb0:	e7ee      	b.n	8004f90 <_free_r+0x20>
 8004fb2:	001a      	movs	r2, r3
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <_free_r+0x4e>
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	d9f9      	bls.n	8004fb2 <_free_r+0x42>
 8004fbe:	6811      	ldr	r1, [r2, #0]
 8004fc0:	1850      	adds	r0, r2, r1
 8004fc2:	42a0      	cmp	r0, r4
 8004fc4:	d10b      	bne.n	8004fde <_free_r+0x6e>
 8004fc6:	6820      	ldr	r0, [r4, #0]
 8004fc8:	1809      	adds	r1, r1, r0
 8004fca:	1850      	adds	r0, r2, r1
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	4283      	cmp	r3, r0
 8004fd0:	d1e0      	bne.n	8004f94 <_free_r+0x24>
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	1841      	adds	r1, r0, r1
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	6053      	str	r3, [r2, #4]
 8004fdc:	e7da      	b.n	8004f94 <_free_r+0x24>
 8004fde:	42a0      	cmp	r0, r4
 8004fe0:	d902      	bls.n	8004fe8 <_free_r+0x78>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	e7d5      	b.n	8004f94 <_free_r+0x24>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	1821      	adds	r1, r4, r0
 8004fec:	428b      	cmp	r3, r1
 8004fee:	d103      	bne.n	8004ff8 <_free_r+0x88>
 8004ff0:	6819      	ldr	r1, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	1809      	adds	r1, r1, r0
 8004ff6:	6021      	str	r1, [r4, #0]
 8004ff8:	6063      	str	r3, [r4, #4]
 8004ffa:	6054      	str	r4, [r2, #4]
 8004ffc:	e7ca      	b.n	8004f94 <_free_r+0x24>
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	200003a8 	.word	0x200003a8

08005004 <malloc>:
 8005004:	b510      	push	{r4, lr}
 8005006:	4b03      	ldr	r3, [pc, #12]	; (8005014 <malloc+0x10>)
 8005008:	0001      	movs	r1, r0
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	f000 f826 	bl	800505c <_malloc_r>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	20000078 	.word	0x20000078

08005018 <sbrk_aligned>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4e0f      	ldr	r6, [pc, #60]	; (8005058 <sbrk_aligned+0x40>)
 800501c:	000d      	movs	r5, r1
 800501e:	6831      	ldr	r1, [r6, #0]
 8005020:	0004      	movs	r4, r0
 8005022:	2900      	cmp	r1, #0
 8005024:	d102      	bne.n	800502c <sbrk_aligned+0x14>
 8005026:	f001 f941 	bl	80062ac <_sbrk_r>
 800502a:	6030      	str	r0, [r6, #0]
 800502c:	0029      	movs	r1, r5
 800502e:	0020      	movs	r0, r4
 8005030:	f001 f93c 	bl	80062ac <_sbrk_r>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d00a      	beq.n	800504e <sbrk_aligned+0x36>
 8005038:	2303      	movs	r3, #3
 800503a:	1cc5      	adds	r5, r0, #3
 800503c:	439d      	bics	r5, r3
 800503e:	42a8      	cmp	r0, r5
 8005040:	d007      	beq.n	8005052 <sbrk_aligned+0x3a>
 8005042:	1a29      	subs	r1, r5, r0
 8005044:	0020      	movs	r0, r4
 8005046:	f001 f931 	bl	80062ac <_sbrk_r>
 800504a:	3001      	adds	r0, #1
 800504c:	d101      	bne.n	8005052 <sbrk_aligned+0x3a>
 800504e:	2501      	movs	r5, #1
 8005050:	426d      	negs	r5, r5
 8005052:	0028      	movs	r0, r5
 8005054:	bd70      	pop	{r4, r5, r6, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	200003ac 	.word	0x200003ac

0800505c <_malloc_r>:
 800505c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505e:	2203      	movs	r2, #3
 8005060:	1ccb      	adds	r3, r1, #3
 8005062:	4393      	bics	r3, r2
 8005064:	3308      	adds	r3, #8
 8005066:	0006      	movs	r6, r0
 8005068:	001f      	movs	r7, r3
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d238      	bcs.n	80050e0 <_malloc_r+0x84>
 800506e:	270c      	movs	r7, #12
 8005070:	42b9      	cmp	r1, r7
 8005072:	d837      	bhi.n	80050e4 <_malloc_r+0x88>
 8005074:	0030      	movs	r0, r6
 8005076:	f000 f873 	bl	8005160 <__malloc_lock>
 800507a:	4b38      	ldr	r3, [pc, #224]	; (800515c <_malloc_r+0x100>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	001c      	movs	r4, r3
 8005082:	2c00      	cmp	r4, #0
 8005084:	d133      	bne.n	80050ee <_malloc_r+0x92>
 8005086:	0039      	movs	r1, r7
 8005088:	0030      	movs	r0, r6
 800508a:	f7ff ffc5 	bl	8005018 <sbrk_aligned>
 800508e:	0004      	movs	r4, r0
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d15e      	bne.n	8005152 <_malloc_r+0xf6>
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	681c      	ldr	r4, [r3, #0]
 8005098:	0025      	movs	r5, r4
 800509a:	2d00      	cmp	r5, #0
 800509c:	d14e      	bne.n	800513c <_malloc_r+0xe0>
 800509e:	2c00      	cmp	r4, #0
 80050a0:	d051      	beq.n	8005146 <_malloc_r+0xea>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	0029      	movs	r1, r5
 80050a6:	18e3      	adds	r3, r4, r3
 80050a8:	0030      	movs	r0, r6
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	f001 f8fe 	bl	80062ac <_sbrk_r>
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	4283      	cmp	r3, r0
 80050b4:	d147      	bne.n	8005146 <_malloc_r+0xea>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	0030      	movs	r0, r6
 80050ba:	1aff      	subs	r7, r7, r3
 80050bc:	0039      	movs	r1, r7
 80050be:	f7ff ffab 	bl	8005018 <sbrk_aligned>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d03f      	beq.n	8005146 <_malloc_r+0xea>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	19db      	adds	r3, r3, r7
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d040      	beq.n	8005156 <_malloc_r+0xfa>
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	42a2      	cmp	r2, r4
 80050d8:	d133      	bne.n	8005142 <_malloc_r+0xe6>
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	e014      	b.n	800510a <_malloc_r+0xae>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dac5      	bge.n	8005070 <_malloc_r+0x14>
 80050e4:	230c      	movs	r3, #12
 80050e6:	2500      	movs	r5, #0
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	0028      	movs	r0, r5
 80050ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ee:	6821      	ldr	r1, [r4, #0]
 80050f0:	1bc9      	subs	r1, r1, r7
 80050f2:	d420      	bmi.n	8005136 <_malloc_r+0xda>
 80050f4:	290b      	cmp	r1, #11
 80050f6:	d918      	bls.n	800512a <_malloc_r+0xce>
 80050f8:	19e2      	adds	r2, r4, r7
 80050fa:	6027      	str	r7, [r4, #0]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d112      	bne.n	8005126 <_malloc_r+0xca>
 8005100:	9b00      	ldr	r3, [sp, #0]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	6011      	str	r1, [r2, #0]
 8005108:	6053      	str	r3, [r2, #4]
 800510a:	0030      	movs	r0, r6
 800510c:	0025      	movs	r5, r4
 800510e:	f000 f82f 	bl	8005170 <__malloc_unlock>
 8005112:	2207      	movs	r2, #7
 8005114:	350b      	adds	r5, #11
 8005116:	1d23      	adds	r3, r4, #4
 8005118:	4395      	bics	r5, r2
 800511a:	1aea      	subs	r2, r5, r3
 800511c:	429d      	cmp	r5, r3
 800511e:	d0e4      	beq.n	80050ea <_malloc_r+0x8e>
 8005120:	1b5b      	subs	r3, r3, r5
 8005122:	50a3      	str	r3, [r4, r2]
 8005124:	e7e1      	b.n	80050ea <_malloc_r+0x8e>
 8005126:	605a      	str	r2, [r3, #4]
 8005128:	e7ec      	b.n	8005104 <_malloc_r+0xa8>
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	42a3      	cmp	r3, r4
 800512e:	d1d5      	bne.n	80050dc <_malloc_r+0x80>
 8005130:	9b00      	ldr	r3, [sp, #0]
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e7e9      	b.n	800510a <_malloc_r+0xae>
 8005136:	0023      	movs	r3, r4
 8005138:	6864      	ldr	r4, [r4, #4]
 800513a:	e7a2      	b.n	8005082 <_malloc_r+0x26>
 800513c:	002c      	movs	r4, r5
 800513e:	686d      	ldr	r5, [r5, #4]
 8005140:	e7ab      	b.n	800509a <_malloc_r+0x3e>
 8005142:	0013      	movs	r3, r2
 8005144:	e7c4      	b.n	80050d0 <_malloc_r+0x74>
 8005146:	230c      	movs	r3, #12
 8005148:	0030      	movs	r0, r6
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	f000 f810 	bl	8005170 <__malloc_unlock>
 8005150:	e7cb      	b.n	80050ea <_malloc_r+0x8e>
 8005152:	6027      	str	r7, [r4, #0]
 8005154:	e7d9      	b.n	800510a <_malloc_r+0xae>
 8005156:	605b      	str	r3, [r3, #4]
 8005158:	deff      	udf	#255	; 0xff
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	200003a8 	.word	0x200003a8

08005160 <__malloc_lock>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4802      	ldr	r0, [pc, #8]	; (800516c <__malloc_lock+0xc>)
 8005164:	f7ff ff01 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8005168:	bd10      	pop	{r4, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	200003a4 	.word	0x200003a4

08005170 <__malloc_unlock>:
 8005170:	b510      	push	{r4, lr}
 8005172:	4802      	ldr	r0, [pc, #8]	; (800517c <__malloc_unlock+0xc>)
 8005174:	f7ff fefa 	bl	8004f6c <__retarget_lock_release_recursive>
 8005178:	bd10      	pop	{r4, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	200003a4 	.word	0x200003a4

08005180 <__sfputc_r>:
 8005180:	6893      	ldr	r3, [r2, #8]
 8005182:	b510      	push	{r4, lr}
 8005184:	3b01      	subs	r3, #1
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	da04      	bge.n	8005196 <__sfputc_r+0x16>
 800518c:	6994      	ldr	r4, [r2, #24]
 800518e:	42a3      	cmp	r3, r4
 8005190:	db07      	blt.n	80051a2 <__sfputc_r+0x22>
 8005192:	290a      	cmp	r1, #10
 8005194:	d005      	beq.n	80051a2 <__sfputc_r+0x22>
 8005196:	6813      	ldr	r3, [r2, #0]
 8005198:	1c58      	adds	r0, r3, #1
 800519a:	6010      	str	r0, [r2, #0]
 800519c:	7019      	strb	r1, [r3, #0]
 800519e:	0008      	movs	r0, r1
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	f7ff fdbb 	bl	8004d1c <__swbuf_r>
 80051a6:	0001      	movs	r1, r0
 80051a8:	e7f9      	b.n	800519e <__sfputc_r+0x1e>

080051aa <__sfputs_r>:
 80051aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ac:	0006      	movs	r6, r0
 80051ae:	000f      	movs	r7, r1
 80051b0:	0014      	movs	r4, r2
 80051b2:	18d5      	adds	r5, r2, r3
 80051b4:	42ac      	cmp	r4, r5
 80051b6:	d101      	bne.n	80051bc <__sfputs_r+0x12>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e007      	b.n	80051cc <__sfputs_r+0x22>
 80051bc:	7821      	ldrb	r1, [r4, #0]
 80051be:	003a      	movs	r2, r7
 80051c0:	0030      	movs	r0, r6
 80051c2:	f7ff ffdd 	bl	8005180 <__sfputc_r>
 80051c6:	3401      	adds	r4, #1
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d1f3      	bne.n	80051b4 <__sfputs_r+0xa>
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051d0 <_vfiprintf_r>:
 80051d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d2:	b0a1      	sub	sp, #132	; 0x84
 80051d4:	000f      	movs	r7, r1
 80051d6:	0015      	movs	r5, r2
 80051d8:	001e      	movs	r6, r3
 80051da:	9003      	str	r0, [sp, #12]
 80051dc:	2800      	cmp	r0, #0
 80051de:	d004      	beq.n	80051ea <_vfiprintf_r+0x1a>
 80051e0:	6a03      	ldr	r3, [r0, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <_vfiprintf_r+0x1a>
 80051e6:	f7ff fbe7 	bl	80049b8 <__sinit>
 80051ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ec:	07db      	lsls	r3, r3, #31
 80051ee:	d405      	bmi.n	80051fc <_vfiprintf_r+0x2c>
 80051f0:	89bb      	ldrh	r3, [r7, #12]
 80051f2:	059b      	lsls	r3, r3, #22
 80051f4:	d402      	bmi.n	80051fc <_vfiprintf_r+0x2c>
 80051f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80051f8:	f7ff feb7 	bl	8004f6a <__retarget_lock_acquire_recursive>
 80051fc:	89bb      	ldrh	r3, [r7, #12]
 80051fe:	071b      	lsls	r3, r3, #28
 8005200:	d502      	bpl.n	8005208 <_vfiprintf_r+0x38>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d113      	bne.n	8005230 <_vfiprintf_r+0x60>
 8005208:	0039      	movs	r1, r7
 800520a:	9803      	ldr	r0, [sp, #12]
 800520c:	f7ff fdc8 	bl	8004da0 <__swsetup_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	d00d      	beq.n	8005230 <_vfiprintf_r+0x60>
 8005214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005216:	07db      	lsls	r3, r3, #31
 8005218:	d503      	bpl.n	8005222 <_vfiprintf_r+0x52>
 800521a:	2001      	movs	r0, #1
 800521c:	4240      	negs	r0, r0
 800521e:	b021      	add	sp, #132	; 0x84
 8005220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005222:	89bb      	ldrh	r3, [r7, #12]
 8005224:	059b      	lsls	r3, r3, #22
 8005226:	d4f8      	bmi.n	800521a <_vfiprintf_r+0x4a>
 8005228:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800522a:	f7ff fe9f 	bl	8004f6c <__retarget_lock_release_recursive>
 800522e:	e7f4      	b.n	800521a <_vfiprintf_r+0x4a>
 8005230:	2300      	movs	r3, #0
 8005232:	ac08      	add	r4, sp, #32
 8005234:	6163      	str	r3, [r4, #20]
 8005236:	3320      	adds	r3, #32
 8005238:	7663      	strb	r3, [r4, #25]
 800523a:	3310      	adds	r3, #16
 800523c:	76a3      	strb	r3, [r4, #26]
 800523e:	9607      	str	r6, [sp, #28]
 8005240:	002e      	movs	r6, r5
 8005242:	7833      	ldrb	r3, [r6, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <_vfiprintf_r+0x7c>
 8005248:	2b25      	cmp	r3, #37	; 0x25
 800524a:	d148      	bne.n	80052de <_vfiprintf_r+0x10e>
 800524c:	1b73      	subs	r3, r6, r5
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	42ae      	cmp	r6, r5
 8005252:	d00b      	beq.n	800526c <_vfiprintf_r+0x9c>
 8005254:	002a      	movs	r2, r5
 8005256:	0039      	movs	r1, r7
 8005258:	9803      	ldr	r0, [sp, #12]
 800525a:	f7ff ffa6 	bl	80051aa <__sfputs_r>
 800525e:	3001      	adds	r0, #1
 8005260:	d100      	bne.n	8005264 <_vfiprintf_r+0x94>
 8005262:	e0af      	b.n	80053c4 <_vfiprintf_r+0x1f4>
 8005264:	6963      	ldr	r3, [r4, #20]
 8005266:	9a05      	ldr	r2, [sp, #20]
 8005268:	189b      	adds	r3, r3, r2
 800526a:	6163      	str	r3, [r4, #20]
 800526c:	7833      	ldrb	r3, [r6, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d100      	bne.n	8005274 <_vfiprintf_r+0xa4>
 8005272:	e0a7      	b.n	80053c4 <_vfiprintf_r+0x1f4>
 8005274:	2201      	movs	r2, #1
 8005276:	2300      	movs	r3, #0
 8005278:	4252      	negs	r2, r2
 800527a:	6062      	str	r2, [r4, #4]
 800527c:	a904      	add	r1, sp, #16
 800527e:	3254      	adds	r2, #84	; 0x54
 8005280:	1852      	adds	r2, r2, r1
 8005282:	1c75      	adds	r5, r6, #1
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	60e3      	str	r3, [r4, #12]
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	7013      	strb	r3, [r2, #0]
 800528c:	65a3      	str	r3, [r4, #88]	; 0x58
 800528e:	4b59      	ldr	r3, [pc, #356]	; (80053f4 <_vfiprintf_r+0x224>)
 8005290:	2205      	movs	r2, #5
 8005292:	0018      	movs	r0, r3
 8005294:	7829      	ldrb	r1, [r5, #0]
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	f001 f81a 	bl	80062d0 <memchr>
 800529c:	1c6e      	adds	r6, r5, #1
 800529e:	2800      	cmp	r0, #0
 80052a0:	d11f      	bne.n	80052e2 <_vfiprintf_r+0x112>
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	06d3      	lsls	r3, r2, #27
 80052a6:	d504      	bpl.n	80052b2 <_vfiprintf_r+0xe2>
 80052a8:	2353      	movs	r3, #83	; 0x53
 80052aa:	a904      	add	r1, sp, #16
 80052ac:	185b      	adds	r3, r3, r1
 80052ae:	2120      	movs	r1, #32
 80052b0:	7019      	strb	r1, [r3, #0]
 80052b2:	0713      	lsls	r3, r2, #28
 80052b4:	d504      	bpl.n	80052c0 <_vfiprintf_r+0xf0>
 80052b6:	2353      	movs	r3, #83	; 0x53
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	185b      	adds	r3, r3, r1
 80052bc:	212b      	movs	r1, #43	; 0x2b
 80052be:	7019      	strb	r1, [r3, #0]
 80052c0:	782b      	ldrb	r3, [r5, #0]
 80052c2:	2b2a      	cmp	r3, #42	; 0x2a
 80052c4:	d016      	beq.n	80052f4 <_vfiprintf_r+0x124>
 80052c6:	002e      	movs	r6, r5
 80052c8:	2100      	movs	r1, #0
 80052ca:	200a      	movs	r0, #10
 80052cc:	68e3      	ldr	r3, [r4, #12]
 80052ce:	7832      	ldrb	r2, [r6, #0]
 80052d0:	1c75      	adds	r5, r6, #1
 80052d2:	3a30      	subs	r2, #48	; 0x30
 80052d4:	2a09      	cmp	r2, #9
 80052d6:	d94e      	bls.n	8005376 <_vfiprintf_r+0x1a6>
 80052d8:	2900      	cmp	r1, #0
 80052da:	d111      	bne.n	8005300 <_vfiprintf_r+0x130>
 80052dc:	e017      	b.n	800530e <_vfiprintf_r+0x13e>
 80052de:	3601      	adds	r6, #1
 80052e0:	e7af      	b.n	8005242 <_vfiprintf_r+0x72>
 80052e2:	9b05      	ldr	r3, [sp, #20]
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	1ac0      	subs	r0, r0, r3
 80052e8:	2301      	movs	r3, #1
 80052ea:	4083      	lsls	r3, r0
 80052ec:	4313      	orrs	r3, r2
 80052ee:	0035      	movs	r5, r6
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	e7cc      	b.n	800528e <_vfiprintf_r+0xbe>
 80052f4:	9b07      	ldr	r3, [sp, #28]
 80052f6:	1d19      	adds	r1, r3, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	9107      	str	r1, [sp, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db01      	blt.n	8005304 <_vfiprintf_r+0x134>
 8005300:	930b      	str	r3, [sp, #44]	; 0x2c
 8005302:	e004      	b.n	800530e <_vfiprintf_r+0x13e>
 8005304:	425b      	negs	r3, r3
 8005306:	60e3      	str	r3, [r4, #12]
 8005308:	2302      	movs	r3, #2
 800530a:	4313      	orrs	r3, r2
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	7833      	ldrb	r3, [r6, #0]
 8005310:	2b2e      	cmp	r3, #46	; 0x2e
 8005312:	d10a      	bne.n	800532a <_vfiprintf_r+0x15a>
 8005314:	7873      	ldrb	r3, [r6, #1]
 8005316:	2b2a      	cmp	r3, #42	; 0x2a
 8005318:	d135      	bne.n	8005386 <_vfiprintf_r+0x1b6>
 800531a:	9b07      	ldr	r3, [sp, #28]
 800531c:	3602      	adds	r6, #2
 800531e:	1d1a      	adds	r2, r3, #4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	9207      	str	r2, [sp, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	db2b      	blt.n	8005380 <_vfiprintf_r+0x1b0>
 8005328:	9309      	str	r3, [sp, #36]	; 0x24
 800532a:	4d33      	ldr	r5, [pc, #204]	; (80053f8 <_vfiprintf_r+0x228>)
 800532c:	2203      	movs	r2, #3
 800532e:	0028      	movs	r0, r5
 8005330:	7831      	ldrb	r1, [r6, #0]
 8005332:	f000 ffcd 	bl	80062d0 <memchr>
 8005336:	2800      	cmp	r0, #0
 8005338:	d006      	beq.n	8005348 <_vfiprintf_r+0x178>
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	1b40      	subs	r0, r0, r5
 800533e:	4083      	lsls	r3, r0
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	3601      	adds	r6, #1
 8005344:	4313      	orrs	r3, r2
 8005346:	6023      	str	r3, [r4, #0]
 8005348:	7831      	ldrb	r1, [r6, #0]
 800534a:	2206      	movs	r2, #6
 800534c:	482b      	ldr	r0, [pc, #172]	; (80053fc <_vfiprintf_r+0x22c>)
 800534e:	1c75      	adds	r5, r6, #1
 8005350:	7621      	strb	r1, [r4, #24]
 8005352:	f000 ffbd 	bl	80062d0 <memchr>
 8005356:	2800      	cmp	r0, #0
 8005358:	d043      	beq.n	80053e2 <_vfiprintf_r+0x212>
 800535a:	4b29      	ldr	r3, [pc, #164]	; (8005400 <_vfiprintf_r+0x230>)
 800535c:	2b00      	cmp	r3, #0
 800535e:	d125      	bne.n	80053ac <_vfiprintf_r+0x1dc>
 8005360:	2207      	movs	r2, #7
 8005362:	9b07      	ldr	r3, [sp, #28]
 8005364:	3307      	adds	r3, #7
 8005366:	4393      	bics	r3, r2
 8005368:	3308      	adds	r3, #8
 800536a:	9307      	str	r3, [sp, #28]
 800536c:	6963      	ldr	r3, [r4, #20]
 800536e:	9a04      	ldr	r2, [sp, #16]
 8005370:	189b      	adds	r3, r3, r2
 8005372:	6163      	str	r3, [r4, #20]
 8005374:	e764      	b.n	8005240 <_vfiprintf_r+0x70>
 8005376:	4343      	muls	r3, r0
 8005378:	002e      	movs	r6, r5
 800537a:	2101      	movs	r1, #1
 800537c:	189b      	adds	r3, r3, r2
 800537e:	e7a6      	b.n	80052ce <_vfiprintf_r+0xfe>
 8005380:	2301      	movs	r3, #1
 8005382:	425b      	negs	r3, r3
 8005384:	e7d0      	b.n	8005328 <_vfiprintf_r+0x158>
 8005386:	2300      	movs	r3, #0
 8005388:	200a      	movs	r0, #10
 800538a:	001a      	movs	r2, r3
 800538c:	3601      	adds	r6, #1
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	7831      	ldrb	r1, [r6, #0]
 8005392:	1c75      	adds	r5, r6, #1
 8005394:	3930      	subs	r1, #48	; 0x30
 8005396:	2909      	cmp	r1, #9
 8005398:	d903      	bls.n	80053a2 <_vfiprintf_r+0x1d2>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0c5      	beq.n	800532a <_vfiprintf_r+0x15a>
 800539e:	9209      	str	r2, [sp, #36]	; 0x24
 80053a0:	e7c3      	b.n	800532a <_vfiprintf_r+0x15a>
 80053a2:	4342      	muls	r2, r0
 80053a4:	002e      	movs	r6, r5
 80053a6:	2301      	movs	r3, #1
 80053a8:	1852      	adds	r2, r2, r1
 80053aa:	e7f1      	b.n	8005390 <_vfiprintf_r+0x1c0>
 80053ac:	aa07      	add	r2, sp, #28
 80053ae:	9200      	str	r2, [sp, #0]
 80053b0:	0021      	movs	r1, r4
 80053b2:	003a      	movs	r2, r7
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <_vfiprintf_r+0x234>)
 80053b6:	9803      	ldr	r0, [sp, #12]
 80053b8:	e000      	b.n	80053bc <_vfiprintf_r+0x1ec>
 80053ba:	bf00      	nop
 80053bc:	9004      	str	r0, [sp, #16]
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	3301      	adds	r3, #1
 80053c2:	d1d3      	bne.n	800536c <_vfiprintf_r+0x19c>
 80053c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c6:	07db      	lsls	r3, r3, #31
 80053c8:	d405      	bmi.n	80053d6 <_vfiprintf_r+0x206>
 80053ca:	89bb      	ldrh	r3, [r7, #12]
 80053cc:	059b      	lsls	r3, r3, #22
 80053ce:	d402      	bmi.n	80053d6 <_vfiprintf_r+0x206>
 80053d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80053d2:	f7ff fdcb 	bl	8004f6c <__retarget_lock_release_recursive>
 80053d6:	89bb      	ldrh	r3, [r7, #12]
 80053d8:	065b      	lsls	r3, r3, #25
 80053da:	d500      	bpl.n	80053de <_vfiprintf_r+0x20e>
 80053dc:	e71d      	b.n	800521a <_vfiprintf_r+0x4a>
 80053de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80053e0:	e71d      	b.n	800521e <_vfiprintf_r+0x4e>
 80053e2:	aa07      	add	r2, sp, #28
 80053e4:	9200      	str	r2, [sp, #0]
 80053e6:	0021      	movs	r1, r4
 80053e8:	003a      	movs	r2, r7
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <_vfiprintf_r+0x234>)
 80053ec:	9803      	ldr	r0, [sp, #12]
 80053ee:	f000 f87b 	bl	80054e8 <_printf_i>
 80053f2:	e7e3      	b.n	80053bc <_vfiprintf_r+0x1ec>
 80053f4:	080067fc 	.word	0x080067fc
 80053f8:	08006802 	.word	0x08006802
 80053fc:	08006806 	.word	0x08006806
 8005400:	00000000 	.word	0x00000000
 8005404:	080051ab 	.word	0x080051ab

08005408 <_printf_common>:
 8005408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800540a:	0016      	movs	r6, r2
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	688a      	ldr	r2, [r1, #8]
 8005410:	690b      	ldr	r3, [r1, #16]
 8005412:	000c      	movs	r4, r1
 8005414:	9000      	str	r0, [sp, #0]
 8005416:	4293      	cmp	r3, r2
 8005418:	da00      	bge.n	800541c <_printf_common+0x14>
 800541a:	0013      	movs	r3, r2
 800541c:	0022      	movs	r2, r4
 800541e:	6033      	str	r3, [r6, #0]
 8005420:	3243      	adds	r2, #67	; 0x43
 8005422:	7812      	ldrb	r2, [r2, #0]
 8005424:	2a00      	cmp	r2, #0
 8005426:	d001      	beq.n	800542c <_printf_common+0x24>
 8005428:	3301      	adds	r3, #1
 800542a:	6033      	str	r3, [r6, #0]
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	069b      	lsls	r3, r3, #26
 8005430:	d502      	bpl.n	8005438 <_printf_common+0x30>
 8005432:	6833      	ldr	r3, [r6, #0]
 8005434:	3302      	adds	r3, #2
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	2306      	movs	r3, #6
 800543c:	0015      	movs	r5, r2
 800543e:	401d      	ands	r5, r3
 8005440:	421a      	tst	r2, r3
 8005442:	d027      	beq.n	8005494 <_printf_common+0x8c>
 8005444:	0023      	movs	r3, r4
 8005446:	3343      	adds	r3, #67	; 0x43
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	4193      	sbcs	r3, r2
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d430      	bmi.n	80054b6 <_printf_common+0xae>
 8005454:	0022      	movs	r2, r4
 8005456:	9901      	ldr	r1, [sp, #4]
 8005458:	9800      	ldr	r0, [sp, #0]
 800545a:	9d08      	ldr	r5, [sp, #32]
 800545c:	3243      	adds	r2, #67	; 0x43
 800545e:	47a8      	blx	r5
 8005460:	3001      	adds	r0, #1
 8005462:	d025      	beq.n	80054b0 <_printf_common+0xa8>
 8005464:	2206      	movs	r2, #6
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	2500      	movs	r5, #0
 800546a:	4013      	ands	r3, r2
 800546c:	2b04      	cmp	r3, #4
 800546e:	d105      	bne.n	800547c <_printf_common+0x74>
 8005470:	6833      	ldr	r3, [r6, #0]
 8005472:	68e5      	ldr	r5, [r4, #12]
 8005474:	1aed      	subs	r5, r5, r3
 8005476:	43eb      	mvns	r3, r5
 8005478:	17db      	asrs	r3, r3, #31
 800547a:	401d      	ands	r5, r3
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	6922      	ldr	r2, [r4, #16]
 8005480:	4293      	cmp	r3, r2
 8005482:	dd01      	ble.n	8005488 <_printf_common+0x80>
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	18ed      	adds	r5, r5, r3
 8005488:	2600      	movs	r6, #0
 800548a:	42b5      	cmp	r5, r6
 800548c:	d120      	bne.n	80054d0 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e010      	b.n	80054b4 <_printf_common+0xac>
 8005492:	3501      	adds	r5, #1
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	6832      	ldr	r2, [r6, #0]
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	42ab      	cmp	r3, r5
 800549c:	ddd2      	ble.n	8005444 <_printf_common+0x3c>
 800549e:	0022      	movs	r2, r4
 80054a0:	2301      	movs	r3, #1
 80054a2:	9901      	ldr	r1, [sp, #4]
 80054a4:	9800      	ldr	r0, [sp, #0]
 80054a6:	9f08      	ldr	r7, [sp, #32]
 80054a8:	3219      	adds	r2, #25
 80054aa:	47b8      	blx	r7
 80054ac:	3001      	adds	r0, #1
 80054ae:	d1f0      	bne.n	8005492 <_printf_common+0x8a>
 80054b0:	2001      	movs	r0, #1
 80054b2:	4240      	negs	r0, r0
 80054b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054b6:	2030      	movs	r0, #48	; 0x30
 80054b8:	18e1      	adds	r1, r4, r3
 80054ba:	3143      	adds	r1, #67	; 0x43
 80054bc:	7008      	strb	r0, [r1, #0]
 80054be:	0021      	movs	r1, r4
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	3145      	adds	r1, #69	; 0x45
 80054c4:	7809      	ldrb	r1, [r1, #0]
 80054c6:	18a2      	adds	r2, r4, r2
 80054c8:	3243      	adds	r2, #67	; 0x43
 80054ca:	3302      	adds	r3, #2
 80054cc:	7011      	strb	r1, [r2, #0]
 80054ce:	e7c1      	b.n	8005454 <_printf_common+0x4c>
 80054d0:	0022      	movs	r2, r4
 80054d2:	2301      	movs	r3, #1
 80054d4:	9901      	ldr	r1, [sp, #4]
 80054d6:	9800      	ldr	r0, [sp, #0]
 80054d8:	9f08      	ldr	r7, [sp, #32]
 80054da:	321a      	adds	r2, #26
 80054dc:	47b8      	blx	r7
 80054de:	3001      	adds	r0, #1
 80054e0:	d0e6      	beq.n	80054b0 <_printf_common+0xa8>
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7d1      	b.n	800548a <_printf_common+0x82>
	...

080054e8 <_printf_i>:
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	b08b      	sub	sp, #44	; 0x2c
 80054ec:	9206      	str	r2, [sp, #24]
 80054ee:	000a      	movs	r2, r1
 80054f0:	3243      	adds	r2, #67	; 0x43
 80054f2:	9307      	str	r3, [sp, #28]
 80054f4:	9005      	str	r0, [sp, #20]
 80054f6:	9204      	str	r2, [sp, #16]
 80054f8:	7e0a      	ldrb	r2, [r1, #24]
 80054fa:	000c      	movs	r4, r1
 80054fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054fe:	2a78      	cmp	r2, #120	; 0x78
 8005500:	d809      	bhi.n	8005516 <_printf_i+0x2e>
 8005502:	2a62      	cmp	r2, #98	; 0x62
 8005504:	d80b      	bhi.n	800551e <_printf_i+0x36>
 8005506:	2a00      	cmp	r2, #0
 8005508:	d100      	bne.n	800550c <_printf_i+0x24>
 800550a:	e0be      	b.n	800568a <_printf_i+0x1a2>
 800550c:	497c      	ldr	r1, [pc, #496]	; (8005700 <_printf_i+0x218>)
 800550e:	9103      	str	r1, [sp, #12]
 8005510:	2a58      	cmp	r2, #88	; 0x58
 8005512:	d100      	bne.n	8005516 <_printf_i+0x2e>
 8005514:	e093      	b.n	800563e <_printf_i+0x156>
 8005516:	0026      	movs	r6, r4
 8005518:	3642      	adds	r6, #66	; 0x42
 800551a:	7032      	strb	r2, [r6, #0]
 800551c:	e022      	b.n	8005564 <_printf_i+0x7c>
 800551e:	0010      	movs	r0, r2
 8005520:	3863      	subs	r0, #99	; 0x63
 8005522:	2815      	cmp	r0, #21
 8005524:	d8f7      	bhi.n	8005516 <_printf_i+0x2e>
 8005526:	f7fa fdf7 	bl	8000118 <__gnu_thumb1_case_shi>
 800552a:	0016      	.short	0x0016
 800552c:	fff6001f 	.word	0xfff6001f
 8005530:	fff6fff6 	.word	0xfff6fff6
 8005534:	001ffff6 	.word	0x001ffff6
 8005538:	fff6fff6 	.word	0xfff6fff6
 800553c:	fff6fff6 	.word	0xfff6fff6
 8005540:	003600a3 	.word	0x003600a3
 8005544:	fff60083 	.word	0xfff60083
 8005548:	00b4fff6 	.word	0x00b4fff6
 800554c:	0036fff6 	.word	0x0036fff6
 8005550:	fff6fff6 	.word	0xfff6fff6
 8005554:	0087      	.short	0x0087
 8005556:	0026      	movs	r6, r4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	3642      	adds	r6, #66	; 0x42
 800555c:	1d11      	adds	r1, r2, #4
 800555e:	6019      	str	r1, [r3, #0]
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	7033      	strb	r3, [r6, #0]
 8005564:	2301      	movs	r3, #1
 8005566:	e0a2      	b.n	80056ae <_printf_i+0x1c6>
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	6809      	ldr	r1, [r1, #0]
 800556c:	1d02      	adds	r2, r0, #4
 800556e:	060d      	lsls	r5, r1, #24
 8005570:	d50b      	bpl.n	800558a <_printf_i+0xa2>
 8005572:	6805      	ldr	r5, [r0, #0]
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	2d00      	cmp	r5, #0
 8005578:	da03      	bge.n	8005582 <_printf_i+0x9a>
 800557a:	232d      	movs	r3, #45	; 0x2d
 800557c:	9a04      	ldr	r2, [sp, #16]
 800557e:	426d      	negs	r5, r5
 8005580:	7013      	strb	r3, [r2, #0]
 8005582:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <_printf_i+0x218>)
 8005584:	270a      	movs	r7, #10
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	e01b      	b.n	80055c2 <_printf_i+0xda>
 800558a:	6805      	ldr	r5, [r0, #0]
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	0649      	lsls	r1, r1, #25
 8005590:	d5f1      	bpl.n	8005576 <_printf_i+0x8e>
 8005592:	b22d      	sxth	r5, r5
 8005594:	e7ef      	b.n	8005576 <_printf_i+0x8e>
 8005596:	680d      	ldr	r5, [r1, #0]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	1d08      	adds	r0, r1, #4
 800559c:	6018      	str	r0, [r3, #0]
 800559e:	062e      	lsls	r6, r5, #24
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0xbe>
 80055a2:	680d      	ldr	r5, [r1, #0]
 80055a4:	e003      	b.n	80055ae <_printf_i+0xc6>
 80055a6:	066d      	lsls	r5, r5, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0xba>
 80055aa:	680d      	ldr	r5, [r1, #0]
 80055ac:	b2ad      	uxth	r5, r5
 80055ae:	4b54      	ldr	r3, [pc, #336]	; (8005700 <_printf_i+0x218>)
 80055b0:	2708      	movs	r7, #8
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	2a6f      	cmp	r2, #111	; 0x6f
 80055b6:	d000      	beq.n	80055ba <_printf_i+0xd2>
 80055b8:	3702      	adds	r7, #2
 80055ba:	0023      	movs	r3, r4
 80055bc:	2200      	movs	r2, #0
 80055be:	3343      	adds	r3, #67	; 0x43
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	6863      	ldr	r3, [r4, #4]
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	db03      	blt.n	80055d2 <_printf_i+0xea>
 80055ca:	2104      	movs	r1, #4
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	438a      	bics	r2, r1
 80055d0:	6022      	str	r2, [r4, #0]
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	d102      	bne.n	80055dc <_printf_i+0xf4>
 80055d6:	9e04      	ldr	r6, [sp, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <_printf_i+0x10e>
 80055dc:	9e04      	ldr	r6, [sp, #16]
 80055de:	0028      	movs	r0, r5
 80055e0:	0039      	movs	r1, r7
 80055e2:	f7fa fe29 	bl	8000238 <__aeabi_uidivmod>
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	3e01      	subs	r6, #1
 80055ea:	5c5b      	ldrb	r3, [r3, r1]
 80055ec:	7033      	strb	r3, [r6, #0]
 80055ee:	002b      	movs	r3, r5
 80055f0:	0005      	movs	r5, r0
 80055f2:	429f      	cmp	r7, r3
 80055f4:	d9f3      	bls.n	80055de <_printf_i+0xf6>
 80055f6:	2f08      	cmp	r7, #8
 80055f8:	d109      	bne.n	800560e <_printf_i+0x126>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d506      	bpl.n	800560e <_printf_i+0x126>
 8005600:	6862      	ldr	r2, [r4, #4]
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	429a      	cmp	r2, r3
 8005606:	dc02      	bgt.n	800560e <_printf_i+0x126>
 8005608:	2330      	movs	r3, #48	; 0x30
 800560a:	3e01      	subs	r6, #1
 800560c:	7033      	strb	r3, [r6, #0]
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	1b9b      	subs	r3, r3, r6
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	9b07      	ldr	r3, [sp, #28]
 8005616:	0021      	movs	r1, r4
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	9805      	ldr	r0, [sp, #20]
 800561c:	9b06      	ldr	r3, [sp, #24]
 800561e:	aa09      	add	r2, sp, #36	; 0x24
 8005620:	f7ff fef2 	bl	8005408 <_printf_common>
 8005624:	3001      	adds	r0, #1
 8005626:	d147      	bne.n	80056b8 <_printf_i+0x1d0>
 8005628:	2001      	movs	r0, #1
 800562a:	4240      	negs	r0, r0
 800562c:	b00b      	add	sp, #44	; 0x2c
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005630:	2220      	movs	r2, #32
 8005632:	6809      	ldr	r1, [r1, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	2278      	movs	r2, #120	; 0x78
 800563a:	4932      	ldr	r1, [pc, #200]	; (8005704 <_printf_i+0x21c>)
 800563c:	9103      	str	r1, [sp, #12]
 800563e:	0021      	movs	r1, r4
 8005640:	3145      	adds	r1, #69	; 0x45
 8005642:	700a      	strb	r2, [r1, #0]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	c920      	ldmia	r1!, {r5}
 800564a:	0610      	lsls	r0, r2, #24
 800564c:	d402      	bmi.n	8005654 <_printf_i+0x16c>
 800564e:	0650      	lsls	r0, r2, #25
 8005650:	d500      	bpl.n	8005654 <_printf_i+0x16c>
 8005652:	b2ad      	uxth	r5, r5
 8005654:	6019      	str	r1, [r3, #0]
 8005656:	07d3      	lsls	r3, r2, #31
 8005658:	d502      	bpl.n	8005660 <_printf_i+0x178>
 800565a:	2320      	movs	r3, #32
 800565c:	4313      	orrs	r3, r2
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	2710      	movs	r7, #16
 8005662:	2d00      	cmp	r5, #0
 8005664:	d1a9      	bne.n	80055ba <_printf_i+0xd2>
 8005666:	2220      	movs	r2, #32
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	4393      	bics	r3, r2
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	e7a4      	b.n	80055ba <_printf_i+0xd2>
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	680d      	ldr	r5, [r1, #0]
 8005674:	1d10      	adds	r0, r2, #4
 8005676:	6949      	ldr	r1, [r1, #20]
 8005678:	6018      	str	r0, [r3, #0]
 800567a:	6813      	ldr	r3, [r2, #0]
 800567c:	062e      	lsls	r6, r5, #24
 800567e:	d501      	bpl.n	8005684 <_printf_i+0x19c>
 8005680:	6019      	str	r1, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0x1a2>
 8005684:	066d      	lsls	r5, r5, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0x198>
 8005688:	8019      	strh	r1, [r3, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	9e04      	ldr	r6, [sp, #16]
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	e7c0      	b.n	8005614 <_printf_i+0x12c>
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	1d11      	adds	r1, r2, #4
 8005696:	6019      	str	r1, [r3, #0]
 8005698:	6816      	ldr	r6, [r2, #0]
 800569a:	2100      	movs	r1, #0
 800569c:	0030      	movs	r0, r6
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	f000 fe16 	bl	80062d0 <memchr>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d001      	beq.n	80056ac <_printf_i+0x1c4>
 80056a8:	1b80      	subs	r0, r0, r6
 80056aa:	6060      	str	r0, [r4, #4]
 80056ac:	6863      	ldr	r3, [r4, #4]
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	2300      	movs	r3, #0
 80056b2:	9a04      	ldr	r2, [sp, #16]
 80056b4:	7013      	strb	r3, [r2, #0]
 80056b6:	e7ad      	b.n	8005614 <_printf_i+0x12c>
 80056b8:	0032      	movs	r2, r6
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	9906      	ldr	r1, [sp, #24]
 80056be:	9805      	ldr	r0, [sp, #20]
 80056c0:	9d07      	ldr	r5, [sp, #28]
 80056c2:	47a8      	blx	r5
 80056c4:	3001      	adds	r0, #1
 80056c6:	d0af      	beq.n	8005628 <_printf_i+0x140>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	079b      	lsls	r3, r3, #30
 80056cc:	d415      	bmi.n	80056fa <_printf_i+0x212>
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	68e0      	ldr	r0, [r4, #12]
 80056d2:	4298      	cmp	r0, r3
 80056d4:	daaa      	bge.n	800562c <_printf_i+0x144>
 80056d6:	0018      	movs	r0, r3
 80056d8:	e7a8      	b.n	800562c <_printf_i+0x144>
 80056da:	0022      	movs	r2, r4
 80056dc:	2301      	movs	r3, #1
 80056de:	9906      	ldr	r1, [sp, #24]
 80056e0:	9805      	ldr	r0, [sp, #20]
 80056e2:	9e07      	ldr	r6, [sp, #28]
 80056e4:	3219      	adds	r2, #25
 80056e6:	47b0      	blx	r6
 80056e8:	3001      	adds	r0, #1
 80056ea:	d09d      	beq.n	8005628 <_printf_i+0x140>
 80056ec:	3501      	adds	r5, #1
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dcf0      	bgt.n	80056da <_printf_i+0x1f2>
 80056f8:	e7e9      	b.n	80056ce <_printf_i+0x1e6>
 80056fa:	2500      	movs	r5, #0
 80056fc:	e7f7      	b.n	80056ee <_printf_i+0x206>
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	0800680d 	.word	0x0800680d
 8005704:	0800681e 	.word	0x0800681e

08005708 <__svfiscanf_r>:
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570a:	4cb2      	ldr	r4, [pc, #712]	; (80059d4 <__svfiscanf_r+0x2cc>)
 800570c:	001f      	movs	r7, r3
 800570e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005710:	44a5      	add	sp, r4
 8005712:	0006      	movs	r6, r0
 8005714:	000c      	movs	r4, r1
 8005716:	0015      	movs	r5, r2
 8005718:	07db      	lsls	r3, r3, #31
 800571a:	d405      	bmi.n	8005728 <__svfiscanf_r+0x20>
 800571c:	898b      	ldrh	r3, [r1, #12]
 800571e:	059b      	lsls	r3, r3, #22
 8005720:	d402      	bmi.n	8005728 <__svfiscanf_r+0x20>
 8005722:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005724:	f7ff fc21 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8005728:	2300      	movs	r3, #0
 800572a:	22be      	movs	r2, #190	; 0xbe
 800572c:	9346      	str	r3, [sp, #280]	; 0x118
 800572e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005730:	ab03      	add	r3, sp, #12
 8005732:	9348      	str	r3, [sp, #288]	; 0x120
 8005734:	4ba8      	ldr	r3, [pc, #672]	; (80059d8 <__svfiscanf_r+0x2d0>)
 8005736:	0052      	lsls	r2, r2, #1
 8005738:	a943      	add	r1, sp, #268	; 0x10c
 800573a:	508b      	str	r3, [r1, r2]
 800573c:	21c0      	movs	r1, #192	; 0xc0
 800573e:	4ba7      	ldr	r3, [pc, #668]	; (80059dc <__svfiscanf_r+0x2d4>)
 8005740:	0049      	lsls	r1, r1, #1
 8005742:	aa43      	add	r2, sp, #268	; 0x10c
 8005744:	5053      	str	r3, [r2, r1]
 8005746:	9702      	str	r7, [sp, #8]
 8005748:	782b      	ldrb	r3, [r5, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d100      	bne.n	8005750 <__svfiscanf_r+0x48>
 800574e:	e15e      	b.n	8005a0e <__svfiscanf_r+0x306>
 8005750:	4aa3      	ldr	r2, [pc, #652]	; (80059e0 <__svfiscanf_r+0x2d8>)
 8005752:	2008      	movs	r0, #8
 8005754:	5cd1      	ldrb	r1, [r2, r3]
 8005756:	9200      	str	r2, [sp, #0]
 8005758:	2208      	movs	r2, #8
 800575a:	1c6f      	adds	r7, r5, #1
 800575c:	400a      	ands	r2, r1
 800575e:	4201      	tst	r1, r0
 8005760:	d01e      	beq.n	80057a0 <__svfiscanf_r+0x98>
 8005762:	6863      	ldr	r3, [r4, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	dd11      	ble.n	800578c <__svfiscanf_r+0x84>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	9900      	ldr	r1, [sp, #0]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	5c8a      	ldrb	r2, [r1, r2]
 8005770:	2108      	movs	r1, #8
 8005772:	420a      	tst	r2, r1
 8005774:	d101      	bne.n	800577a <__svfiscanf_r+0x72>
 8005776:	003d      	movs	r5, r7
 8005778:	e7e6      	b.n	8005748 <__svfiscanf_r+0x40>
 800577a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800577c:	3301      	adds	r3, #1
 800577e:	3201      	adds	r2, #1
 8005780:	9247      	str	r2, [sp, #284]	; 0x11c
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	3a01      	subs	r2, #1
 8005788:	6062      	str	r2, [r4, #4]
 800578a:	e7ea      	b.n	8005762 <__svfiscanf_r+0x5a>
 800578c:	22c0      	movs	r2, #192	; 0xc0
 800578e:	ab43      	add	r3, sp, #268	; 0x10c
 8005790:	0052      	lsls	r2, r2, #1
 8005792:	0021      	movs	r1, r4
 8005794:	0030      	movs	r0, r6
 8005796:	589b      	ldr	r3, [r3, r2]
 8005798:	4798      	blx	r3
 800579a:	2800      	cmp	r0, #0
 800579c:	d0e4      	beq.n	8005768 <__svfiscanf_r+0x60>
 800579e:	e7ea      	b.n	8005776 <__svfiscanf_r+0x6e>
 80057a0:	2b25      	cmp	r3, #37	; 0x25
 80057a2:	d011      	beq.n	80057c8 <__svfiscanf_r+0xc0>
 80057a4:	001d      	movs	r5, r3
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dd70      	ble.n	800588e <__svfiscanf_r+0x186>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	42aa      	cmp	r2, r5
 80057b2:	d000      	beq.n	80057b6 <__svfiscanf_r+0xae>
 80057b4:	e12b      	b.n	8005a0e <__svfiscanf_r+0x306>
 80057b6:	3301      	adds	r3, #1
 80057b8:	6862      	ldr	r2, [r4, #4]
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80057be:	3a01      	subs	r2, #1
 80057c0:	3301      	adds	r3, #1
 80057c2:	6062      	str	r2, [r4, #4]
 80057c4:	9347      	str	r3, [sp, #284]	; 0x11c
 80057c6:	e7d6      	b.n	8005776 <__svfiscanf_r+0x6e>
 80057c8:	9245      	str	r2, [sp, #276]	; 0x114
 80057ca:	9243      	str	r2, [sp, #268]	; 0x10c
 80057cc:	786b      	ldrb	r3, [r5, #1]
 80057ce:	2b2a      	cmp	r3, #42	; 0x2a
 80057d0:	d102      	bne.n	80057d8 <__svfiscanf_r+0xd0>
 80057d2:	3b1a      	subs	r3, #26
 80057d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80057d6:	1caf      	adds	r7, r5, #2
 80057d8:	003d      	movs	r5, r7
 80057da:	220a      	movs	r2, #10
 80057dc:	7829      	ldrb	r1, [r5, #0]
 80057de:	1c6b      	adds	r3, r5, #1
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	000b      	movs	r3, r1
 80057e4:	3b30      	subs	r3, #48	; 0x30
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d91e      	bls.n	8005828 <__svfiscanf_r+0x120>
 80057ea:	4f7e      	ldr	r7, [pc, #504]	; (80059e4 <__svfiscanf_r+0x2dc>)
 80057ec:	2203      	movs	r2, #3
 80057ee:	0038      	movs	r0, r7
 80057f0:	f000 fd6e 	bl	80062d0 <memchr>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d006      	beq.n	8005806 <__svfiscanf_r+0xfe>
 80057f8:	2301      	movs	r3, #1
 80057fa:	1bc0      	subs	r0, r0, r7
 80057fc:	4083      	lsls	r3, r0
 80057fe:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005800:	9d01      	ldr	r5, [sp, #4]
 8005802:	4313      	orrs	r3, r2
 8005804:	9343      	str	r3, [sp, #268]	; 0x10c
 8005806:	1c6f      	adds	r7, r5, #1
 8005808:	782d      	ldrb	r5, [r5, #0]
 800580a:	2d78      	cmp	r5, #120	; 0x78
 800580c:	d807      	bhi.n	800581e <__svfiscanf_r+0x116>
 800580e:	2d57      	cmp	r5, #87	; 0x57
 8005810:	d811      	bhi.n	8005836 <__svfiscanf_r+0x12e>
 8005812:	2d25      	cmp	r5, #37	; 0x25
 8005814:	d0c7      	beq.n	80057a6 <__svfiscanf_r+0x9e>
 8005816:	d835      	bhi.n	8005884 <__svfiscanf_r+0x17c>
 8005818:	2d00      	cmp	r5, #0
 800581a:	d100      	bne.n	800581e <__svfiscanf_r+0x116>
 800581c:	e0a6      	b.n	800596c <__svfiscanf_r+0x264>
 800581e:	2303      	movs	r3, #3
 8005820:	9349      	str	r3, [sp, #292]	; 0x124
 8005822:	3307      	adds	r3, #7
 8005824:	9344      	str	r3, [sp, #272]	; 0x110
 8005826:	e061      	b.n	80058ec <__svfiscanf_r+0x1e4>
 8005828:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800582a:	9d01      	ldr	r5, [sp, #4]
 800582c:	4353      	muls	r3, r2
 800582e:	3b30      	subs	r3, #48	; 0x30
 8005830:	185b      	adds	r3, r3, r1
 8005832:	9345      	str	r3, [sp, #276]	; 0x114
 8005834:	e7d2      	b.n	80057dc <__svfiscanf_r+0xd4>
 8005836:	0028      	movs	r0, r5
 8005838:	3858      	subs	r0, #88	; 0x58
 800583a:	2820      	cmp	r0, #32
 800583c:	d8ef      	bhi.n	800581e <__svfiscanf_r+0x116>
 800583e:	f7fa fc6b 	bl	8000118 <__gnu_thumb1_case_shi>
 8005842:	0041      	.short	0x0041
 8005844:	ffeeffee 	.word	0xffeeffee
 8005848:	ffee0073 	.word	0xffee0073
 800584c:	ffeeffee 	.word	0xffeeffee
 8005850:	ffeeffee 	.word	0xffeeffee
 8005854:	ffeeffee 	.word	0xffeeffee
 8005858:	0071007e 	.word	0x0071007e
 800585c:	00240024 	.word	0x00240024
 8005860:	ffee0024 	.word	0xffee0024
 8005864:	ffee004d 	.word	0xffee004d
 8005868:	ffeeffee 	.word	0xffeeffee
 800586c:	0086ffee 	.word	0x0086ffee
 8005870:	003d0051 	.word	0x003d0051
 8005874:	ffeeffee 	.word	0xffeeffee
 8005878:	ffee0084 	.word	0xffee0084
 800587c:	ffee0071 	.word	0xffee0071
 8005880:	0041ffee 	.word	0x0041ffee
 8005884:	3d45      	subs	r5, #69	; 0x45
 8005886:	2d02      	cmp	r5, #2
 8005888:	d8c9      	bhi.n	800581e <__svfiscanf_r+0x116>
 800588a:	2305      	movs	r3, #5
 800588c:	e02d      	b.n	80058ea <__svfiscanf_r+0x1e2>
 800588e:	22c0      	movs	r2, #192	; 0xc0
 8005890:	ab43      	add	r3, sp, #268	; 0x10c
 8005892:	0052      	lsls	r2, r2, #1
 8005894:	0021      	movs	r1, r4
 8005896:	0030      	movs	r0, r6
 8005898:	589b      	ldr	r3, [r3, r2]
 800589a:	4798      	blx	r3
 800589c:	2800      	cmp	r0, #0
 800589e:	d085      	beq.n	80057ac <__svfiscanf_r+0xa4>
 80058a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a2:	07db      	lsls	r3, r3, #31
 80058a4:	d400      	bmi.n	80058a8 <__svfiscanf_r+0x1a0>
 80058a6:	e0aa      	b.n	80059fe <__svfiscanf_r+0x2f6>
 80058a8:	9846      	ldr	r0, [sp, #280]	; 0x118
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d067      	beq.n	800597e <__svfiscanf_r+0x276>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	065b      	lsls	r3, r3, #25
 80058b2:	d464      	bmi.n	800597e <__svfiscanf_r+0x276>
 80058b4:	23a5      	movs	r3, #165	; 0xa5
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	449d      	add	sp, r3
 80058ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058bc:	2320      	movs	r3, #32
 80058be:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058c0:	4313      	orrs	r3, r2
 80058c2:	9343      	str	r3, [sp, #268]	; 0x10c
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4313      	orrs	r3, r2
 80058cc:	9343      	str	r3, [sp, #268]	; 0x10c
 80058ce:	2310      	movs	r3, #16
 80058d0:	9344      	str	r3, [sp, #272]	; 0x110
 80058d2:	236e      	movs	r3, #110	; 0x6e
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	419b      	sbcs	r3, r3
 80058d8:	425b      	negs	r3, r3
 80058da:	e001      	b.n	80058e0 <__svfiscanf_r+0x1d8>
 80058dc:	2300      	movs	r3, #0
 80058de:	9344      	str	r3, [sp, #272]	; 0x110
 80058e0:	3303      	adds	r3, #3
 80058e2:	e002      	b.n	80058ea <__svfiscanf_r+0x1e2>
 80058e4:	2308      	movs	r3, #8
 80058e6:	9344      	str	r3, [sp, #272]	; 0x110
 80058e8:	3b04      	subs	r3, #4
 80058ea:	9349      	str	r3, [sp, #292]	; 0x124
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd48      	ble.n	8005984 <__svfiscanf_r+0x27c>
 80058f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80058f4:	065b      	lsls	r3, r3, #25
 80058f6:	d406      	bmi.n	8005906 <__svfiscanf_r+0x1fe>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	9900      	ldr	r1, [sp, #0]
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	5c8a      	ldrb	r2, [r1, r2]
 8005900:	2108      	movs	r1, #8
 8005902:	420a      	tst	r2, r1
 8005904:	d148      	bne.n	8005998 <__svfiscanf_r+0x290>
 8005906:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005908:	2b02      	cmp	r3, #2
 800590a:	dc5a      	bgt.n	80059c2 <__svfiscanf_r+0x2ba>
 800590c:	0022      	movs	r2, r4
 800590e:	0030      	movs	r0, r6
 8005910:	ab02      	add	r3, sp, #8
 8005912:	a943      	add	r1, sp, #268	; 0x10c
 8005914:	f000 f89c 	bl	8005a50 <_scanf_chars>
 8005918:	2801      	cmp	r0, #1
 800591a:	d078      	beq.n	8005a0e <__svfiscanf_r+0x306>
 800591c:	2802      	cmp	r0, #2
 800591e:	d000      	beq.n	8005922 <__svfiscanf_r+0x21a>
 8005920:	e729      	b.n	8005776 <__svfiscanf_r+0x6e>
 8005922:	e7bd      	b.n	80058a0 <__svfiscanf_r+0x198>
 8005924:	230a      	movs	r3, #10
 8005926:	e7d3      	b.n	80058d0 <__svfiscanf_r+0x1c8>
 8005928:	0039      	movs	r1, r7
 800592a:	a803      	add	r0, sp, #12
 800592c:	f000 fb98 	bl	8006060 <__sccl>
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005934:	0007      	movs	r7, r0
 8005936:	4313      	orrs	r3, r2
 8005938:	9343      	str	r3, [sp, #268]	; 0x10c
 800593a:	2301      	movs	r3, #1
 800593c:	e7d5      	b.n	80058ea <__svfiscanf_r+0x1e2>
 800593e:	2340      	movs	r3, #64	; 0x40
 8005940:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005942:	4313      	orrs	r3, r2
 8005944:	9343      	str	r3, [sp, #268]	; 0x10c
 8005946:	2300      	movs	r3, #0
 8005948:	e7cf      	b.n	80058ea <__svfiscanf_r+0x1e2>
 800594a:	2302      	movs	r3, #2
 800594c:	e7cd      	b.n	80058ea <__svfiscanf_r+0x1e2>
 800594e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005950:	06d3      	lsls	r3, r2, #27
 8005952:	d500      	bpl.n	8005956 <__svfiscanf_r+0x24e>
 8005954:	e70f      	b.n	8005776 <__svfiscanf_r+0x6e>
 8005956:	9b02      	ldr	r3, [sp, #8]
 8005958:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800595a:	1d18      	adds	r0, r3, #4
 800595c:	9002      	str	r0, [sp, #8]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	07d5      	lsls	r5, r2, #31
 8005962:	d501      	bpl.n	8005968 <__svfiscanf_r+0x260>
 8005964:	8019      	strh	r1, [r3, #0]
 8005966:	e706      	b.n	8005776 <__svfiscanf_r+0x6e>
 8005968:	6019      	str	r1, [r3, #0]
 800596a:	e704      	b.n	8005776 <__svfiscanf_r+0x6e>
 800596c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800596e:	07db      	lsls	r3, r3, #31
 8005970:	d405      	bmi.n	800597e <__svfiscanf_r+0x276>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	059b      	lsls	r3, r3, #22
 8005976:	d402      	bmi.n	800597e <__svfiscanf_r+0x276>
 8005978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597a:	f7ff faf7 	bl	8004f6c <__retarget_lock_release_recursive>
 800597e:	2001      	movs	r0, #1
 8005980:	4240      	negs	r0, r0
 8005982:	e797      	b.n	80058b4 <__svfiscanf_r+0x1ac>
 8005984:	22c0      	movs	r2, #192	; 0xc0
 8005986:	ab43      	add	r3, sp, #268	; 0x10c
 8005988:	0052      	lsls	r2, r2, #1
 800598a:	0021      	movs	r1, r4
 800598c:	0030      	movs	r0, r6
 800598e:	589b      	ldr	r3, [r3, r2]
 8005990:	4798      	blx	r3
 8005992:	2800      	cmp	r0, #0
 8005994:	d0ad      	beq.n	80058f2 <__svfiscanf_r+0x1ea>
 8005996:	e783      	b.n	80058a0 <__svfiscanf_r+0x198>
 8005998:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800599a:	3201      	adds	r2, #1
 800599c:	9247      	str	r2, [sp, #284]	; 0x11c
 800599e:	6862      	ldr	r2, [r4, #4]
 80059a0:	3a01      	subs	r2, #1
 80059a2:	6062      	str	r2, [r4, #4]
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	dd02      	ble.n	80059ae <__svfiscanf_r+0x2a6>
 80059a8:	3301      	adds	r3, #1
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	e7a4      	b.n	80058f8 <__svfiscanf_r+0x1f0>
 80059ae:	22c0      	movs	r2, #192	; 0xc0
 80059b0:	ab43      	add	r3, sp, #268	; 0x10c
 80059b2:	0052      	lsls	r2, r2, #1
 80059b4:	0021      	movs	r1, r4
 80059b6:	0030      	movs	r0, r6
 80059b8:	589b      	ldr	r3, [r3, r2]
 80059ba:	4798      	blx	r3
 80059bc:	2800      	cmp	r0, #0
 80059be:	d09b      	beq.n	80058f8 <__svfiscanf_r+0x1f0>
 80059c0:	e76e      	b.n	80058a0 <__svfiscanf_r+0x198>
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	dc10      	bgt.n	80059e8 <__svfiscanf_r+0x2e0>
 80059c6:	0022      	movs	r2, r4
 80059c8:	0030      	movs	r0, r6
 80059ca:	ab02      	add	r3, sp, #8
 80059cc:	a943      	add	r1, sp, #268	; 0x10c
 80059ce:	f000 f89d 	bl	8005b0c <_scanf_i>
 80059d2:	e7a1      	b.n	8005918 <__svfiscanf_r+0x210>
 80059d4:	fffffd6c 	.word	0xfffffd6c
 80059d8:	08006155 	.word	0x08006155
 80059dc:	08005f69 	.word	0x08005f69
 80059e0:	0800684b 	.word	0x0800684b
 80059e4:	08006802 	.word	0x08006802
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <__svfiscanf_r+0x31c>)
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d100      	bne.n	80059f0 <__svfiscanf_r+0x2e8>
 80059ee:	e6c2      	b.n	8005776 <__svfiscanf_r+0x6e>
 80059f0:	0022      	movs	r2, r4
 80059f2:	0030      	movs	r0, r6
 80059f4:	ab02      	add	r3, sp, #8
 80059f6:	a943      	add	r1, sp, #268	; 0x10c
 80059f8:	e000      	b.n	80059fc <__svfiscanf_r+0x2f4>
 80059fa:	bf00      	nop
 80059fc:	e78c      	b.n	8005918 <__svfiscanf_r+0x210>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	059b      	lsls	r3, r3, #22
 8005a02:	d500      	bpl.n	8005a06 <__svfiscanf_r+0x2fe>
 8005a04:	e750      	b.n	80058a8 <__svfiscanf_r+0x1a0>
 8005a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a08:	f7ff fab0 	bl	8004f6c <__retarget_lock_release_recursive>
 8005a0c:	e74c      	b.n	80058a8 <__svfiscanf_r+0x1a0>
 8005a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a10:	07db      	lsls	r3, r3, #31
 8005a12:	d405      	bmi.n	8005a20 <__svfiscanf_r+0x318>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	059b      	lsls	r3, r3, #22
 8005a18:	d402      	bmi.n	8005a20 <__svfiscanf_r+0x318>
 8005a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1c:	f7ff faa6 	bl	8004f6c <__retarget_lock_release_recursive>
 8005a20:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005a22:	e747      	b.n	80058b4 <__svfiscanf_r+0x1ac>
 8005a24:	00000000 	.word	0x00000000

08005a28 <_vfiscanf_r>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	0004      	movs	r4, r0
 8005a2c:	000d      	movs	r5, r1
 8005a2e:	0016      	movs	r6, r2
 8005a30:	001f      	movs	r7, r3
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d004      	beq.n	8005a40 <_vfiscanf_r+0x18>
 8005a36:	6a03      	ldr	r3, [r0, #32]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <_vfiscanf_r+0x18>
 8005a3c:	f7fe ffbc 	bl	80049b8 <__sinit>
 8005a40:	003b      	movs	r3, r7
 8005a42:	0032      	movs	r2, r6
 8005a44:	0029      	movs	r1, r5
 8005a46:	0020      	movs	r0, r4
 8005a48:	f7ff fe5e 	bl	8005708 <__svfiscanf_r>
 8005a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a50 <_scanf_chars>:
 8005a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a52:	0015      	movs	r5, r2
 8005a54:	688a      	ldr	r2, [r1, #8]
 8005a56:	000c      	movs	r4, r1
 8005a58:	9001      	str	r0, [sp, #4]
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d105      	bne.n	8005a6a <_scanf_chars+0x1a>
 8005a5e:	6989      	ldr	r1, [r1, #24]
 8005a60:	3201      	adds	r2, #1
 8005a62:	2900      	cmp	r1, #0
 8005a64:	d000      	beq.n	8005a68 <_scanf_chars+0x18>
 8005a66:	3a02      	subs	r2, #2
 8005a68:	60a2      	str	r2, [r4, #8]
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	06d2      	lsls	r2, r2, #27
 8005a6e:	d403      	bmi.n	8005a78 <_scanf_chars+0x28>
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	1d11      	adds	r1, r2, #4
 8005a74:	6019      	str	r1, [r3, #0]
 8005a76:	6817      	ldr	r7, [r2, #0]
 8005a78:	2600      	movs	r6, #0
 8005a7a:	69a0      	ldr	r0, [r4, #24]
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d013      	beq.n	8005aa8 <_scanf_chars+0x58>
 8005a80:	2801      	cmp	r0, #1
 8005a82:	d108      	bne.n	8005a96 <_scanf_chars+0x46>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	6962      	ldr	r2, [r4, #20]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <_scanf_chars+0x58>
 8005a90:	2e00      	cmp	r6, #0
 8005a92:	d038      	beq.n	8005b06 <_scanf_chars+0xb6>
 8005a94:	e026      	b.n	8005ae4 <_scanf_chars+0x94>
 8005a96:	2802      	cmp	r0, #2
 8005a98:	d124      	bne.n	8005ae4 <_scanf_chars+0x94>
 8005a9a:	682b      	ldr	r3, [r5, #0]
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <_scanf_chars+0xb8>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	4213      	tst	r3, r2
 8005aa6:	d11d      	bne.n	8005ae4 <_scanf_chars+0x94>
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	3601      	adds	r6, #1
 8005aae:	4213      	tst	r3, r2
 8005ab0:	d103      	bne.n	8005aba <_scanf_chars+0x6a>
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	703b      	strb	r3, [r7, #0]
 8005ab8:	3701      	adds	r7, #1
 8005aba:	682a      	ldr	r2, [r5, #0]
 8005abc:	686b      	ldr	r3, [r5, #4]
 8005abe:	3201      	adds	r2, #1
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	68a2      	ldr	r2, [r4, #8]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	606b      	str	r3, [r5, #4]
 8005aca:	60a2      	str	r2, [r4, #8]
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	d009      	beq.n	8005ae4 <_scanf_chars+0x94>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dcd2      	bgt.n	8005a7a <_scanf_chars+0x2a>
 8005ad4:	23c0      	movs	r3, #192	; 0xc0
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	0029      	movs	r1, r5
 8005ada:	58e3      	ldr	r3, [r4, r3]
 8005adc:	9801      	ldr	r0, [sp, #4]
 8005ade:	4798      	blx	r3
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d0ca      	beq.n	8005a7a <_scanf_chars+0x2a>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	0011      	movs	r1, r2
 8005aea:	4019      	ands	r1, r3
 8005aec:	421a      	tst	r2, r3
 8005aee:	d106      	bne.n	8005afe <_scanf_chars+0xae>
 8005af0:	68e3      	ldr	r3, [r4, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60e3      	str	r3, [r4, #12]
 8005af6:	69a3      	ldr	r3, [r4, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d000      	beq.n	8005afe <_scanf_chars+0xae>
 8005afc:	7039      	strb	r1, [r7, #0]
 8005afe:	2000      	movs	r0, #0
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	199b      	adds	r3, r3, r6
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b08:	0800684b 	.word	0x0800684b

08005b0c <_scanf_i>:
 8005b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0e:	b08b      	sub	sp, #44	; 0x2c
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	4b7a      	ldr	r3, [pc, #488]	; (8005cfc <_scanf_i+0x1f0>)
 8005b14:	0016      	movs	r6, r2
 8005b16:	9004      	str	r0, [sp, #16]
 8005b18:	aa07      	add	r2, sp, #28
 8005b1a:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005b1c:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005b1e:	4a78      	ldr	r2, [pc, #480]	; (8005d00 <_scanf_i+0x1f4>)
 8005b20:	698b      	ldr	r3, [r1, #24]
 8005b22:	000c      	movs	r4, r1
 8005b24:	9205      	str	r2, [sp, #20]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d001      	beq.n	8005b2e <_scanf_i+0x22>
 8005b2a:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <_scanf_i+0x1f8>)
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	22ae      	movs	r2, #174	; 0xae
 8005b30:	2000      	movs	r0, #0
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	0052      	lsls	r2, r2, #1
 8005b36:	1e59      	subs	r1, r3, #1
 8005b38:	9003      	str	r0, [sp, #12]
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	d905      	bls.n	8005b4a <_scanf_i+0x3e>
 8005b3e:	3b5e      	subs	r3, #94	; 0x5e
 8005b40:	3bff      	subs	r3, #255	; 0xff
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	235e      	movs	r3, #94	; 0x5e
 8005b46:	33ff      	adds	r3, #255	; 0xff
 8005b48:	60a3      	str	r3, [r4, #8]
 8005b4a:	0023      	movs	r3, r4
 8005b4c:	331c      	adds	r3, #28
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	23d0      	movs	r3, #208	; 0xd0
 8005b52:	2700      	movs	r7, #0
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	9b00      	ldr	r3, [sp, #0]
 8005b5e:	9302      	str	r3, [sp, #8]
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	a807      	add	r0, sp, #28
 8005b64:	7819      	ldrb	r1, [r3, #0]
 8005b66:	00bb      	lsls	r3, r7, #2
 8005b68:	2202      	movs	r2, #2
 8005b6a:	5818      	ldr	r0, [r3, r0]
 8005b6c:	f000 fbb0 	bl	80062d0 <memchr>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d02a      	beq.n	8005bca <_scanf_i+0xbe>
 8005b74:	2f01      	cmp	r7, #1
 8005b76:	d161      	bne.n	8005c3c <_scanf_i+0x130>
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <_scanf_i+0x80>
 8005b7e:	3308      	adds	r3, #8
 8005b80:	6822      	ldr	r2, [r4, #0]
 8005b82:	6063      	str	r3, [r4, #4]
 8005b84:	33f9      	adds	r3, #249	; 0xf9
 8005b86:	33ff      	adds	r3, #255	; 0xff
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	4a5e      	ldr	r2, [pc, #376]	; (8005d08 <_scanf_i+0x1fc>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	68a3      	ldr	r3, [r4, #8]
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	60a2      	str	r2, [r4, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d015      	beq.n	8005bca <_scanf_i+0xbe>
 8005b9e:	6833      	ldr	r3, [r6, #0]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	6032      	str	r2, [r6, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	9a02      	ldr	r2, [sp, #8]
 8005ba8:	7013      	strb	r3, [r2, #0]
 8005baa:	6873      	ldr	r3, [r6, #4]
 8005bac:	1c55      	adds	r5, r2, #1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	6073      	str	r3, [r6, #4]
 8005bb2:	9502      	str	r5, [sp, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dc08      	bgt.n	8005bca <_scanf_i+0xbe>
 8005bb8:	23c0      	movs	r3, #192	; 0xc0
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	0031      	movs	r1, r6
 8005bbe:	58e3      	ldr	r3, [r4, r3]
 8005bc0:	9804      	ldr	r0, [sp, #16]
 8005bc2:	4798      	blx	r3
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d000      	beq.n	8005bca <_scanf_i+0xbe>
 8005bc8:	e080      	b.n	8005ccc <_scanf_i+0x1c0>
 8005bca:	3701      	adds	r7, #1
 8005bcc:	2f03      	cmp	r7, #3
 8005bce:	d1c7      	bne.n	8005b60 <_scanf_i+0x54>
 8005bd0:	6863      	ldr	r3, [r4, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <_scanf_i+0xce>
 8005bd6:	330a      	adds	r3, #10
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	2110      	movs	r1, #16
 8005bdc:	2700      	movs	r7, #0
 8005bde:	6863      	ldr	r3, [r4, #4]
 8005be0:	6960      	ldr	r0, [r4, #20]
 8005be2:	1ac9      	subs	r1, r1, r3
 8005be4:	4b49      	ldr	r3, [pc, #292]	; (8005d0c <_scanf_i+0x200>)
 8005be6:	18c9      	adds	r1, r1, r3
 8005be8:	f000 fa3a 	bl	8006060 <__sccl>
 8005bec:	9d02      	ldr	r5, [sp, #8]
 8005bee:	68a3      	ldr	r3, [r4, #8]
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d040      	beq.n	8005c7a <_scanf_i+0x16e>
 8005bf8:	6831      	ldr	r1, [r6, #0]
 8005bfa:	6963      	ldr	r3, [r4, #20]
 8005bfc:	780a      	ldrb	r2, [r1, #0]
 8005bfe:	5c9b      	ldrb	r3, [r3, r2]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03a      	beq.n	8005c7a <_scanf_i+0x16e>
 8005c04:	2a30      	cmp	r2, #48	; 0x30
 8005c06:	d129      	bne.n	8005c5c <_scanf_i+0x150>
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	4218      	tst	r0, r3
 8005c0e:	d025      	beq.n	8005c5c <_scanf_i+0x150>
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	3701      	adds	r7, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <_scanf_i+0x118>
 8005c18:	001a      	movs	r2, r3
 8005c1a:	9b02      	ldr	r3, [sp, #8]
 8005c1c:	3a01      	subs	r2, #1
 8005c1e:	3301      	adds	r3, #1
 8005c20:	9203      	str	r2, [sp, #12]
 8005c22:	60a3      	str	r3, [r4, #8]
 8005c24:	6873      	ldr	r3, [r6, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	6073      	str	r3, [r6, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd1d      	ble.n	8005c6a <_scanf_i+0x15e>
 8005c2e:	6833      	ldr	r3, [r6, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	6033      	str	r3, [r6, #0]
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	60a3      	str	r3, [r4, #8]
 8005c3a:	e7d8      	b.n	8005bee <_scanf_i+0xe2>
 8005c3c:	2f02      	cmp	r7, #2
 8005c3e:	d1a9      	bne.n	8005b94 <_scanf_i+0x88>
 8005c40:	21c0      	movs	r1, #192	; 0xc0
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	00c9      	lsls	r1, r1, #3
 8005c48:	4011      	ands	r1, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	d1bf      	bne.n	8005bd0 <_scanf_i+0xc4>
 8005c50:	3bf1      	subs	r3, #241	; 0xf1
 8005c52:	3bff      	subs	r3, #255	; 0xff
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	33f0      	adds	r3, #240	; 0xf0
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	e79a      	b.n	8005b92 <_scanf_i+0x86>
 8005c5c:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <_scanf_i+0x204>)
 8005c5e:	4003      	ands	r3, r0
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	780b      	ldrb	r3, [r1, #0]
 8005c64:	702b      	strb	r3, [r5, #0]
 8005c66:	3501      	adds	r5, #1
 8005c68:	e7dc      	b.n	8005c24 <_scanf_i+0x118>
 8005c6a:	23c0      	movs	r3, #192	; 0xc0
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	0031      	movs	r1, r6
 8005c70:	58e3      	ldr	r3, [r4, r3]
 8005c72:	9804      	ldr	r0, [sp, #16]
 8005c74:	4798      	blx	r3
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d0dc      	beq.n	8005c34 <_scanf_i+0x128>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	05db      	lsls	r3, r3, #23
 8005c7e:	d50e      	bpl.n	8005c9e <_scanf_i+0x192>
 8005c80:	9b00      	ldr	r3, [sp, #0]
 8005c82:	429d      	cmp	r5, r3
 8005c84:	d907      	bls.n	8005c96 <_scanf_i+0x18a>
 8005c86:	23be      	movs	r3, #190	; 0xbe
 8005c88:	3d01      	subs	r5, #1
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	0032      	movs	r2, r6
 8005c8e:	7829      	ldrb	r1, [r5, #0]
 8005c90:	58e3      	ldr	r3, [r4, r3]
 8005c92:	9804      	ldr	r0, [sp, #16]
 8005c94:	4798      	blx	r3
 8005c96:	9b00      	ldr	r3, [sp, #0]
 8005c98:	2001      	movs	r0, #1
 8005c9a:	429d      	cmp	r5, r3
 8005c9c:	d029      	beq.n	8005cf2 <_scanf_i+0x1e6>
 8005c9e:	6821      	ldr	r1, [r4, #0]
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	000a      	movs	r2, r1
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	4219      	tst	r1, r3
 8005ca8:	d11c      	bne.n	8005ce4 <_scanf_i+0x1d8>
 8005caa:	702a      	strb	r2, [r5, #0]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	9900      	ldr	r1, [sp, #0]
 8005cb0:	9804      	ldr	r0, [sp, #16]
 8005cb2:	9e05      	ldr	r6, [sp, #20]
 8005cb4:	47b0      	blx	r6
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	0691      	lsls	r1, r2, #26
 8005cbe:	d507      	bpl.n	8005cd0 <_scanf_i+0x1c4>
 8005cc0:	9901      	ldr	r1, [sp, #4]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	600a      	str	r2, [r1, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6018      	str	r0, [r3, #0]
 8005cca:	e008      	b.n	8005cde <_scanf_i+0x1d2>
 8005ccc:	2700      	movs	r7, #0
 8005cce:	e7d4      	b.n	8005c7a <_scanf_i+0x16e>
 8005cd0:	1d19      	adds	r1, r3, #4
 8005cd2:	07d6      	lsls	r6, r2, #31
 8005cd4:	d50f      	bpl.n	8005cf6 <_scanf_i+0x1ea>
 8005cd6:	9a01      	ldr	r2, [sp, #4]
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	8018      	strh	r0, [r3, #0]
 8005cde:	68e3      	ldr	r3, [r4, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60e3      	str	r3, [r4, #12]
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	9b00      	ldr	r3, [sp, #0]
 8005ce8:	1aed      	subs	r5, r5, r3
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	19ed      	adds	r5, r5, r7
 8005cee:	195b      	adds	r3, r3, r5
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	b00b      	add	sp, #44	; 0x2c
 8005cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf6:	9a01      	ldr	r2, [sp, #4]
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	e7e4      	b.n	8005cc6 <_scanf_i+0x1ba>
 8005cfc:	08006770 	.word	0x08006770
 8005d00:	08006465 	.word	0x08006465
 8005d04:	08006571 	.word	0x08006571
 8005d08:	fffffaff 	.word	0xfffffaff
 8005d0c:	0800682f 	.word	0x0800682f
 8005d10:	fffff6ff 	.word	0xfffff6ff

08005d14 <__sflush_r>:
 8005d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d16:	898b      	ldrh	r3, [r1, #12]
 8005d18:	0005      	movs	r5, r0
 8005d1a:	000c      	movs	r4, r1
 8005d1c:	071a      	lsls	r2, r3, #28
 8005d1e:	d45c      	bmi.n	8005dda <__sflush_r+0xc6>
 8005d20:	684a      	ldr	r2, [r1, #4]
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	dc04      	bgt.n	8005d30 <__sflush_r+0x1c>
 8005d26:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	dc01      	bgt.n	8005d30 <__sflush_r+0x1c>
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d32:	2f00      	cmp	r7, #0
 8005d34:	d0fa      	beq.n	8005d2c <__sflush_r+0x18>
 8005d36:	2200      	movs	r2, #0
 8005d38:	2080      	movs	r0, #128	; 0x80
 8005d3a:	682e      	ldr	r6, [r5, #0]
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	001a      	movs	r2, r3
 8005d40:	0140      	lsls	r0, r0, #5
 8005d42:	6a21      	ldr	r1, [r4, #32]
 8005d44:	4002      	ands	r2, r0
 8005d46:	4203      	tst	r3, r0
 8005d48:	d034      	beq.n	8005db4 <__sflush_r+0xa0>
 8005d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	075b      	lsls	r3, r3, #29
 8005d50:	d506      	bpl.n	8005d60 <__sflush_r+0x4c>
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	1ac0      	subs	r0, r0, r3
 8005d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <__sflush_r+0x4c>
 8005d5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d5e:	1ac0      	subs	r0, r0, r3
 8005d60:	0002      	movs	r2, r0
 8005d62:	2300      	movs	r3, #0
 8005d64:	0028      	movs	r0, r5
 8005d66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d68:	6a21      	ldr	r1, [r4, #32]
 8005d6a:	47b8      	blx	r7
 8005d6c:	89a2      	ldrh	r2, [r4, #12]
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d106      	bne.n	8005d80 <__sflush_r+0x6c>
 8005d72:	6829      	ldr	r1, [r5, #0]
 8005d74:	291d      	cmp	r1, #29
 8005d76:	d82c      	bhi.n	8005dd2 <__sflush_r+0xbe>
 8005d78:	4b2a      	ldr	r3, [pc, #168]	; (8005e24 <__sflush_r+0x110>)
 8005d7a:	410b      	asrs	r3, r1
 8005d7c:	07db      	lsls	r3, r3, #31
 8005d7e:	d428      	bmi.n	8005dd2 <__sflush_r+0xbe>
 8005d80:	2300      	movs	r3, #0
 8005d82:	6063      	str	r3, [r4, #4]
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	04d2      	lsls	r2, r2, #19
 8005d8a:	d505      	bpl.n	8005d98 <__sflush_r+0x84>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <__sflush_r+0x82>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d100      	bne.n	8005d98 <__sflush_r+0x84>
 8005d96:	6560      	str	r0, [r4, #84]	; 0x54
 8005d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d9a:	602e      	str	r6, [r5, #0]
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d0c5      	beq.n	8005d2c <__sflush_r+0x18>
 8005da0:	0023      	movs	r3, r4
 8005da2:	3344      	adds	r3, #68	; 0x44
 8005da4:	4299      	cmp	r1, r3
 8005da6:	d002      	beq.n	8005dae <__sflush_r+0x9a>
 8005da8:	0028      	movs	r0, r5
 8005daa:	f7ff f8e1 	bl	8004f70 <_free_r>
 8005dae:	2000      	movs	r0, #0
 8005db0:	6360      	str	r0, [r4, #52]	; 0x34
 8005db2:	e7bc      	b.n	8005d2e <__sflush_r+0x1a>
 8005db4:	2301      	movs	r3, #1
 8005db6:	0028      	movs	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d1c6      	bne.n	8005d4c <__sflush_r+0x38>
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0c3      	beq.n	8005d4c <__sflush_r+0x38>
 8005dc4:	2b1d      	cmp	r3, #29
 8005dc6:	d001      	beq.n	8005dcc <__sflush_r+0xb8>
 8005dc8:	2b16      	cmp	r3, #22
 8005dca:	d101      	bne.n	8005dd0 <__sflush_r+0xbc>
 8005dcc:	602e      	str	r6, [r5, #0]
 8005dce:	e7ad      	b.n	8005d2c <__sflush_r+0x18>
 8005dd0:	89a2      	ldrh	r2, [r4, #12]
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	e7a9      	b.n	8005d2e <__sflush_r+0x1a>
 8005dda:	690e      	ldr	r6, [r1, #16]
 8005ddc:	2e00      	cmp	r6, #0
 8005dde:	d0a5      	beq.n	8005d2c <__sflush_r+0x18>
 8005de0:	680f      	ldr	r7, [r1, #0]
 8005de2:	600e      	str	r6, [r1, #0]
 8005de4:	1bba      	subs	r2, r7, r6
 8005de6:	9201      	str	r2, [sp, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	079b      	lsls	r3, r3, #30
 8005dec:	d100      	bne.n	8005df0 <__sflush_r+0xdc>
 8005dee:	694a      	ldr	r2, [r1, #20]
 8005df0:	60a2      	str	r2, [r4, #8]
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dd99      	ble.n	8005d2c <__sflush_r+0x18>
 8005df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dfa:	0032      	movs	r2, r6
 8005dfc:	001f      	movs	r7, r3
 8005dfe:	0028      	movs	r0, r5
 8005e00:	9b01      	ldr	r3, [sp, #4]
 8005e02:	6a21      	ldr	r1, [r4, #32]
 8005e04:	47b8      	blx	r7
 8005e06:	2800      	cmp	r0, #0
 8005e08:	dc06      	bgt.n	8005e18 <__sflush_r+0x104>
 8005e0a:	2340      	movs	r3, #64	; 0x40
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	89a2      	ldrh	r2, [r4, #12]
 8005e10:	4240      	negs	r0, r0
 8005e12:	4313      	orrs	r3, r2
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	e78a      	b.n	8005d2e <__sflush_r+0x1a>
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	1836      	adds	r6, r6, r0
 8005e1c:	1a1b      	subs	r3, r3, r0
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	e7e7      	b.n	8005df2 <__sflush_r+0xde>
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	dfbffffe 	.word	0xdfbffffe

08005e28 <_fflush_r>:
 8005e28:	690b      	ldr	r3, [r1, #16]
 8005e2a:	b570      	push	{r4, r5, r6, lr}
 8005e2c:	0005      	movs	r5, r0
 8005e2e:	000c      	movs	r4, r1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <_fflush_r+0x12>
 8005e34:	2500      	movs	r5, #0
 8005e36:	0028      	movs	r0, r5
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d004      	beq.n	8005e48 <_fflush_r+0x20>
 8005e3e:	6a03      	ldr	r3, [r0, #32]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <_fflush_r+0x20>
 8005e44:	f7fe fdb8 	bl	80049b8 <__sinit>
 8005e48:	220c      	movs	r2, #12
 8005e4a:	5ea3      	ldrsh	r3, [r4, r2]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f1      	beq.n	8005e34 <_fflush_r+0xc>
 8005e50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e52:	07d2      	lsls	r2, r2, #31
 8005e54:	d404      	bmi.n	8005e60 <_fflush_r+0x38>
 8005e56:	059b      	lsls	r3, r3, #22
 8005e58:	d402      	bmi.n	8005e60 <_fflush_r+0x38>
 8005e5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e5c:	f7ff f885 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8005e60:	0028      	movs	r0, r5
 8005e62:	0021      	movs	r1, r4
 8005e64:	f7ff ff56 	bl	8005d14 <__sflush_r>
 8005e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e6a:	0005      	movs	r5, r0
 8005e6c:	07db      	lsls	r3, r3, #31
 8005e6e:	d4e2      	bmi.n	8005e36 <_fflush_r+0xe>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	059b      	lsls	r3, r3, #22
 8005e74:	d4df      	bmi.n	8005e36 <_fflush_r+0xe>
 8005e76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e78:	f7ff f878 	bl	8004f6c <__retarget_lock_release_recursive>
 8005e7c:	e7db      	b.n	8005e36 <_fflush_r+0xe>
	...

08005e80 <__swhatbuf_r>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	000e      	movs	r6, r1
 8005e84:	001d      	movs	r5, r3
 8005e86:	230e      	movs	r3, #14
 8005e88:	5ec9      	ldrsh	r1, [r1, r3]
 8005e8a:	0014      	movs	r4, r2
 8005e8c:	b096      	sub	sp, #88	; 0x58
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	da0c      	bge.n	8005eac <__swhatbuf_r+0x2c>
 8005e92:	89b2      	ldrh	r2, [r6, #12]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	0011      	movs	r1, r2
 8005e98:	4019      	ands	r1, r3
 8005e9a:	421a      	tst	r2, r3
 8005e9c:	d013      	beq.n	8005ec6 <__swhatbuf_r+0x46>
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	3b40      	subs	r3, #64	; 0x40
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	6029      	str	r1, [r5, #0]
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	b016      	add	sp, #88	; 0x58
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	466a      	mov	r2, sp
 8005eae:	f000 f9d9 	bl	8006264 <_fstat_r>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dbed      	blt.n	8005e92 <__swhatbuf_r+0x12>
 8005eb6:	23f0      	movs	r3, #240	; 0xf0
 8005eb8:	9901      	ldr	r1, [sp, #4]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	4019      	ands	r1, r3
 8005ebe:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <__swhatbuf_r+0x4c>)
 8005ec0:	18c9      	adds	r1, r1, r3
 8005ec2:	424b      	negs	r3, r1
 8005ec4:	4159      	adcs	r1, r3
 8005ec6:	2380      	movs	r3, #128	; 0x80
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	e7ea      	b.n	8005ea2 <__swhatbuf_r+0x22>
 8005ecc:	ffffe000 	.word	0xffffe000

08005ed0 <__smakebuf_r>:
 8005ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ed2:	2602      	movs	r6, #2
 8005ed4:	898b      	ldrh	r3, [r1, #12]
 8005ed6:	0005      	movs	r5, r0
 8005ed8:	000c      	movs	r4, r1
 8005eda:	4233      	tst	r3, r6
 8005edc:	d006      	beq.n	8005eec <__smakebuf_r+0x1c>
 8005ede:	0023      	movs	r3, r4
 8005ee0:	3347      	adds	r3, #71	; 0x47
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	6163      	str	r3, [r4, #20]
 8005eea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005eec:	466a      	mov	r2, sp
 8005eee:	ab01      	add	r3, sp, #4
 8005ef0:	f7ff ffc6 	bl	8005e80 <__swhatbuf_r>
 8005ef4:	9900      	ldr	r1, [sp, #0]
 8005ef6:	0007      	movs	r7, r0
 8005ef8:	0028      	movs	r0, r5
 8005efa:	f7ff f8af 	bl	800505c <_malloc_r>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d108      	bne.n	8005f14 <__smakebuf_r+0x44>
 8005f02:	220c      	movs	r2, #12
 8005f04:	5ea3      	ldrsh	r3, [r4, r2]
 8005f06:	059a      	lsls	r2, r3, #22
 8005f08:	d4ef      	bmi.n	8005eea <__smakebuf_r+0x1a>
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	4393      	bics	r3, r2
 8005f0e:	431e      	orrs	r6, r3
 8005f10:	81a6      	strh	r6, [r4, #12]
 8005f12:	e7e4      	b.n	8005ede <__smakebuf_r+0xe>
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	89a2      	ldrh	r2, [r4, #12]
 8005f18:	6020      	str	r0, [r4, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	6120      	str	r0, [r4, #16]
 8005f22:	6163      	str	r3, [r4, #20]
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00c      	beq.n	8005f44 <__smakebuf_r+0x74>
 8005f2a:	0028      	movs	r0, r5
 8005f2c:	230e      	movs	r3, #14
 8005f2e:	5ee1      	ldrsh	r1, [r4, r3]
 8005f30:	f000 f9aa 	bl	8006288 <_isatty_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d005      	beq.n	8005f44 <__smakebuf_r+0x74>
 8005f38:	2303      	movs	r3, #3
 8005f3a:	89a2      	ldrh	r2, [r4, #12]
 8005f3c:	439a      	bics	r2, r3
 8005f3e:	3b02      	subs	r3, #2
 8005f40:	4313      	orrs	r3, r2
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	433b      	orrs	r3, r7
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	e7ce      	b.n	8005eea <__smakebuf_r+0x1a>

08005f4c <lflush>:
 8005f4c:	2209      	movs	r2, #9
 8005f4e:	898b      	ldrh	r3, [r1, #12]
 8005f50:	2000      	movs	r0, #0
 8005f52:	b510      	push	{r4, lr}
 8005f54:	4013      	ands	r3, r2
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d103      	bne.n	8005f62 <lflush+0x16>
 8005f5a:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <lflush+0x18>)
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f7ff ff63 	bl	8005e28 <_fflush_r>
 8005f62:	bd10      	pop	{r4, pc}
 8005f64:	20000078 	.word	0x20000078

08005f68 <__srefill_r>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	0005      	movs	r5, r0
 8005f6c:	000c      	movs	r4, r1
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d004      	beq.n	8005f7c <__srefill_r+0x14>
 8005f72:	6a03      	ldr	r3, [r0, #32]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <__srefill_r+0x14>
 8005f78:	f7fe fd1e 	bl	80049b8 <__sinit>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6063      	str	r3, [r4, #4]
 8005f80:	230c      	movs	r3, #12
 8005f82:	5ee2      	ldrsh	r2, [r4, r3]
 8005f84:	b293      	uxth	r3, r2
 8005f86:	0691      	lsls	r1, r2, #26
 8005f88:	d502      	bpl.n	8005f90 <__srefill_r+0x28>
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	4240      	negs	r0, r0
 8005f8e:	e05e      	b.n	800604e <__srefill_r+0xe6>
 8005f90:	0759      	lsls	r1, r3, #29
 8005f92:	d44a      	bmi.n	800602a <__srefill_r+0xc2>
 8005f94:	06d9      	lsls	r1, r3, #27
 8005f96:	d405      	bmi.n	8005fa4 <__srefill_r+0x3c>
 8005f98:	2309      	movs	r3, #9
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	e7f2      	b.n	8005f8a <__srefill_r+0x22>
 8005fa4:	2608      	movs	r6, #8
 8005fa6:	4233      	tst	r3, r6
 8005fa8:	d00a      	beq.n	8005fc0 <__srefill_r+0x58>
 8005faa:	0021      	movs	r1, r4
 8005fac:	0028      	movs	r0, r5
 8005fae:	f7ff ff3b 	bl	8005e28 <_fflush_r>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d1e9      	bne.n	8005f8a <__srefill_r+0x22>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	60a0      	str	r0, [r4, #8]
 8005fba:	43b3      	bics	r3, r6
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	61a0      	str	r0, [r4, #24]
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	89a2      	ldrh	r2, [r4, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	81a3      	strh	r3, [r4, #12]
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <__srefill_r+0x6e>
 8005fce:	0021      	movs	r1, r4
 8005fd0:	0028      	movs	r0, r5
 8005fd2:	f7ff ff7d 	bl	8005ed0 <__smakebuf_r>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	5ee7      	ldrsh	r7, [r4, r3]
 8005fda:	b2be      	uxth	r6, r7
 8005fdc:	07bb      	lsls	r3, r7, #30
 8005fde:	d00f      	beq.n	8006000 <__srefill_r+0x98>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <__srefill_r+0xec>)
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	491c      	ldr	r1, [pc, #112]	; (8006058 <__srefill_r+0xf0>)
 8005fe8:	481c      	ldr	r0, [pc, #112]	; (800605c <__srefill_r+0xf4>)
 8005fea:	f7fe fcfd 	bl	80049e8 <_fwalk_sglue>
 8005fee:	2309      	movs	r3, #9
 8005ff0:	81a7      	strh	r7, [r4, #12]
 8005ff2:	401e      	ands	r6, r3
 8005ff4:	429e      	cmp	r6, r3
 8005ff6:	d103      	bne.n	8006000 <__srefill_r+0x98>
 8005ff8:	0021      	movs	r1, r4
 8005ffa:	0028      	movs	r0, r5
 8005ffc:	f7ff fe8a 	bl	8005d14 <__sflush_r>
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	6963      	ldr	r3, [r4, #20]
 8006004:	0028      	movs	r0, r5
 8006006:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006008:	6a21      	ldr	r1, [r4, #32]
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	47b0      	blx	r6
 800600e:	0003      	movs	r3, r0
 8006010:	6060      	str	r0, [r4, #4]
 8006012:	2000      	movs	r0, #0
 8006014:	4283      	cmp	r3, r0
 8006016:	dc1a      	bgt.n	800604e <__srefill_r+0xe6>
 8006018:	210c      	movs	r1, #12
 800601a:	5e62      	ldrsh	r2, [r4, r1]
 800601c:	4283      	cmp	r3, r0
 800601e:	d117      	bne.n	8006050 <__srefill_r+0xe8>
 8006020:	2320      	movs	r3, #32
 8006022:	4313      	orrs	r3, r2
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	3801      	subs	r0, #1
 8006028:	e011      	b.n	800604e <__srefill_r+0xe6>
 800602a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602c:	2900      	cmp	r1, #0
 800602e:	d0cb      	beq.n	8005fc8 <__srefill_r+0x60>
 8006030:	0023      	movs	r3, r4
 8006032:	3344      	adds	r3, #68	; 0x44
 8006034:	4299      	cmp	r1, r3
 8006036:	d002      	beq.n	800603e <__srefill_r+0xd6>
 8006038:	0028      	movs	r0, r5
 800603a:	f7fe ff99 	bl	8004f70 <_free_r>
 800603e:	2000      	movs	r0, #0
 8006040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006042:	6360      	str	r0, [r4, #52]	; 0x34
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	4283      	cmp	r3, r0
 8006048:	d0be      	beq.n	8005fc8 <__srefill_r+0x60>
 800604a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006050:	6060      	str	r0, [r4, #4]
 8006052:	e7a3      	b.n	8005f9c <__srefill_r+0x34>
 8006054:	20000020 	.word	0x20000020
 8006058:	08005f4d 	.word	0x08005f4d
 800605c:	2000002c 	.word	0x2000002c

08006060 <__sccl>:
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006062:	780b      	ldrb	r3, [r1, #0]
 8006064:	0004      	movs	r4, r0
 8006066:	2b5e      	cmp	r3, #94	; 0x5e
 8006068:	d019      	beq.n	800609e <__sccl+0x3e>
 800606a:	2200      	movs	r2, #0
 800606c:	1c4d      	adds	r5, r1, #1
 800606e:	0021      	movs	r1, r4
 8006070:	1c60      	adds	r0, r4, #1
 8006072:	30ff      	adds	r0, #255	; 0xff
 8006074:	700a      	strb	r2, [r1, #0]
 8006076:	3101      	adds	r1, #1
 8006078:	4281      	cmp	r1, r0
 800607a:	d1fb      	bne.n	8006074 <__sccl+0x14>
 800607c:	1e68      	subs	r0, r5, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <__sccl+0x3c>
 8006082:	2101      	movs	r1, #1
 8006084:	262d      	movs	r6, #45	; 0x2d
 8006086:	404a      	eors	r2, r1
 8006088:	0028      	movs	r0, r5
 800608a:	54e2      	strb	r2, [r4, r3]
 800608c:	7801      	ldrb	r1, [r0, #0]
 800608e:	1c45      	adds	r5, r0, #1
 8006090:	292d      	cmp	r1, #45	; 0x2d
 8006092:	d00c      	beq.n	80060ae <__sccl+0x4e>
 8006094:	295d      	cmp	r1, #93	; 0x5d
 8006096:	d01d      	beq.n	80060d4 <__sccl+0x74>
 8006098:	2900      	cmp	r1, #0
 800609a:	d104      	bne.n	80060a6 <__sccl+0x46>
 800609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609e:	2201      	movs	r2, #1
 80060a0:	784b      	ldrb	r3, [r1, #1]
 80060a2:	1c8d      	adds	r5, r1, #2
 80060a4:	e7e3      	b.n	800606e <__sccl+0xe>
 80060a6:	000b      	movs	r3, r1
 80060a8:	e7ee      	b.n	8006088 <__sccl+0x28>
 80060aa:	0033      	movs	r3, r6
 80060ac:	e7ec      	b.n	8006088 <__sccl+0x28>
 80060ae:	7841      	ldrb	r1, [r0, #1]
 80060b0:	295d      	cmp	r1, #93	; 0x5d
 80060b2:	d0fa      	beq.n	80060aa <__sccl+0x4a>
 80060b4:	428b      	cmp	r3, r1
 80060b6:	dcf8      	bgt.n	80060aa <__sccl+0x4a>
 80060b8:	001d      	movs	r5, r3
 80060ba:	3002      	adds	r0, #2
 80060bc:	3501      	adds	r5, #1
 80060be:	5562      	strb	r2, [r4, r5]
 80060c0:	42a9      	cmp	r1, r5
 80060c2:	dcfb      	bgt.n	80060bc <__sccl+0x5c>
 80060c4:	2500      	movs	r5, #0
 80060c6:	1c5f      	adds	r7, r3, #1
 80060c8:	428b      	cmp	r3, r1
 80060ca:	da01      	bge.n	80060d0 <__sccl+0x70>
 80060cc:	1acd      	subs	r5, r1, r3
 80060ce:	3d01      	subs	r5, #1
 80060d0:	197b      	adds	r3, r7, r5
 80060d2:	e7db      	b.n	800608c <__sccl+0x2c>
 80060d4:	0028      	movs	r0, r5
 80060d6:	e7e1      	b.n	800609c <__sccl+0x3c>

080060d8 <__submore>:
 80060d8:	000b      	movs	r3, r1
 80060da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060dc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80060de:	3344      	adds	r3, #68	; 0x44
 80060e0:	000c      	movs	r4, r1
 80060e2:	429d      	cmp	r5, r3
 80060e4:	d11c      	bne.n	8006120 <__submore+0x48>
 80060e6:	2680      	movs	r6, #128	; 0x80
 80060e8:	00f6      	lsls	r6, r6, #3
 80060ea:	0031      	movs	r1, r6
 80060ec:	f7fe ffb6 	bl	800505c <_malloc_r>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d102      	bne.n	80060fa <__submore+0x22>
 80060f4:	2001      	movs	r0, #1
 80060f6:	4240      	negs	r0, r0
 80060f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060fa:	0023      	movs	r3, r4
 80060fc:	6360      	str	r0, [r4, #52]	; 0x34
 80060fe:	63a6      	str	r6, [r4, #56]	; 0x38
 8006100:	3346      	adds	r3, #70	; 0x46
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <__submore+0x70>)
 8006106:	54c2      	strb	r2, [r0, r3]
 8006108:	0023      	movs	r3, r4
 800610a:	3345      	adds	r3, #69	; 0x45
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <__submore+0x74>)
 8006110:	54c2      	strb	r2, [r0, r3]
 8006112:	782a      	ldrb	r2, [r5, #0]
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <__submore+0x78>)
 8006116:	54c2      	strb	r2, [r0, r3]
 8006118:	18c0      	adds	r0, r0, r3
 800611a:	6020      	str	r0, [r4, #0]
 800611c:	2000      	movs	r0, #0
 800611e:	e7eb      	b.n	80060f8 <__submore+0x20>
 8006120:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006122:	0029      	movs	r1, r5
 8006124:	0073      	lsls	r3, r6, #1
 8006126:	001a      	movs	r2, r3
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	f000 f8e5 	bl	80062f8 <_realloc_r>
 800612e:	1e05      	subs	r5, r0, #0
 8006130:	d0e0      	beq.n	80060f4 <__submore+0x1c>
 8006132:	1987      	adds	r7, r0, r6
 8006134:	0001      	movs	r1, r0
 8006136:	0032      	movs	r2, r6
 8006138:	0038      	movs	r0, r7
 800613a:	f000 f8d4 	bl	80062e6 <memcpy>
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	6027      	str	r7, [r4, #0]
 8006142:	6365      	str	r5, [r4, #52]	; 0x34
 8006144:	63a3      	str	r3, [r4, #56]	; 0x38
 8006146:	e7e9      	b.n	800611c <__submore+0x44>
 8006148:	000003ff 	.word	0x000003ff
 800614c:	000003fe 	.word	0x000003fe
 8006150:	000003fd 	.word	0x000003fd

08006154 <_ungetc_r>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	0006      	movs	r6, r0
 8006158:	000d      	movs	r5, r1
 800615a:	0014      	movs	r4, r2
 800615c:	1c4b      	adds	r3, r1, #1
 800615e:	d103      	bne.n	8006168 <_ungetc_r+0x14>
 8006160:	2501      	movs	r5, #1
 8006162:	426d      	negs	r5, r5
 8006164:	0028      	movs	r0, r5
 8006166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006168:	2800      	cmp	r0, #0
 800616a:	d004      	beq.n	8006176 <_ungetc_r+0x22>
 800616c:	6a03      	ldr	r3, [r0, #32]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <_ungetc_r+0x22>
 8006172:	f7fe fc21 	bl	80049b8 <__sinit>
 8006176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006178:	07db      	lsls	r3, r3, #31
 800617a:	d405      	bmi.n	8006188 <_ungetc_r+0x34>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	059b      	lsls	r3, r3, #22
 8006180:	d402      	bmi.n	8006188 <_ungetc_r+0x34>
 8006182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006184:	f7fe fef1 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8006188:	2220      	movs	r2, #32
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	4393      	bics	r3, r2
 800618e:	b21b      	sxth	r3, r3
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	b29a      	uxth	r2, r3
 8006194:	075b      	lsls	r3, r3, #29
 8006196:	d423      	bmi.n	80061e0 <_ungetc_r+0x8c>
 8006198:	06d3      	lsls	r3, r2, #27
 800619a:	d408      	bmi.n	80061ae <_ungetc_r+0x5a>
 800619c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800619e:	07db      	lsls	r3, r3, #31
 80061a0:	d4de      	bmi.n	8006160 <_ungetc_r+0xc>
 80061a2:	0592      	lsls	r2, r2, #22
 80061a4:	d4dc      	bmi.n	8006160 <_ungetc_r+0xc>
 80061a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a8:	f7fe fee0 	bl	8004f6c <__retarget_lock_release_recursive>
 80061ac:	e7d8      	b.n	8006160 <_ungetc_r+0xc>
 80061ae:	2708      	movs	r7, #8
 80061b0:	423a      	tst	r2, r7
 80061b2:	d011      	beq.n	80061d8 <_ungetc_r+0x84>
 80061b4:	0021      	movs	r1, r4
 80061b6:	0030      	movs	r0, r6
 80061b8:	f7ff fe36 	bl	8005e28 <_fflush_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d006      	beq.n	80061ce <_ungetc_r+0x7a>
 80061c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061c2:	07db      	lsls	r3, r3, #31
 80061c4:	d4cc      	bmi.n	8006160 <_ungetc_r+0xc>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	059b      	lsls	r3, r3, #22
 80061ca:	d4c9      	bmi.n	8006160 <_ungetc_r+0xc>
 80061cc:	e7eb      	b.n	80061a6 <_ungetc_r+0x52>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	60a0      	str	r0, [r4, #8]
 80061d2:	43bb      	bics	r3, r7
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	61a0      	str	r0, [r4, #24]
 80061d8:	2304      	movs	r3, #4
 80061da:	89a2      	ldrh	r2, [r4, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80061e2:	b2ef      	uxtb	r7, r5
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	b2ed      	uxtb	r5, r5
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	d019      	beq.n	8006220 <_ungetc_r+0xcc>
 80061ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061ee:	429a      	cmp	r2, r3
 80061f0:	dc05      	bgt.n	80061fe <_ungetc_r+0xaa>
 80061f2:	0021      	movs	r1, r4
 80061f4:	0030      	movs	r0, r6
 80061f6:	f7ff ff6f 	bl	80060d8 <__submore>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d1e0      	bne.n	80061c0 <_ungetc_r+0x6c>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	701f      	strb	r7, [r3, #0]
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	3301      	adds	r3, #1
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800620e:	07db      	lsls	r3, r3, #31
 8006210:	d4a8      	bmi.n	8006164 <_ungetc_r+0x10>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	059b      	lsls	r3, r3, #22
 8006216:	d4a5      	bmi.n	8006164 <_ungetc_r+0x10>
 8006218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800621a:	f7fe fea7 	bl	8004f6c <__retarget_lock_release_recursive>
 800621e:	e7a1      	b.n	8006164 <_ungetc_r+0x10>
 8006220:	2601      	movs	r6, #1
 8006222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006224:	6920      	ldr	r0, [r4, #16]
 8006226:	6821      	ldr	r1, [r4, #0]
 8006228:	4032      	ands	r2, r6
 800622a:	2800      	cmp	r0, #0
 800622c:	d00c      	beq.n	8006248 <_ungetc_r+0xf4>
 800622e:	4288      	cmp	r0, r1
 8006230:	d20a      	bcs.n	8006248 <_ungetc_r+0xf4>
 8006232:	1e48      	subs	r0, r1, #1
 8006234:	7806      	ldrb	r6, [r0, #0]
 8006236:	42ae      	cmp	r6, r5
 8006238:	d106      	bne.n	8006248 <_ungetc_r+0xf4>
 800623a:	6020      	str	r0, [r4, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	6063      	str	r3, [r4, #4]
 8006240:	2a00      	cmp	r2, #0
 8006242:	d000      	beq.n	8006246 <_ungetc_r+0xf2>
 8006244:	e78e      	b.n	8006164 <_ungetc_r+0x10>
 8006246:	e7e4      	b.n	8006212 <_ungetc_r+0xbe>
 8006248:	6423      	str	r3, [r4, #64]	; 0x40
 800624a:	0023      	movs	r3, r4
 800624c:	3344      	adds	r3, #68	; 0x44
 800624e:	6363      	str	r3, [r4, #52]	; 0x34
 8006250:	2303      	movs	r3, #3
 8006252:	63a3      	str	r3, [r4, #56]	; 0x38
 8006254:	0023      	movs	r3, r4
 8006256:	3346      	adds	r3, #70	; 0x46
 8006258:	63e1      	str	r1, [r4, #60]	; 0x3c
 800625a:	701f      	strb	r7, [r3, #0]
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	2301      	movs	r3, #1
 8006260:	e7ed      	b.n	800623e <_ungetc_r+0xea>
	...

08006264 <_fstat_r>:
 8006264:	2300      	movs	r3, #0
 8006266:	b570      	push	{r4, r5, r6, lr}
 8006268:	4d06      	ldr	r5, [pc, #24]	; (8006284 <_fstat_r+0x20>)
 800626a:	0004      	movs	r4, r0
 800626c:	0008      	movs	r0, r1
 800626e:	0011      	movs	r1, r2
 8006270:	602b      	str	r3, [r5, #0]
 8006272:	f7fa ff05 	bl	8001080 <_fstat>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d103      	bne.n	8006282 <_fstat_r+0x1e>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d000      	beq.n	8006282 <_fstat_r+0x1e>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	200003a0 	.word	0x200003a0

08006288 <_isatty_r>:
 8006288:	2300      	movs	r3, #0
 800628a:	b570      	push	{r4, r5, r6, lr}
 800628c:	4d06      	ldr	r5, [pc, #24]	; (80062a8 <_isatty_r+0x20>)
 800628e:	0004      	movs	r4, r0
 8006290:	0008      	movs	r0, r1
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fa fe6e 	bl	8000f74 <_isatty>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d103      	bne.n	80062a4 <_isatty_r+0x1c>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d000      	beq.n	80062a4 <_isatty_r+0x1c>
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	200003a0 	.word	0x200003a0

080062ac <_sbrk_r>:
 80062ac:	2300      	movs	r3, #0
 80062ae:	b570      	push	{r4, r5, r6, lr}
 80062b0:	4d06      	ldr	r5, [pc, #24]	; (80062cc <_sbrk_r+0x20>)
 80062b2:	0004      	movs	r4, r0
 80062b4:	0008      	movs	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fa ffec 	bl	8001294 <_sbrk>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d103      	bne.n	80062c8 <_sbrk_r+0x1c>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d000      	beq.n	80062c8 <_sbrk_r+0x1c>
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	200003a0 	.word	0x200003a0

080062d0 <memchr>:
 80062d0:	b2c9      	uxtb	r1, r1
 80062d2:	1882      	adds	r2, r0, r2
 80062d4:	4290      	cmp	r0, r2
 80062d6:	d101      	bne.n	80062dc <memchr+0xc>
 80062d8:	2000      	movs	r0, #0
 80062da:	4770      	bx	lr
 80062dc:	7803      	ldrb	r3, [r0, #0]
 80062de:	428b      	cmp	r3, r1
 80062e0:	d0fb      	beq.n	80062da <memchr+0xa>
 80062e2:	3001      	adds	r0, #1
 80062e4:	e7f6      	b.n	80062d4 <memchr+0x4>

080062e6 <memcpy>:
 80062e6:	2300      	movs	r3, #0
 80062e8:	b510      	push	{r4, lr}
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d100      	bne.n	80062f0 <memcpy+0xa>
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	5ccc      	ldrb	r4, [r1, r3]
 80062f2:	54c4      	strb	r4, [r0, r3]
 80062f4:	3301      	adds	r3, #1
 80062f6:	e7f8      	b.n	80062ea <memcpy+0x4>

080062f8 <_realloc_r>:
 80062f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062fa:	0007      	movs	r7, r0
 80062fc:	000e      	movs	r6, r1
 80062fe:	0014      	movs	r4, r2
 8006300:	2900      	cmp	r1, #0
 8006302:	d105      	bne.n	8006310 <_realloc_r+0x18>
 8006304:	0011      	movs	r1, r2
 8006306:	f7fe fea9 	bl	800505c <_malloc_r>
 800630a:	0005      	movs	r5, r0
 800630c:	0028      	movs	r0, r5
 800630e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006310:	2a00      	cmp	r2, #0
 8006312:	d103      	bne.n	800631c <_realloc_r+0x24>
 8006314:	f7fe fe2c 	bl	8004f70 <_free_r>
 8006318:	0025      	movs	r5, r4
 800631a:	e7f7      	b.n	800630c <_realloc_r+0x14>
 800631c:	f000 f92c 	bl	8006578 <_malloc_usable_size_r>
 8006320:	9001      	str	r0, [sp, #4]
 8006322:	4284      	cmp	r4, r0
 8006324:	d803      	bhi.n	800632e <_realloc_r+0x36>
 8006326:	0035      	movs	r5, r6
 8006328:	0843      	lsrs	r3, r0, #1
 800632a:	42a3      	cmp	r3, r4
 800632c:	d3ee      	bcc.n	800630c <_realloc_r+0x14>
 800632e:	0021      	movs	r1, r4
 8006330:	0038      	movs	r0, r7
 8006332:	f7fe fe93 	bl	800505c <_malloc_r>
 8006336:	1e05      	subs	r5, r0, #0
 8006338:	d0e8      	beq.n	800630c <_realloc_r+0x14>
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	0022      	movs	r2, r4
 800633e:	429c      	cmp	r4, r3
 8006340:	d900      	bls.n	8006344 <_realloc_r+0x4c>
 8006342:	001a      	movs	r2, r3
 8006344:	0031      	movs	r1, r6
 8006346:	0028      	movs	r0, r5
 8006348:	f7ff ffcd 	bl	80062e6 <memcpy>
 800634c:	0031      	movs	r1, r6
 800634e:	0038      	movs	r0, r7
 8006350:	f7fe fe0e 	bl	8004f70 <_free_r>
 8006354:	e7da      	b.n	800630c <_realloc_r+0x14>
	...

08006358 <_strtol_l.constprop.0>:
 8006358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635a:	b087      	sub	sp, #28
 800635c:	001e      	movs	r6, r3
 800635e:	9005      	str	r0, [sp, #20]
 8006360:	9101      	str	r1, [sp, #4]
 8006362:	9202      	str	r2, [sp, #8]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d048      	beq.n	80063fa <_strtol_l.constprop.0+0xa2>
 8006368:	000b      	movs	r3, r1
 800636a:	2e24      	cmp	r6, #36	; 0x24
 800636c:	d845      	bhi.n	80063fa <_strtol_l.constprop.0+0xa2>
 800636e:	4a3b      	ldr	r2, [pc, #236]	; (800645c <_strtol_l.constprop.0+0x104>)
 8006370:	2108      	movs	r1, #8
 8006372:	4694      	mov	ip, r2
 8006374:	001a      	movs	r2, r3
 8006376:	4660      	mov	r0, ip
 8006378:	7814      	ldrb	r4, [r2, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	5d00      	ldrb	r0, [r0, r4]
 800637e:	001d      	movs	r5, r3
 8006380:	0007      	movs	r7, r0
 8006382:	400f      	ands	r7, r1
 8006384:	4208      	tst	r0, r1
 8006386:	d1f5      	bne.n	8006374 <_strtol_l.constprop.0+0x1c>
 8006388:	2c2d      	cmp	r4, #45	; 0x2d
 800638a:	d13d      	bne.n	8006408 <_strtol_l.constprop.0+0xb0>
 800638c:	2701      	movs	r7, #1
 800638e:	781c      	ldrb	r4, [r3, #0]
 8006390:	1c95      	adds	r5, r2, #2
 8006392:	2e00      	cmp	r6, #0
 8006394:	d05e      	beq.n	8006454 <_strtol_l.constprop.0+0xfc>
 8006396:	2e10      	cmp	r6, #16
 8006398:	d109      	bne.n	80063ae <_strtol_l.constprop.0+0x56>
 800639a:	2c30      	cmp	r4, #48	; 0x30
 800639c:	d107      	bne.n	80063ae <_strtol_l.constprop.0+0x56>
 800639e:	2220      	movs	r2, #32
 80063a0:	782b      	ldrb	r3, [r5, #0]
 80063a2:	4393      	bics	r3, r2
 80063a4:	2b58      	cmp	r3, #88	; 0x58
 80063a6:	d150      	bne.n	800644a <_strtol_l.constprop.0+0xf2>
 80063a8:	2610      	movs	r6, #16
 80063aa:	786c      	ldrb	r4, [r5, #1]
 80063ac:	3502      	adds	r5, #2
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <_strtol_l.constprop.0+0x108>)
 80063b0:	0031      	movs	r1, r6
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	0018      	movs	r0, r3
 80063b6:	9303      	str	r3, [sp, #12]
 80063b8:	f7f9 ff3e 	bl	8000238 <__aeabi_uidivmod>
 80063bc:	2200      	movs	r2, #0
 80063be:	9104      	str	r1, [sp, #16]
 80063c0:	2101      	movs	r1, #1
 80063c2:	4684      	mov	ip, r0
 80063c4:	0010      	movs	r0, r2
 80063c6:	4249      	negs	r1, r1
 80063c8:	0023      	movs	r3, r4
 80063ca:	3b30      	subs	r3, #48	; 0x30
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	d903      	bls.n	80063d8 <_strtol_l.constprop.0+0x80>
 80063d0:	3b11      	subs	r3, #17
 80063d2:	2b19      	cmp	r3, #25
 80063d4:	d81d      	bhi.n	8006412 <_strtol_l.constprop.0+0xba>
 80063d6:	330a      	adds	r3, #10
 80063d8:	429e      	cmp	r6, r3
 80063da:	dd1e      	ble.n	800641a <_strtol_l.constprop.0+0xc2>
 80063dc:	1c54      	adds	r4, r2, #1
 80063de:	d009      	beq.n	80063f4 <_strtol_l.constprop.0+0x9c>
 80063e0:	000a      	movs	r2, r1
 80063e2:	4584      	cmp	ip, r0
 80063e4:	d306      	bcc.n	80063f4 <_strtol_l.constprop.0+0x9c>
 80063e6:	d102      	bne.n	80063ee <_strtol_l.constprop.0+0x96>
 80063e8:	9c04      	ldr	r4, [sp, #16]
 80063ea:	429c      	cmp	r4, r3
 80063ec:	db02      	blt.n	80063f4 <_strtol_l.constprop.0+0x9c>
 80063ee:	2201      	movs	r2, #1
 80063f0:	4370      	muls	r0, r6
 80063f2:	1818      	adds	r0, r3, r0
 80063f4:	782c      	ldrb	r4, [r5, #0]
 80063f6:	3501      	adds	r5, #1
 80063f8:	e7e6      	b.n	80063c8 <_strtol_l.constprop.0+0x70>
 80063fa:	f7fe fd8b 	bl	8004f14 <__errno>
 80063fe:	2316      	movs	r3, #22
 8006400:	6003      	str	r3, [r0, #0]
 8006402:	2000      	movs	r0, #0
 8006404:	b007      	add	sp, #28
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006408:	2c2b      	cmp	r4, #43	; 0x2b
 800640a:	d1c2      	bne.n	8006392 <_strtol_l.constprop.0+0x3a>
 800640c:	781c      	ldrb	r4, [r3, #0]
 800640e:	1c95      	adds	r5, r2, #2
 8006410:	e7bf      	b.n	8006392 <_strtol_l.constprop.0+0x3a>
 8006412:	0023      	movs	r3, r4
 8006414:	3b61      	subs	r3, #97	; 0x61
 8006416:	2b19      	cmp	r3, #25
 8006418:	d9dd      	bls.n	80063d6 <_strtol_l.constprop.0+0x7e>
 800641a:	1c53      	adds	r3, r2, #1
 800641c:	d109      	bne.n	8006432 <_strtol_l.constprop.0+0xda>
 800641e:	2322      	movs	r3, #34	; 0x22
 8006420:	9a05      	ldr	r2, [sp, #20]
 8006422:	9803      	ldr	r0, [sp, #12]
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	9b02      	ldr	r3, [sp, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0eb      	beq.n	8006404 <_strtol_l.constprop.0+0xac>
 800642c:	1e6b      	subs	r3, r5, #1
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	e007      	b.n	8006442 <_strtol_l.constprop.0+0xea>
 8006432:	2f00      	cmp	r7, #0
 8006434:	d000      	beq.n	8006438 <_strtol_l.constprop.0+0xe0>
 8006436:	4240      	negs	r0, r0
 8006438:	9b02      	ldr	r3, [sp, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0e2      	beq.n	8006404 <_strtol_l.constprop.0+0xac>
 800643e:	2a00      	cmp	r2, #0
 8006440:	d1f4      	bne.n	800642c <_strtol_l.constprop.0+0xd4>
 8006442:	9b02      	ldr	r3, [sp, #8]
 8006444:	9a01      	ldr	r2, [sp, #4]
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e7dc      	b.n	8006404 <_strtol_l.constprop.0+0xac>
 800644a:	2430      	movs	r4, #48	; 0x30
 800644c:	2e00      	cmp	r6, #0
 800644e:	d1ae      	bne.n	80063ae <_strtol_l.constprop.0+0x56>
 8006450:	3608      	adds	r6, #8
 8006452:	e7ac      	b.n	80063ae <_strtol_l.constprop.0+0x56>
 8006454:	2c30      	cmp	r4, #48	; 0x30
 8006456:	d0a2      	beq.n	800639e <_strtol_l.constprop.0+0x46>
 8006458:	260a      	movs	r6, #10
 800645a:	e7a8      	b.n	80063ae <_strtol_l.constprop.0+0x56>
 800645c:	0800684b 	.word	0x0800684b
 8006460:	7fffffff 	.word	0x7fffffff

08006464 <_strtol_r>:
 8006464:	b510      	push	{r4, lr}
 8006466:	f7ff ff77 	bl	8006358 <_strtol_l.constprop.0>
 800646a:	bd10      	pop	{r4, pc}

0800646c <_strtoul_l.constprop.0>:
 800646c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646e:	b087      	sub	sp, #28
 8006470:	9202      	str	r2, [sp, #8]
 8006472:	4a3e      	ldr	r2, [pc, #248]	; (800656c <_strtoul_l.constprop.0+0x100>)
 8006474:	001e      	movs	r6, r3
 8006476:	9101      	str	r1, [sp, #4]
 8006478:	000b      	movs	r3, r1
 800647a:	4694      	mov	ip, r2
 800647c:	2108      	movs	r1, #8
 800647e:	9005      	str	r0, [sp, #20]
 8006480:	001a      	movs	r2, r3
 8006482:	4660      	mov	r0, ip
 8006484:	7814      	ldrb	r4, [r2, #0]
 8006486:	3301      	adds	r3, #1
 8006488:	5d00      	ldrb	r0, [r0, r4]
 800648a:	001d      	movs	r5, r3
 800648c:	0007      	movs	r7, r0
 800648e:	400f      	ands	r7, r1
 8006490:	4208      	tst	r0, r1
 8006492:	d1f5      	bne.n	8006480 <_strtoul_l.constprop.0+0x14>
 8006494:	2c2d      	cmp	r4, #45	; 0x2d
 8006496:	d13d      	bne.n	8006514 <_strtoul_l.constprop.0+0xa8>
 8006498:	2701      	movs	r7, #1
 800649a:	781c      	ldrb	r4, [r3, #0]
 800649c:	1c95      	adds	r5, r2, #2
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d05f      	beq.n	8006562 <_strtoul_l.constprop.0+0xf6>
 80064a2:	2e10      	cmp	r6, #16
 80064a4:	d109      	bne.n	80064ba <_strtoul_l.constprop.0+0x4e>
 80064a6:	2c30      	cmp	r4, #48	; 0x30
 80064a8:	d107      	bne.n	80064ba <_strtoul_l.constprop.0+0x4e>
 80064aa:	2220      	movs	r2, #32
 80064ac:	782b      	ldrb	r3, [r5, #0]
 80064ae:	4393      	bics	r3, r2
 80064b0:	2b58      	cmp	r3, #88	; 0x58
 80064b2:	d151      	bne.n	8006558 <_strtoul_l.constprop.0+0xec>
 80064b4:	2610      	movs	r6, #16
 80064b6:	786c      	ldrb	r4, [r5, #1]
 80064b8:	3502      	adds	r5, #2
 80064ba:	2001      	movs	r0, #1
 80064bc:	0031      	movs	r1, r6
 80064be:	4240      	negs	r0, r0
 80064c0:	f7f9 fe34 	bl	800012c <__udivsi3>
 80064c4:	9003      	str	r0, [sp, #12]
 80064c6:	2001      	movs	r0, #1
 80064c8:	0031      	movs	r1, r6
 80064ca:	4240      	negs	r0, r0
 80064cc:	f7f9 feb4 	bl	8000238 <__aeabi_uidivmod>
 80064d0:	2300      	movs	r3, #0
 80064d2:	2201      	movs	r2, #1
 80064d4:	9104      	str	r1, [sp, #16]
 80064d6:	2101      	movs	r1, #1
 80064d8:	0018      	movs	r0, r3
 80064da:	4694      	mov	ip, r2
 80064dc:	4249      	negs	r1, r1
 80064de:	0022      	movs	r2, r4
 80064e0:	3a30      	subs	r2, #48	; 0x30
 80064e2:	2a09      	cmp	r2, #9
 80064e4:	d903      	bls.n	80064ee <_strtoul_l.constprop.0+0x82>
 80064e6:	3a11      	subs	r2, #17
 80064e8:	2a19      	cmp	r2, #25
 80064ea:	d818      	bhi.n	800651e <_strtoul_l.constprop.0+0xb2>
 80064ec:	320a      	adds	r2, #10
 80064ee:	4296      	cmp	r6, r2
 80064f0:	dd19      	ble.n	8006526 <_strtoul_l.constprop.0+0xba>
 80064f2:	1c5c      	adds	r4, r3, #1
 80064f4:	d00b      	beq.n	800650e <_strtoul_l.constprop.0+0xa2>
 80064f6:	9c03      	ldr	r4, [sp, #12]
 80064f8:	000b      	movs	r3, r1
 80064fa:	4284      	cmp	r4, r0
 80064fc:	d307      	bcc.n	800650e <_strtoul_l.constprop.0+0xa2>
 80064fe:	d103      	bne.n	8006508 <_strtoul_l.constprop.0+0x9c>
 8006500:	9c04      	ldr	r4, [sp, #16]
 8006502:	000b      	movs	r3, r1
 8006504:	4294      	cmp	r4, r2
 8006506:	db02      	blt.n	800650e <_strtoul_l.constprop.0+0xa2>
 8006508:	4663      	mov	r3, ip
 800650a:	4370      	muls	r0, r6
 800650c:	1810      	adds	r0, r2, r0
 800650e:	782c      	ldrb	r4, [r5, #0]
 8006510:	3501      	adds	r5, #1
 8006512:	e7e4      	b.n	80064de <_strtoul_l.constprop.0+0x72>
 8006514:	2c2b      	cmp	r4, #43	; 0x2b
 8006516:	d1c2      	bne.n	800649e <_strtoul_l.constprop.0+0x32>
 8006518:	781c      	ldrb	r4, [r3, #0]
 800651a:	1c95      	adds	r5, r2, #2
 800651c:	e7bf      	b.n	800649e <_strtoul_l.constprop.0+0x32>
 800651e:	0022      	movs	r2, r4
 8006520:	3a61      	subs	r2, #97	; 0x61
 8006522:	2a19      	cmp	r2, #25
 8006524:	d9e2      	bls.n	80064ec <_strtoul_l.constprop.0+0x80>
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	d108      	bne.n	800653c <_strtoul_l.constprop.0+0xd0>
 800652a:	2222      	movs	r2, #34	; 0x22
 800652c:	9905      	ldr	r1, [sp, #20]
 800652e:	0018      	movs	r0, r3
 8006530:	600a      	str	r2, [r1, #0]
 8006532:	9a02      	ldr	r2, [sp, #8]
 8006534:	2a00      	cmp	r2, #0
 8006536:	d109      	bne.n	800654c <_strtoul_l.constprop.0+0xe0>
 8006538:	b007      	add	sp, #28
 800653a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800653c:	2f00      	cmp	r7, #0
 800653e:	d000      	beq.n	8006542 <_strtoul_l.constprop.0+0xd6>
 8006540:	4240      	negs	r0, r0
 8006542:	9a02      	ldr	r2, [sp, #8]
 8006544:	2a00      	cmp	r2, #0
 8006546:	d0f7      	beq.n	8006538 <_strtoul_l.constprop.0+0xcc>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <_strtoul_l.constprop.0+0xe4>
 800654c:	1e6b      	subs	r3, r5, #1
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	9b02      	ldr	r3, [sp, #8]
 8006552:	9a01      	ldr	r2, [sp, #4]
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e7ef      	b.n	8006538 <_strtoul_l.constprop.0+0xcc>
 8006558:	2430      	movs	r4, #48	; 0x30
 800655a:	2e00      	cmp	r6, #0
 800655c:	d1ad      	bne.n	80064ba <_strtoul_l.constprop.0+0x4e>
 800655e:	3608      	adds	r6, #8
 8006560:	e7ab      	b.n	80064ba <_strtoul_l.constprop.0+0x4e>
 8006562:	2c30      	cmp	r4, #48	; 0x30
 8006564:	d0a1      	beq.n	80064aa <_strtoul_l.constprop.0+0x3e>
 8006566:	260a      	movs	r6, #10
 8006568:	e7a7      	b.n	80064ba <_strtoul_l.constprop.0+0x4e>
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	0800684b 	.word	0x0800684b

08006570 <_strtoul_r>:
 8006570:	b510      	push	{r4, lr}
 8006572:	f7ff ff7b 	bl	800646c <_strtoul_l.constprop.0>
 8006576:	bd10      	pop	{r4, pc}

08006578 <_malloc_usable_size_r>:
 8006578:	1f0b      	subs	r3, r1, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1f18      	subs	r0, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	da01      	bge.n	8006586 <_malloc_usable_size_r+0xe>
 8006582:	580b      	ldr	r3, [r1, r0]
 8006584:	18c0      	adds	r0, r0, r3
 8006586:	4770      	bx	lr

08006588 <_init>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr

08006594 <_fini>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr
